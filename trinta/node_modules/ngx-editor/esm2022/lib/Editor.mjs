import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { Subject } from 'rxjs';
import { isNil } from 'ngx-editor/utils';
import EditorCommands from './EditorCommands';
import defautlSchema from './schema';
import { parseContent } from './parsers';
import getDefaultPlugins from './defaultPlugins';
const defaultFeatures = {
    linkOnPaste: true,
    resizeImage: true,
};
const DEFAULT_OPTIONS = {
    content: null,
    history: true,
    keyboardShortcuts: true,
    inputRules: true,
    schema: defautlSchema,
    plugins: [],
    nodeViews: {},
    attributes: {},
    features: defaultFeatures,
    handleScrollToSelection: null,
    linkValidationPattern: '(https?://)?([\\da-z.-]+)\\.([a-z.]{2,6})[/\\w .-]*/??([^#\n\r]*)?#?([^\n\r]*)|(mailto:.*[@].*)',
};
class Editor {
    constructor(options = DEFAULT_OPTIONS) {
        this.valueChangesSubject = new Subject();
        this.updateSubject = new Subject();
        this.options = { ...DEFAULT_OPTIONS, ...options };
        this.createEditor();
    }
    get valueChanges() {
        return this.valueChangesSubject.asObservable();
    }
    get update() {
        return this.updateSubject.asObservable();
    }
    get schema() {
        return this.options.schema || defautlSchema;
    }
    get linkValidationPattern() {
        return this.options.linkValidationPattern;
    }
    get commands() {
        return new EditorCommands(this.view);
    }
    get features() {
        return { ...defaultFeatures, ...this.options.features };
    }
    handleTransactions(tr) {
        const state = this.view.state.apply(tr);
        this.view.updateState(state);
        this.updateSubject.next(this.view);
        if (!tr.docChanged && !tr.getMeta('FORCE_EMIT')) {
            return;
        }
        const json = state.doc.toJSON();
        this.valueChangesSubject.next(json);
    }
    createEditor() {
        const { options, schema } = this;
        const { content = null, nodeViews } = options;
        const { history = true, keyboardShortcuts = true, inputRules = true } = options;
        const doc = parseContent(content, schema);
        const plugins = options.plugins ?? [];
        const attributes = options.attributes ?? {};
        const defaultPlugins = getDefaultPlugins(schema, {
            history,
            keyboardShortcuts,
            inputRules,
        });
        this.view = new EditorView(null, {
            state: EditorState.create({
                doc,
                schema,
                plugins: [...defaultPlugins, ...plugins],
            }),
            nodeViews,
            dispatchTransaction: this.handleTransactions.bind(this),
            attributes,
            handleScrollToSelection: options.handleScrollToSelection,
        });
    }
    setContent(content) {
        if (isNil(content)) {
            return;
        }
        const { state } = this.view;
        const { tr, doc } = state;
        const newDoc = parseContent(content, this.schema);
        tr.replaceWith(0, state.doc.content.size, newDoc);
        // don't emit if both content is same
        if (doc.eq(tr.doc)) {
            return;
        }
        if (!tr.docChanged) {
            return;
        }
        this.view.dispatch(tr);
    }
    registerPlugin(plugin) {
        const { state } = this.view;
        const plugins = [...state.plugins, plugin];
        const newState = state.reconfigure({ plugins });
        this.view.updateState(newState);
    }
    destroy() {
        this.view.destroy();
    }
}
export default Editor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVkaXRvci9zcmMvbGliL0VkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUF1QixNQUFNLG1CQUFtQixDQUFDO0FBQ3JFLE9BQU8sRUFBZSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV6QyxPQUFPLGNBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUM5QyxPQUFPLGFBQWEsTUFBTSxVQUFVLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN6QyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixDQUFDO0FBeUJqRCxNQUFNLGVBQWUsR0FBRztJQUN0QixXQUFXLEVBQUUsSUFBSTtJQUNqQixXQUFXLEVBQUUsSUFBSTtDQUNsQixDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQVk7SUFDL0IsT0FBTyxFQUFFLElBQUk7SUFDYixPQUFPLEVBQUUsSUFBSTtJQUNiLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsVUFBVSxFQUFFLElBQUk7SUFDaEIsTUFBTSxFQUFFLGFBQWE7SUFDckIsT0FBTyxFQUFFLEVBQUU7SUFDWCxTQUFTLEVBQUUsRUFBRTtJQUNiLFVBQVUsRUFBRSxFQUFFO0lBQ2QsUUFBUSxFQUFFLGVBQWU7SUFDekIsdUJBQXVCLEVBQUUsSUFBSTtJQUM3QixxQkFBcUIsRUFBRSxpR0FBaUc7Q0FDekgsQ0FBQztBQUVGLE1BQU0sTUFBTTtJQUlWLFlBQVksVUFBbUIsZUFBZTtRQUt0Qyx3QkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBQzdDLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQWMsQ0FBQztRQUxo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IjpbImltcG9ydCB7IFNjaGVtYSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IEVkaXRvclN0YXRlLCBQbHVnaW4sIFRyYW5zYWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgRWRpdG9yUHJvcHMsIEVkaXRvclZpZXcgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgaXNOaWwgfSBmcm9tICduZ3gtZWRpdG9yL3V0aWxzJztcblxuaW1wb3J0IEVkaXRvckNvbW1hbmRzIGZyb20gJy4vRWRpdG9yQ29tbWFuZHMnO1xuaW1wb3J0IGRlZmF1dGxTY2hlbWEgZnJvbSAnLi9zY2hlbWEnO1xuaW1wb3J0IHsgcGFyc2VDb250ZW50IH0gZnJvbSAnLi9wYXJzZXJzJztcbmltcG9ydCBnZXREZWZhdWx0UGx1Z2lucyBmcm9tICcuL2RlZmF1bHRQbHVnaW5zJztcbmltcG9ydCB7IEhUTUwgfSBmcm9tICcuL3RydXN0ZWRUeXBlc1V0aWwnO1xuXG50eXBlIEpTT05Eb2MgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xudHlwZSBDb250ZW50ID0gSFRNTCB8IG51bGwgfCBKU09ORG9jO1xuXG5pbnRlcmZhY2UgT3B0aW9ucyB7XG4gIGNvbnRlbnQ/OiBDb250ZW50O1xuICBoaXN0b3J5PzogYm9vbGVhbjtcbiAga2V5Ym9hcmRTaG9ydGN1dHM/OiBib29sZWFuO1xuICBpbnB1dFJ1bGVzPzogYm9vbGVhbjtcbiAgc2NoZW1hPzogU2NoZW1hO1xuICBwbHVnaW5zPzogUGx1Z2luW107XG4gIG5vZGVWaWV3cz86IEVkaXRvclByb3BzWydub2RlVmlld3MnXTtcbiAgYXR0cmlidXRlcz86IEVkaXRvclByb3BzWydhdHRyaWJ1dGVzJ107XG4gIGZlYXR1cmVzPzogRWRpdG9yRmVhdHVyZXM7XG4gIGhhbmRsZVNjcm9sbFRvU2VsZWN0aW9uPzogRWRpdG9yUHJvcHNbJ2hhbmRsZVNjcm9sbFRvU2VsZWN0aW9uJ107XG4gIGxpbmtWYWxpZGF0aW9uUGF0dGVybj86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEVkaXRvckZlYXR1cmVzIHtcbiAgbGlua09uUGFzdGU/OiBib29sZWFuO1xuICByZXNpemVJbWFnZT86IGJvb2xlYW47XG59XG5cbmNvbnN0IGRlZmF1bHRGZWF0dXJlcyA9IHtcbiAgbGlua09uUGFzdGU6IHRydWUsXG4gIHJlc2l6ZUltYWdlOiB0cnVlLFxufTtcblxuY29uc3QgREVGQVVMVF9PUFRJT05TOiBPcHRpb25zID0ge1xuICBjb250ZW50OiBudWxsLFxuICBoaXN0b3J5OiB0cnVlLFxuICBrZXlib2FyZFNob3J0Y3V0czogdHJ1ZSxcbiAgaW5wdXRSdWxlczogdHJ1ZSxcbiAgc2NoZW1hOiBkZWZhdXRsU2NoZW1hLFxuICBwbHVnaW5zOiBbXSxcbiAgbm9kZVZpZXdzOiB7fSxcbiAgYXR0cmlidXRlczoge30sXG4gIGZlYXR1cmVzOiBkZWZhdWx0RmVhdHVyZXMsXG4gIGhhbmRsZVNjcm9sbFRvU2VsZWN0aW9uOiBudWxsLFxuICBsaW5rVmFsaWRhdGlvblBhdHRlcm46ICcoaHR0cHM/Oi8vKT8oW1xcXFxkYS16Li1dKylcXFxcLihbYS16Ll17Miw2fSlbL1xcXFx3IC4tXSovPz8oW14jXFxuXFxyXSopPyM/KFteXFxuXFxyXSopfChtYWlsdG86LipbQF0uKiknLFxufTtcblxuY2xhc3MgRWRpdG9yIHtcbiAgcHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zO1xuICB2aWV3OiBFZGl0b3JWaWV3O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMgPSBERUZBVUxUX09QVElPTlMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLkRFRkFVTFRfT1BUSU9OUywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuY3JlYXRlRWRpdG9yKCk7XG4gIH1cblxuICBwcml2YXRlIHZhbHVlQ2hhbmdlc1N1YmplY3QgPSBuZXcgU3ViamVjdDxKU09ORG9jPigpO1xuICBwcml2YXRlIHVwZGF0ZVN1YmplY3QgPSBuZXcgU3ViamVjdDxFZGl0b3JWaWV3PigpO1xuXG4gIGdldCB2YWx1ZUNoYW5nZXMoKTogT2JzZXJ2YWJsZTxKU09ORG9jPiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVDaGFuZ2VzU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldCB1cGRhdGUoKTogT2JzZXJ2YWJsZTxFZGl0b3JWaWV3PiB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldCBzY2hlbWEoKTogU2NoZW1hIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnNjaGVtYSB8fCBkZWZhdXRsU2NoZW1hO1xuICB9XG5cbiAgZ2V0IGxpbmtWYWxpZGF0aW9uUGF0dGVybigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGlua1ZhbGlkYXRpb25QYXR0ZXJuO1xuICB9XG5cbiAgZ2V0IGNvbW1hbmRzKCk6IEVkaXRvckNvbW1hbmRzIHtcbiAgICByZXR1cm4gbmV3IEVkaXRvckNvbW1hbmRzKHRoaXMudmlldyk7XG4gIH1cblxuICBnZXQgZmVhdHVyZXMoKTogRWRpdG9yRmVhdHVyZXMge1xuICAgIHJldHVybiB7IC4uLmRlZmF1bHRGZWF0dXJlcywgLi4udGhpcy5vcHRpb25zLmZlYXR1cmVzIH07XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVRyYW5zYWN0aW9ucyh0cjogVHJhbnNhY3Rpb24pOiB2b2lkIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMudmlldy5zdGF0ZS5hcHBseSh0cik7XG4gICAgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKHN0YXRlKTtcblxuICAgIHRoaXMudXBkYXRlU3ViamVjdC5uZXh0KHRoaXMudmlldyk7XG5cbiAgICBpZiAoIXRyLmRvY0NoYW5nZWQgJiYgIXRyLmdldE1ldGEoJ0ZPUkNFX0VNSVQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGpzb24gPSBzdGF0ZS5kb2MudG9KU09OKCk7XG4gICAgdGhpcy52YWx1ZUNoYW5nZXNTdWJqZWN0Lm5leHQoanNvbik7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUVkaXRvcigpOiB2b2lkIHtcbiAgICBjb25zdCB7IG9wdGlvbnMsIHNjaGVtYSB9ID0gdGhpcztcbiAgICBjb25zdCB7IGNvbnRlbnQgPSBudWxsLCBub2RlVmlld3MgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgeyBoaXN0b3J5ID0gdHJ1ZSwga2V5Ym9hcmRTaG9ydGN1dHMgPSB0cnVlLCBpbnB1dFJ1bGVzID0gdHJ1ZSB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGRvYyA9IHBhcnNlQ29udGVudChjb250ZW50LCBzY2hlbWEpO1xuXG4gICAgY29uc3QgcGx1Z2luczogUGx1Z2luW10gPSBvcHRpb25zLnBsdWdpbnMgPz8gW107XG4gICAgY29uc3QgYXR0cmlidXRlczogRWRpdG9yUHJvcHNbJ2F0dHJpYnV0ZXMnXSA9IG9wdGlvbnMuYXR0cmlidXRlcyA/PyB7fTtcblxuICAgIGNvbnN0IGRlZmF1bHRQbHVnaW5zID0gZ2V0RGVmYXVsdFBsdWdpbnMoc2NoZW1hLCB7XG4gICAgICBoaXN0b3J5LFxuICAgICAga2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICBpbnB1dFJ1bGVzLFxuICAgIH0pO1xuXG4gICAgdGhpcy52aWV3ID0gbmV3IEVkaXRvclZpZXcobnVsbCwge1xuICAgICAgc3RhdGU6IEVkaXRvclN0YXRlLmNyZWF0ZSh7XG4gICAgICAgIGRvYyxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBwbHVnaW5zOiBbLi4uZGVmYXVsdFBsdWdpbnMsIC4uLnBsdWdpbnNdLFxuICAgICAgfSksXG4gICAgICBub2RlVmlld3MsXG4gICAgICBkaXNwYXRjaFRyYW5zYWN0aW9uOiB0aGlzLmhhbmRsZVRyYW5zYWN0aW9ucy5iaW5kKHRoaXMpLFxuICAgICAgYXR0cmlidXRlcyxcbiAgICAgIGhhbmRsZVNjcm9sbFRvU2VsZWN0aW9uOiBvcHRpb25zLmhhbmRsZVNjcm9sbFRvU2VsZWN0aW9uLFxuICAgIH0pO1xuICB9XG5cbiAgc2V0Q29udGVudChjb250ZW50OiBDb250ZW50KTogdm9pZCB7XG4gICAgaWYgKGlzTmlsKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcy52aWV3O1xuICAgIGNvbnN0IHsgdHIsIGRvYyB9ID0gc3RhdGU7XG5cbiAgICBjb25zdCBuZXdEb2MgPSBwYXJzZUNvbnRlbnQoY29udGVudCwgdGhpcy5zY2hlbWEpO1xuXG4gICAgdHIucmVwbGFjZVdpdGgoMCwgc3RhdGUuZG9jLmNvbnRlbnQuc2l6ZSwgbmV3RG9jKTtcblxuICAgIC8vIGRvbid0IGVtaXQgaWYgYm90aCBjb250ZW50IGlzIHNhbWVcbiAgICBpZiAoZG9jLmVxKHRyLmRvYykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRyLmRvY0NoYW5nZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnZpZXcuZGlzcGF0Y2godHIpO1xuICB9XG5cbiAgcmVnaXN0ZXJQbHVnaW4ocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzLnZpZXc7XG4gICAgY29uc3QgcGx1Z2lucyA9IFsuLi5zdGF0ZS5wbHVnaW5zLCBwbHVnaW5dO1xuXG4gICAgY29uc3QgbmV3U3RhdGUgPSBzdGF0ZS5yZWNvbmZpZ3VyZSh7IHBsdWdpbnMgfSk7XG4gICAgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKG5ld1N0YXRlKTtcbiAgfVxuXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3I7XG4iXX0=