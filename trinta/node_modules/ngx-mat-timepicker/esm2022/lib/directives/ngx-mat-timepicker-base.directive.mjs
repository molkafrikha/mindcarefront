import { Directive, HostListener, Inject, Input } from "@angular/core";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../tokens/ngx-mat-timepicker-config.token";
//
import { Subject } from "rxjs";
import { shareReplay, takeUntil } from "rxjs/operators";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker.service";
import * as i2 from "../services/ngx-mat-timepicker-event.service";
import * as i3 from "../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerBaseDirective {
    set color(newValue) {
        this._color = newValue;
    }
    get color() {
        return this._color;
    }
    get defaultTime() {
        return this._defaultTime;
    }
    set defaultTime(time) {
        this._defaultTime = time;
        this._setDefaultTime(time);
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    constructor(_timepickerSrv, _eventSrv, _timepickerLocaleSrv, data) {
        this._timepickerSrv = _timepickerSrv;
        this._eventSrv = _eventSrv;
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this.data = data;
        this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._subsCtrl$ = new Subject();
        this.color = data.color;
        this.defaultTime = data.defaultTime;
    }
    changePeriod(period) {
        this._timepickerSrv.period = period;
        this._onTimeChange();
    }
    changeTimeUnit(unit) {
        this.activeTimeUnit = unit;
    }
    close() {
        this.data.timepickerBaseRef.close();
    }
    ngOnDestroy() {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    ngOnInit() {
        this._defineTime();
        this.selectedHour = this._timepickerSrv.selectedHour
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedMinute = this._timepickerSrv.selectedMinute
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedPeriod = this._timepickerSrv.selectedPeriod
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))
            .subscribe({
            next: (v) => {
                v && this._setDefaultTime(v);
            }
        });
    }
    onHourChange(hour) {
        this._timepickerSrv.hour = hour;
        this._onTimeChange();
    }
    onHourSelected(hour) {
        if (!this.data.hoursOnly) {
            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);
        }
        this.data.timepickerBaseRef.hourSelected.next(hour);
    }
    onKeydown(e) {
        this._eventSrv.dispatchEvent(e);
        e.stopPropagation();
    }
    onMinuteChange(minute) {
        this._timepickerSrv.minute = minute;
        this._onTimeChange();
    }
    setTime() {
        this.data.timepickerBaseRef.timeSet.emit(this._timepickerSrv.getFullTime(this.data.format));
        this.close();
    }
    _defineTime() {
        const minTime = this.data.minTime;
        if (minTime && (!this.data.time && !this.data.defaultTime)) {
            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);
            this._setDefaultTime(time);
        }
    }
    _onTimeChange() {
        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {
            locale: this._locale,
            format: this.data.format
        });
        this.data.timepickerBaseRef.timeChanged.emit(time);
    }
    _setDefaultTime(time) {
        this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerBaseDirective, deps: [{ token: i1.NgxMatTimepickerService }, { token: i2.NgxMatTimepickerEventService }, { token: i3.NgxMatTimepickerLocaleService }, { token: NGX_MAT_TIMEPICKER_CONFIG }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: NgxMatTimepickerBaseDirective, isStandalone: true, selector: "[ngxMatTimepickerBase]", inputs: { color: "color", defaultTime: "defaultTime" }, host: { listeners: { "keydown": "onKeydown($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[ngxMatTimepickerBase]",
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerService }, { type: i2.NgxMatTimepickerEventService }, { type: i3.NgxMatTimepickerLocaleService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_MAT_TIMEPICKER_CONFIG]
                }] }], propDecorators: { color: [{
                type: Input
            }], defaultTime: [{
                type: Input
            }], onKeydown: [{
                type: HostListener,
                args: ["keydown", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWJhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdC10aW1lcGlja2VyL3NyYy9saWIvZGlyZWN0aXZlcy9uZ3gtbWF0LXRpbWVwaWNrZXItYmFzZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFNeEYsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsRUFBRTtBQUNGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBSTlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDJDQUEyQyxDQUFDO0FBQ3BGLEVBQUU7QUFDRixPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBTXRELE1BQU0sT0FBTyw2QkFBNkI7SUFFdEMsSUFDSSxLQUFLLENBQUMsUUFBc0I7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUNJLFdBQVcsQ0FBQyxJQUFZO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQVksT0FBTztRQUNmLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztJQUM1QyxDQUFDO0lBWUQsWUFBc0IsY0FBdUMsRUFDdkMsU0FBdUMsRUFDdkMsb0JBQW1ELEVBQ25CLElBQTRCO1FBSDVELG1CQUFjLEdBQWQsY0FBYyxDQUF5QjtRQUN2QyxjQUFTLEdBQVQsU0FBUyxDQUE4QjtRQUN2Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStCO1FBQ25CLFNBQUksR0FBSixJQUFJLENBQXdCO1FBYmxGLG1CQUFjLEdBQTBCLHFCQUFxQixDQUFDLElBQUksQ0FBQztRQUluRSxhQUFRLEdBQWlDLHFCQUFxQixDQUFDO1FBRXJELFdBQU0sR0FBaUIsU0FBUyxDQUFDO1FBRWpDLGVBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQU90RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxZQUFZLENBQUMsTUFBK0I7UUFDeEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsY0FBYyxDQUFDLElBQTJCO1FBQ3RDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWTthQUMvQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjO2FBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWM7YUFDbkQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNuRSxTQUFTLENBQUM7WUFDUCxJQUFJLEVBQUUsQ0FBQyxDQUFTLEVBQUUsRUFBRTtnQkFDaEIsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBK0I7UUFDeEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsY0FBYyxDQUFDLElBQVk7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUdELFNBQVMsQ0FBQyxDQUFNO1FBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBaUM7UUFDNUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUYsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFUyxXQUFXO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRWxDLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDeEQsTUFBTSxJQUFJLEdBQUcsdUJBQXVCLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFckYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUFFUyxhQUFhO1FBQ25CLE1BQU0sSUFBSSxHQUFHLHVCQUF1QixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkcsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3BCLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07U0FDM0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFUyxlQUFlLENBQUMsSUFBWTtRQUNsQyxJQUFJLENBQUMsY0FBYyxDQUFDLHlCQUF5QixDQUN6QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1RixDQUFDOzhHQWhJUSw2QkFBNkIsa0pBc0NsQix5QkFBeUI7a0dBdENwQyw2QkFBNkI7OzJGQUE3Qiw2QkFBNkI7a0JBSnpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsVUFBVSxFQUFFLElBQUk7aUJBQ25COzswQkF1Q2dCLE1BQU07MkJBQUMseUJBQXlCO3lDQW5DekMsS0FBSztzQkFEUixLQUFLO2dCQWNGLFdBQVc7c0JBRGQsS0FBSztnQkE0RU4sU0FBUztzQkFEUixZQUFZO3VCQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge1RoZW1lUGFsZXR0ZX0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2NvcmVcIjtcclxuLy9cclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyRXZlbnRTZXJ2aWNlfSBmcm9tIFwiLi4vc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLWV2ZW50LnNlcnZpY2VcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyTG9jYWxlU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1sb2NhbGUuc2VydmljZVwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJTZXJ2aWNlfSBmcm9tIFwiLi4vc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQWRhcHRlcn0gZnJvbSBcIi4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1hZGFwdGVyXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclVuaXRzfSBmcm9tIFwiLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci11bml0cy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZX0gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItY2xvY2stZmFjZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyUGVyaW9kc30gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItcGVyaW9kcy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckNvbmZpZ30gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItY29uZmlnLmludGVyZmFjZVwiO1xyXG5pbXBvcnQge05HWF9NQVRfVElNRVBJQ0tFUl9DT05GSUd9IGZyb20gXCIuLi90b2tlbnMvbmd4LW1hdC10aW1lcGlja2VyLWNvbmZpZy50b2tlblwiO1xyXG4vL1xyXG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7c2hhcmVSZXBsYXksIHRha2VVbnRpbH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcIltuZ3hNYXRUaW1lcGlja2VyQmFzZV1cIixcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgY29sb3IobmV3VmFsdWU6IFRoZW1lUGFsZXR0ZSkge1xyXG4gICAgICAgIHRoaXMuX2NvbG9yID0gbmV3VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvbG9yKCk6IFRoZW1lUGFsZXR0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBkZWZhdWx0VGltZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0VGltZTtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGRlZmF1bHRUaW1lKHRpbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2RlZmF1bHRUaW1lID0gdGltZTtcclxuICAgICAgICB0aGlzLl9zZXREZWZhdWx0VGltZSh0aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldCBfbG9jYWxlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVwaWNrZXJMb2NhbGVTcnYubG9jYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2ZVRpbWVVbml0OiBOZ3hNYXRUaW1lcGlja2VyVW5pdHMgPSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuSE9VUjtcclxuICAgIHNlbGVjdGVkSG91cjogT2JzZXJ2YWJsZTxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPjtcclxuICAgIHNlbGVjdGVkTWludXRlOiBPYnNlcnZhYmxlPE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2U+O1xyXG4gICAgc2VsZWN0ZWRQZXJpb2Q6IE9ic2VydmFibGU8Tmd4TWF0VGltZXBpY2tlclBlcmlvZHM+O1xyXG4gICAgdGltZVVuaXQ6IHR5cGVvZiBOZ3hNYXRUaW1lcGlja2VyVW5pdHMgPSBOZ3hNYXRUaW1lcGlja2VyVW5pdHM7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9jb2xvcjogVGhlbWVQYWxldHRlID0gXCJwcmltYXJ5XCI7XHJcbiAgICBwcm90ZWN0ZWQgX2RlZmF1bHRUaW1lOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX3N1YnNDdHJsJDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIF90aW1lcGlja2VyU3J2OiBOZ3hNYXRUaW1lcGlja2VyU2VydmljZSxcclxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBfZXZlbnRTcnY6IE5neE1hdFRpbWVwaWNrZXJFdmVudFNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgX3RpbWVwaWNrZXJMb2NhbGVTcnY6IE5neE1hdFRpbWVwaWNrZXJMb2NhbGVTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChOR1hfTUFUX1RJTUVQSUNLRVJfQ09ORklHKSBwdWJsaWMgZGF0YTogTmd4TWF0VGltZXBpY2tlckNvbmZpZykge1xyXG5cclxuICAgICAgICB0aGlzLmNvbG9yID0gZGF0YS5jb2xvcjtcclxuICAgICAgICB0aGlzLmRlZmF1bHRUaW1lID0gZGF0YS5kZWZhdWx0VGltZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VQZXJpb2QocGVyaW9kOiBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RpbWVwaWNrZXJTcnYucGVyaW9kID0gcGVyaW9kO1xyXG4gICAgICAgIHRoaXMuX29uVGltZUNoYW5nZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZVRpbWVVbml0KHVuaXQ6IE5neE1hdFRpbWVwaWNrZXJVbml0cyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVGltZVVuaXQgPSB1bml0O1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGF0YS50aW1lcGlja2VyQmFzZVJlZi5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3N1YnNDdHJsJC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5fc3Vic0N0cmwkLmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZGVmaW5lVGltZSgpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRIb3VyID0gdGhpcy5fdGltZXBpY2tlclNydi5zZWxlY3RlZEhvdXJcclxuICAgICAgICAgICAgLnBpcGUoc2hhcmVSZXBsYXkoe2J1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlfSkpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRNaW51dGUgPSB0aGlzLl90aW1lcGlja2VyU3J2LnNlbGVjdGVkTWludXRlXHJcbiAgICAgICAgICAgIC5waXBlKHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZX0pKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkUGVyaW9kID0gdGhpcy5fdGltZXBpY2tlclNydi5zZWxlY3RlZFBlcmlvZFxyXG4gICAgICAgICAgICAucGlwZShzaGFyZVJlcGxheSh7YnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWV9KSk7XHJcbiAgICAgICAgdGhpcy5kYXRhLnRpbWVwaWNrZXJCYXNlUmVmLnRpbWVVcGRhdGVkLnBpcGUodGFrZVVudGlsKHRoaXMuX3N1YnNDdHJsJCkpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICAgICAgbmV4dDogKHY6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHYgJiYgdGhpcy5fc2V0RGVmYXVsdFRpbWUodik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uSG91ckNoYW5nZShob3VyOiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGltZXBpY2tlclNydi5ob3VyID0gaG91cjtcclxuICAgICAgICB0aGlzLl9vblRpbWVDaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkhvdXJTZWxlY3RlZChob3VyOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5ob3Vyc09ubHkpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUaW1lVW5pdChOZ3hNYXRUaW1lcGlja2VyVW5pdHMuTUlOVVRFKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhLnRpbWVwaWNrZXJCYXNlUmVmLmhvdXJTZWxlY3RlZC5uZXh0KGhvdXIpO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoXCJrZXlkb3duXCIsIFtcIiRldmVudFwiXSlcclxuICAgIG9uS2V5ZG93bihlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9ldmVudFNydi5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25NaW51dGVDaGFuZ2UobWludXRlOiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGltZXBpY2tlclNydi5taW51dGUgPSBtaW51dGU7XHJcbiAgICAgICAgdGhpcy5fb25UaW1lQ2hhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRhdGEudGltZXBpY2tlckJhc2VSZWYudGltZVNldC5lbWl0KHRoaXMuX3RpbWVwaWNrZXJTcnYuZ2V0RnVsbFRpbWUodGhpcy5kYXRhLmZvcm1hdCkpO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2RlZmluZVRpbWUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgbWluVGltZSA9IHRoaXMuZGF0YS5taW5UaW1lO1xyXG5cclxuICAgICAgICBpZiAobWluVGltZSAmJiAoIXRoaXMuZGF0YS50aW1lICYmICF0aGlzLmRhdGEuZGVmYXVsdFRpbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5mcm9tRGF0ZVRpbWVUb1N0cmluZyhtaW5UaW1lLCB0aGlzLmRhdGEuZm9ybWF0KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3NldERlZmF1bHRUaW1lKHRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX29uVGltZUNoYW5nZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB0aW1lID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIudG9Mb2NhbGVUaW1lU3RyaW5nKHRoaXMuX3RpbWVwaWNrZXJTcnYuZ2V0RnVsbFRpbWUodGhpcy5kYXRhLmZvcm1hdCksIHtcclxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXHJcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5kYXRhLmZvcm1hdFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRhdGEudGltZXBpY2tlckJhc2VSZWYudGltZUNoYW5nZWQuZW1pdCh0aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3NldERlZmF1bHRUaW1lKHRpbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RpbWVwaWNrZXJTcnYuc2V0RGVmYXVsdFRpbWVJZkF2YWlsYWJsZShcclxuICAgICAgICAgICAgdGltZSwgdGhpcy5kYXRhLm1pblRpbWUsIHRoaXMuZGF0YS5tYXhUaW1lLCB0aGlzLmRhdGEuZm9ybWF0LCB0aGlzLmRhdGEubWludXRlc0dhcCk7XHJcbiAgICB9XHJcbn1cclxuIl19