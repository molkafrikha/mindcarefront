import { Pipe } from "@angular/core";
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerTimeLocalizerPipe {
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    constructor(_timepickerLocaleSrv) {
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
    }
    transform(time, timeUnit, isKeyboardEnabled = false) {
        if (time == null || time === "") {
            return "";
        }
        switch (timeUnit) {
            case NgxMatTimepickerUnits.HOUR: {
                const format = (time === 0 || isKeyboardEnabled) ? "HH" : "H";
                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);
            }
            case NgxMatTimepickerUnits.MINUTE:
                return this._formatTime(NgxMatTimepickerMeasure.minute, time, "mm");
            default:
                throw new Error(`There is no Time Unit with type ${timeUnit}`);
        }
    }
    _formatTime(timeMeasure, time, format) {
        try {
            return DateTime.fromObject({ [timeMeasure]: +time }).setLocale(this._locale).toFormat(format);
        }
        catch {
            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, deps: [{ token: i1.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, isStandalone: true, name: "timeLocalizer" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: "timeLocalizer",
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerLocaleService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxpemVyLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0LXRpbWVwaWNrZXIvc3JjL2xpYi9waXBlcy9uZ3gtbWF0LXRpbWVwaWNrZXItdGltZS1sb2NhbGl6ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUdsRCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx5Q0FBeUMsQ0FBQztBQUM5RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUNuRixFQUFFO0FBQ0YsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQzs7O0FBTWxDLE1BQU0sT0FBTyxpQ0FBaUM7SUFFMUMsSUFBWSxPQUFPO1FBQ2YsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0lBQzVDLENBQUM7SUFFRCxZQUFvQixvQkFBbUQ7UUFBbkQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUErQjtJQUN2RSxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQXFCLEVBQUUsUUFBK0IsRUFBRSxpQkFBaUIsR0FBRyxLQUFLO1FBQ3ZGLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxRQUFRLFFBQVEsRUFBRTtZQUNkLEtBQUsscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztnQkFFOUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDdkU7WUFDRCxLQUFLLHFCQUFxQixDQUFDLE1BQU07Z0JBQzdCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3hFO2dCQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDdEU7SUFDTCxDQUFDO0lBRU8sV0FBVyxDQUFDLFdBQW9DLEVBQUUsSUFBcUIsRUFBRSxNQUFjO1FBQzNGLElBQUk7WUFDQSxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvRjtRQUNELE1BQU07WUFDRixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxJQUFJLGdCQUFnQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUN4RjtJQUNMLENBQUM7OEdBbENRLGlDQUFpQzs0R0FBakMsaUNBQWlDOzsyRkFBakMsaUNBQWlDO2tCQUo3QyxJQUFJO21CQUFDO29CQUNGLElBQUksRUFBRSxlQUFlO29CQUNyQixVQUFVLEVBQUUsSUFBSTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckxvY2FsZVNlcnZpY2V9IGZyb20gXCIuLi9zZXJ2aWNlcy9uZ3gtbWF0LXRpbWVwaWNrZXItbG9jYWxlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVW5pdHN9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXVuaXRzLmVudW1cIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZX0gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItbWVhc3VyZXMuZW51bVwiO1xyXG4vL1xyXG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tIFwidHMtbHV4b25cIjtcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6IFwidGltZUxvY2FsaXplclwiLFxyXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlclRpbWVMb2NhbGl6ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgX2xvY2FsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lcGlja2VyTG9jYWxlU3J2LmxvY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90aW1lcGlja2VyTG9jYWxlU3J2OiBOZ3hNYXRUaW1lcGlja2VyTG9jYWxlU2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zZm9ybSh0aW1lOiBudW1iZXIgfCBzdHJpbmcsIHRpbWVVbml0OiBOZ3hNYXRUaW1lcGlja2VyVW5pdHMsIGlzS2V5Ym9hcmRFbmFibGVkID0gZmFsc2UpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aW1lID09IG51bGwgfHwgdGltZSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGltZVVuaXQpIHtcclxuICAgICAgICAgICAgY2FzZSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuSE9VUjoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gKHRpbWUgPT09IDAgfHwgaXNLZXlib2FyZEVuYWJsZWQpID8gXCJISFwiIDogXCJIXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFRpbWUoTmd4TWF0VGltZXBpY2tlck1lYXN1cmUuaG91ciwgdGltZSwgZm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIE5neE1hdFRpbWVwaWNrZXJVbml0cy5NSU5VVEU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0VGltZShOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZS5taW51dGUsIHRpbWUsIFwibW1cIik7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIFRpbWUgVW5pdCB3aXRoIHR5cGUgJHt0aW1lVW5pdH1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZm9ybWF0VGltZSh0aW1lTWVhc3VyZTogTmd4TWF0VGltZXBpY2tlck1lYXN1cmUsIHRpbWU6IHN0cmluZyB8IG51bWJlciwgZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tT2JqZWN0KHtbdGltZU1lYXN1cmVdOiArdGltZX0pLnNldExvY2FsZSh0aGlzLl9sb2NhbGUpLnRvRm9ybWF0KGZvcm1hdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZm9ybWF0IHByb3ZpZGVkIHRpbWUgLSAke3RpbWV9IHRvIGxvY2FsZSAtICR7dGhpcy5fbG9jYWxlfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=