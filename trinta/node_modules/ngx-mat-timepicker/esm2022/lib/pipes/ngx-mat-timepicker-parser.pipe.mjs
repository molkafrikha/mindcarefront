import { Injectable, Pipe } from "@angular/core";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerParserPipe {
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    constructor(_timepickerLocaleSrv) {
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOptions().numberingSystem;
    }
    transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {
        if (time == null || time === "") {
            return "";
        }
        if (!isNaN(+time)) {
            return `${time}`;
        }
        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {
            return this._parseTime(time, "mm", NgxMatTimepickerMeasure.minute).toString();
        }
        return this._parseTime(time, "HH", NgxMatTimepickerMeasure.hour).toString();
    }
    _parseTime(time, format, timeMeasure) {
        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this._numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error(`Cannot parse time - ${time}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerParserPipe, deps: [{ token: i1.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerParserPipe, isStandalone: true, name: "ngxMatTimepickerParser" }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerParserPipe }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerParserPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: "ngxMatTimepickerParser",
                    standalone: true
                }]
        }, {
            type: Injectable
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerLocaleService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdC10aW1lcGlja2VyL3NyYy9saWIvcGlwZXMvbmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxFQUFFO0FBQ0YsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0seUNBQXlDLENBQUM7QUFDOUUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFFbkYsRUFBRTtBQUNGLE9BQU8sRUFBQyxRQUFRLEVBQWtCLE1BQU0sVUFBVSxDQUFDOzs7QUFPbkQsTUFBTSxPQUFPLDBCQUEwQjtJQUVuQyxJQUFZLE9BQU87UUFDZixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7SUFDNUMsQ0FBQztJQUlELFlBQW9CLG9CQUFtRDtRQUFuRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStCO1FBQ25FLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLGVBQWtDLENBQUM7SUFDaEksQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJO1FBQ2xFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZixPQUFPLEdBQUcsSUFBSSxFQUFFLENBQUM7U0FDcEI7UUFFRCxJQUFJLFFBQVEsS0FBSyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakY7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRixDQUFDO0lBRU8sVUFBVSxDQUFDLElBQXFCLEVBQUUsTUFBYyxFQUFFLFdBQW9DO1FBQzFGLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BILElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxVQUFVLENBQUM7U0FDckI7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7OEdBbkNRLDBCQUEwQjs0R0FBMUIsMEJBQTBCO2tIQUExQiwwQkFBMEI7OzJGQUExQiwwQkFBMEI7a0JBTHRDLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLHdCQUF3QjtvQkFDOUIsVUFBVSxFQUFFLElBQUk7aUJBQ25COztrQkFDQSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG4vL1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVbml0c30gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItdW5pdHMuZW51bVwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJNZWFzdXJlfSBmcm9tIFwiLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1tZWFzdXJlcy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckxvY2FsZVNlcnZpY2V9IGZyb20gXCIuLi9zZXJ2aWNlcy9uZ3gtbWF0LXRpbWVwaWNrZXItbG9jYWxlLnNlcnZpY2VcIjtcclxuLy9cclxuaW1wb3J0IHtEYXRlVGltZSwgTnVtYmVyaW5nU3lzdGVtfSBmcm9tIFwidHMtbHV4b25cIjtcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6IFwibmd4TWF0VGltZXBpY2tlclBhcnNlclwiLFxyXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyUGFyc2VyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICAgIHByaXZhdGUgZ2V0IF9sb2NhbGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGltZXBpY2tlckxvY2FsZVNydi5sb2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbnVtYmVyaW5nU3lzdGVtOiBOdW1iZXJpbmdTeXN0ZW07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfdGltZXBpY2tlckxvY2FsZVNydjogTmd4TWF0VGltZXBpY2tlckxvY2FsZVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLl9udW1iZXJpbmdTeXN0ZW0gPSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSh0aGlzLl9sb2NhbGUpLnJlc29sdmVkTG9jYWxlT3B0aW9ucygpLm51bWJlcmluZ1N5c3RlbSBhcyBOdW1iZXJpbmdTeXN0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZyB8IG51bWJlciwgdGltZVVuaXQgPSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuSE9VUik6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRpbWUgPT0gbnVsbCB8fCB0aW1lID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFpc05hTigrdGltZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke3RpbWV9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aW1lVW5pdCA9PT0gTmd4TWF0VGltZXBpY2tlclVuaXRzLk1JTlVURSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyc2VUaW1lKHRpbWUsIFwibW1cIiwgTmd4TWF0VGltZXBpY2tlck1lYXN1cmUubWludXRlKS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlVGltZSh0aW1lLCBcIkhIXCIsIE5neE1hdFRpbWVwaWNrZXJNZWFzdXJlLmhvdXIpLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcGFyc2VUaW1lKHRpbWU6IHN0cmluZyB8IG51bWJlciwgZm9ybWF0OiBzdHJpbmcsIHRpbWVNZWFzdXJlOiBOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZSk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVGltZSA9IERhdGVUaW1lLmZyb21Gb3JtYXQoU3RyaW5nKHRpbWUpLCBmb3JtYXQsIHtudW1iZXJpbmdTeXN0ZW06IHRoaXMuX251bWJlcmluZ1N5c3RlbX0pW3RpbWVNZWFzdXJlXTtcclxuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZWRUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcGFyc2UgdGltZSAtICR7dGltZX1gKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19