import { Injectable } from "@angular/core";
import { NgxMatTimepickerPeriods } from "../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerAdapter } from "./ngx-mat-timepicker-adapter";
//
import { BehaviorSubject } from "rxjs";
import * as i0 from "@angular/core";
const DEFAULT_HOUR = {
    time: 12,
    angle: 360
};
const DEFAULT_MINUTE = {
    time: 0,
    angle: 360
};
export class NgxMatTimepickerService {
    constructor() {
        this._hour$ = new BehaviorSubject(DEFAULT_HOUR);
        this._minute$ = new BehaviorSubject(DEFAULT_MINUTE);
        this._period$ = new BehaviorSubject(NgxMatTimepickerPeriods.AM);
    }
    set hour(hour) {
        this._hour$.next(hour);
    }
    set minute(minute) {
        this._minute$.next(minute);
    }
    set period(period) {
        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);
        if (isPeriodValid) {
            this._period$.next(period);
        }
    }
    get selectedHour() {
        return this._hour$.asObservable();
    }
    get selectedMinute() {
        return this._minute$.asObservable();
    }
    get selectedPeriod() {
        return this._period$.asObservable();
    }
    getFullTime(format) {
        const selectedHour = this._hour$.getValue().time;
        const selectedMinute = this._minute$.getValue().time;
        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;
        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;
        const period = format === 12 ? this._period$.getValue() : "";
        const time = `${hour}:${minute} ${period}`.trim();
        return NgxMatTimepickerAdapter.formatTime(time, { format });
    }
    setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {
        time || this._resetTime();
        /* Workaround to double error message*/
        try {
            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, "minutes", minutesGap)) {
                this._setDefaultTime(time, format);
            }
        }
        catch (e) {
            console.error(e);
        }
    }
    _resetTime() {
        this.hour = { ...DEFAULT_HOUR };
        this.minute = { ...DEFAULT_MINUTE };
        this.period = NgxMatTimepickerPeriods.AM;
    }
    _setDefaultTime(time, format) {
        const defaultDto = NgxMatTimepickerAdapter.parseTime(time, { format });
        if (defaultDto.isValid) {
            const period = time.substring(time.length - 2).toUpperCase();
            const hour = defaultDto.hour;
            this.hour = { ...DEFAULT_HOUR, time: formatHourByPeriod(hour, period) };
            this.minute = { ...DEFAULT_MINUTE, time: defaultDto.minute };
            this.period = period;
        }
        else {
            this._resetTime();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerService, providedIn: "root" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }] });
/***
 *  Format hour in 24hours format to meridian (AM or PM) format
 */
function formatHourByPeriod(hour, period) {
    switch (period) {
        case NgxMatTimepickerPeriods.AM:
            return hour === 0 ? 12 : hour;
        case NgxMatTimepickerPeriods.PM:
            return hour === 12 ? 12 : hour - 12;
        default:
            return hour;
    }
}
//# sourceMappingURL=data:application/json;base64,