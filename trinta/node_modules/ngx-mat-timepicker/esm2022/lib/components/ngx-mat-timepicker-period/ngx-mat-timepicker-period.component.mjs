import { Component, EventEmitter, Input, Output } from "@angular/core";
import { animate, sequence, style, transition, trigger } from "@angular/animations";
import { NgClass, NgIf } from "@angular/common";
import { CdkOverlayOrigin, CdkConnectedOverlay } from "@angular/cdk/overlay";
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class NgxMatTimepickerPeriodComponent {
    constructor(_overlay) {
        this._overlay = _overlay;
        this.isPeriodAvailable = true;
        this.overlayScrollStrategy = this._overlay.scrollStrategies.reposition();
        this.periodChanged = new EventEmitter();
        this.timePeriod = NgxMatTimepickerPeriods;
    }
    animationDone() {
        this.isPeriodAvailable = true;
    }
    changePeriod(period) {
        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);
        if (this.isPeriodAvailable) {
            this.periodChanged.next(period);
        }
    }
    _getDisabledTimeByPeriod(period) {
        switch (this.activeTimeUnit) {
            case NgxMatTimepickerUnits.HOUR:
                return NgxMatTimepickerUtils.disableHours(this.hours, {
                    min: this.minTime,
                    max: this.maxTime,
                    format: this.format,
                    period
                });
            case NgxMatTimepickerUnits.MINUTE:
                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {
                    min: this.minTime,
                    max: this.maxTime,
                    format: this.format,
                    period
                });
            default:
                throw new Error("no such NgxMatTimepickerUnits");
        }
    }
    _isSwitchPeriodAvailable(period) {
        const time = this._getDisabledTimeByPeriod(period);
        return !time.every(t => t.disabled);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerPeriodComponent, deps: [{ token: i1.Overlay }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: NgxMatTimepickerPeriodComponent, isStandalone: true, selector: "ngx-mat-timepicker-period", inputs: { activeTimeUnit: "activeTimeUnit", format: "format", hours: "hours", maxTime: "maxTime", meridiems: "meridiems", minTime: "minTime", minutes: "minutes", selectedHour: "selectedHour", selectedPeriod: "selectedPeriod" }, outputs: { periodChanged: "periodChanged" }, ngImport: i0, template: "<div class=\"timepicker-period\"\r\n\t cdkOverlayOrigin\r\n     #eventPanelOrigin=\"cdkOverlayOrigin\">\r\n\t<button class=\"timepicker-dial__item timepicker-period__btn\"\r\n\t\t\t[ngClass]=\"{'active': selectedPeriod === timePeriod.AM}\"\r\n\t\t\t(click)=\"changePeriod(timePeriod.AM)\"\r\n\t\t\ttype=\"button\">{{meridiems[0]}}</button>\r\n\t<button class=\"timepicker-dial__item timepicker-period__btn\"\r\n\t\t\t[ngClass]=\"{'active': selectedPeriod === timePeriod.PM}\"\r\n\t\t\t(click)=\"changePeriod(timePeriod.PM)\"\r\n\t\t\ttype=\"button\">{{meridiems[1]}}</button>\r\n</div>\r\n<ng-template\r\n\t\tcdkConnectedOverlay\r\n\t\tcdkConnectedOverlayPanelClass=\"todo-remove-pointer-events-if-necessary\"\r\n\t\t[cdkConnectedOverlayScrollStrategy]=\"overlayScrollStrategy\"\r\n\t\t[cdkConnectedOverlayPositionStrategy]=\"overlayPositionStrategy\"\r\n\t\t[cdkConnectedOverlayOrigin]=\"eventPanelOrigin\"\r\n\t\t[cdkConnectedOverlayOpen]=\"!isPeriodAvailable\">\r\n\t<div class=\"timepicker-period__warning\"\r\n\t\t *ngIf=\"!isPeriodAvailable\"\r\n\t\t [@scaleInOut]\r\n\t\t (@scaleInOut.done)=\"animationDone()\">\r\n\t\t<p>Current time would be invalid in this period.</p>\r\n\t</div>\r\n</ng-template>\r\n", styles: [".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\n"], dependencies: [{ kind: "directive", type: CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush", "cdkConnectedOverlayDisposeOnNavigation"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [
            trigger("scaleInOut", [
                transition(":enter", [
                    style({ transform: "scale(0)" }),
                    animate(".2s", style({ transform: "scale(1)" })),
                    sequence([
                        animate("3s", style({ opacity: 1 })),
                        animate(".3s", style({ opacity: 0 }))
                    ])
                ])
            ])
        ] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerPeriodComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-period", animations: [
                        trigger("scaleInOut", [
                            transition(":enter", [
                                style({ transform: "scale(0)" }),
                                animate(".2s", style({ transform: "scale(1)" })),
                                sequence([
                                    animate("3s", style({ opacity: 1 })),
                                    animate(".3s", style({ opacity: 0 }))
                                ])
                            ])
                        ])
                    ], standalone: true, imports: [CdkOverlayOrigin, NgClass, CdkConnectedOverlay, NgIf], template: "<div class=\"timepicker-period\"\r\n\t cdkOverlayOrigin\r\n     #eventPanelOrigin=\"cdkOverlayOrigin\">\r\n\t<button class=\"timepicker-dial__item timepicker-period__btn\"\r\n\t\t\t[ngClass]=\"{'active': selectedPeriod === timePeriod.AM}\"\r\n\t\t\t(click)=\"changePeriod(timePeriod.AM)\"\r\n\t\t\ttype=\"button\">{{meridiems[0]}}</button>\r\n\t<button class=\"timepicker-dial__item timepicker-period__btn\"\r\n\t\t\t[ngClass]=\"{'active': selectedPeriod === timePeriod.PM}\"\r\n\t\t\t(click)=\"changePeriod(timePeriod.PM)\"\r\n\t\t\ttype=\"button\">{{meridiems[1]}}</button>\r\n</div>\r\n<ng-template\r\n\t\tcdkConnectedOverlay\r\n\t\tcdkConnectedOverlayPanelClass=\"todo-remove-pointer-events-if-necessary\"\r\n\t\t[cdkConnectedOverlayScrollStrategy]=\"overlayScrollStrategy\"\r\n\t\t[cdkConnectedOverlayPositionStrategy]=\"overlayPositionStrategy\"\r\n\t\t[cdkConnectedOverlayOrigin]=\"eventPanelOrigin\"\r\n\t\t[cdkConnectedOverlayOpen]=\"!isPeriodAvailable\">\r\n\t<div class=\"timepicker-period__warning\"\r\n\t\t *ngIf=\"!isPeriodAvailable\"\r\n\t\t [@scaleInOut]\r\n\t\t (@scaleInOut.done)=\"animationDone()\">\r\n\t\t<p>Current time would be invalid in this period.</p>\r\n\t</div>\r\n</ng-template>\r\n", styles: [".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\n"] }]
        }], ctorParameters: () => [{ type: i1.Overlay }], propDecorators: { activeTimeUnit: [{
                type: Input
            }], format: [{
                type: Input
            }], hours: [{
                type: Input
            }], maxTime: [{
                type: Input
            }], meridiems: [{
                type: Input
            }], minTime: [{
                type: Input
            }], minutes: [{
                type: Input
            }], periodChanged: [{
                type: Output
            }], selectedHour: [{
                type: Input
            }], selectedPeriod: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,