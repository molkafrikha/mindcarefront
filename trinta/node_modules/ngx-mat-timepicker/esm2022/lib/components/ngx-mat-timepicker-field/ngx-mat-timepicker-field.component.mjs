import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from "@angular/core";
import { NgClass, NgIf, NgFor, NgTemplateOutlet } from "@angular/common";
import { NG_VALUE_ACCESSOR, FormsModule } from "@angular/forms";
import { MatSelectModule } from "@angular/material/select";
import { MatOptionModule } from "@angular/material/core";
import { MatFormFieldModule } from "@angular/material/form-field";
import { MatIconModule } from "@angular/material/icon";
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerAdapter } from "../../services/ngx-mat-timepicker-adapter";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import { NgxMatTimepickerComponent } from "../ngx-mat-timepicker/ngx-mat-timepicker.component";
import { NgxMatTimepickerToggleIconDirective } from "../../directives/ngx-mat-timepicker-toggle-icon.directive";
import { NgxMatTimepickerToggleComponent } from "../ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component";
import { NgxMatTimepickerControlComponent } from "../ngx-mat-timepicker-control/ngx-mat-timepicker-control.component";
import { BehaviorSubject, Subject } from "rxjs";
import { distinctUntilChanged, map, takeUntil, tap } from "rxjs/operators";
import * as i0 from "@angular/core";
import * as i1 from "../../services/ngx-mat-timepicker.service";
import * as i2 from "../../services/ngx-mat-timepicker-locale.service";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/select";
import * as i5 from "@angular/material/core";
import * as i6 from "@angular/forms";
import * as i7 from "@angular/material/icon";
export class NgxMatTimepickerFieldComponent {
    get color() {
        return this._color;
    }
    set color(newValue) {
        this._color = newValue;
    }
    get defaultTime() {
        return this._defaultTime;
    }
    set defaultTime(val) {
        this._defaultTime = val;
        this._isDefaultTime = !!val;
    }
    get floatLabel() {
        return this._floatLabel;
    }
    set floatLabel(newValue) {
        this._floatLabel = newValue;
    }
    get format() {
        return this._format;
    }
    set format(value) {
        if (NgxMatTimepickerAdapter.isTwentyFour(value)) {
            this._format = 24;
            this.minHour = 0;
            this.maxHour = 23;
        }
        else {
            this._format = 12;
            this.minHour = 1;
            this.maxHour = 12;
        }
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);
        if (isDynamicallyChanged) {
            this._updateTime(this.timepickerTime);
        }
        this._previousFormat = this._format;
    }
    get max() {
        return this._max;
    }
    set max(value) {
        if (typeof value === "string") {
            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._max = value;
    }
    get min() {
        return this._min;
    }
    set min(value) {
        if (typeof value === "string") {
            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._min = value;
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    constructor(_timepickerService, _timepickerLocaleSrv) {
        this._timepickerService = _timepickerService;
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this.hour$ = new BehaviorSubject(void 0);
        this.maxHour = 12;
        this.minHour = 1;
        this.minute$ = new BehaviorSubject(void 0);
        this.period = NgxMatTimepickerPeriods.AM;
        this.periods = [
            NgxMatTimepickerPeriods.AM,
            NgxMatTimepickerPeriods.PM
        ];
        this.timeChanged = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._floatLabel = "auto";
        this._format = 12;
        this._isFirstTimeChange = true;
        this._subsCtrl$ = new Subject();
        this._onChange = () => {
        };
        this._onTouched = () => {
        };
    }
    changeHour(hour) {
        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);
        this._changeTime();
    }
    changeMinute(minute) {
        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);
        this._changeTime();
    }
    changePeriod(event) {
        this._timepickerService.period = event.value;
        this._changeTime();
    }
    ngOnDestroy() {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    ngOnInit() {
        this._initTime(this.defaultTime);
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        this.minutesList = NgxMatTimepickerUtils.getMinutes();
        this.isTimeRangeSet = !!(this.min || this.max);
        this._timepickerService.selectedHour.pipe(tap((clockTime) => this._selectedHour = clockTime?.time), map(this._changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this._updateAvailableMinutes()))
            .subscribe({
            next: (v) => this.hour$.next(v)
        });
        this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap(() => this._isFirstTimeChange = false))
            .subscribe({
            next: (v) => this.minute$.next(v)
        });
        // Selected period can only change when format is 12
        if (this.format === 12) {
            this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap((period) => this.period = period), tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)), takeUntil(this._subsCtrl$)).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());
        }
        else {
            // But we still need to run this once :) see #108
            this.isTimeRangeSet && this._updateAvailableTime();
        }
    }
    onTimeSet(time) {
        this._updateTime(time);
        this._emitLocalTimeChange(time);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    writeValue(val) {
        if (val) {
            this._initTime(val);
        }
        else {
            this._resetTime();
        }
    }
    _changeDefaultTimeValue(clockFaceTime) {
        if (!this._isDefaultTime && this._isFirstTimeChange) {
            return { ...clockFaceTime, time: null };
        }
        return clockFaceTime;
    }
    _changeTime() {
        if (!isNaN(this.hour$.getValue()?.time) && !isNaN(this.minute$.getValue()?.time)) {
            const time = this._timepickerService.getFullTime(this.format);
            this.timepickerTime = time;
            this._emitLocalTimeChange(time);
        }
    }
    _emitLocalTimeChange(time) {
        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, { format: this.format, locale: this._locale });
        this._onChange(localTime);
        this._onTouched(localTime);
        this.timeChanged.emit(localTime);
    }
    _initTime(time) {
        const isDefaultTimeAvailable = NgxMatTimepickerAdapter
            .isTimeAvailable(time, this.min, this.max, "minutes", null, this.format);
        if (!isDefaultTimeAvailable) {
            if (this.min) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min, this.format));
                return;
            }
            if (this.max) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max, this.format));
                return;
            }
        }
        this._updateTime(time);
    }
    _isPeriodDisabled(period) {
        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {
            min: this.min,
            max: this.max,
            format: 12,
            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM
        }).every(time => time.disabled);
    }
    _resetTime() {
        this._timepickerService.hour = { angle: 0, time: null };
        this._timepickerService.minute = { angle: 0, time: null };
    }
    _updateAvailableHours() {
        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {
            min: this.min,
            max: this.max,
            format: this.format,
            period: this.period
        });
    }
    _updateAvailableMinutes() {
        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {
            min: this.min,
            max: this.max,
            format: this.format,
            period: this.period
        });
    }
    _updateAvailableTime() {
        this._updateAvailableHours();
        if (this._selectedHour) {
            this._updateAvailableMinutes();
        }
    }
    _updateTime(time) {
        if (time) {
            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, { locale: this._locale, format: this.format });
            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);
            this.timepickerTime = formattedTime;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerFieldComponent, deps: [{ token: i1.NgxMatTimepickerService }, { token: i2.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: NgxMatTimepickerFieldComponent, isStandalone: true, selector: "ngx-mat-timepicker-field", inputs: { color: "color", defaultTime: "defaultTime", floatLabel: "floatLabel", format: "format", max: "max", min: "min", cancelBtnTmpl: "cancelBtnTmpl", confirmBtnTmpl: "confirmBtnTmpl", controlOnly: "controlOnly", disabled: "disabled", toggleIcon: "toggleIcon" }, outputs: { timeChanged: "timeChanged" }, providers: [
            NgxMatTimepickerService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: NgxMatTimepickerFieldComponent,
                multi: true
            }
        ], ngImport: i0, template: "<div class=\"ngx-mat-timepicker\"\r\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--first\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'HH'\"\r\n            [time]=\"hour$.getValue()?.time\"\r\n            [min]=\"minHour\"\r\n            [max]=\"maxHour\"\r\n            [timeUnit]=\"timeUnit.HOUR\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"hoursList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\r\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--third\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'MM'\"\r\n            [time]=\"minute$.getValue()?.time\"\r\n            [min]=\"0\"\r\n            [max]=\"59\"\r\n            [timeUnit]=\"timeUnit.MINUTE\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"minutesList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\r\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\r\n                    *ngIf=\"format !== 24\"\r\n                    [color]=\"color\">\r\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\r\n                    (selectionChange)=\"changePeriod($event)\"\r\n                    [ngModel]=\"period\">\r\n            <mat-option *ngFor=\"let option of periods\"\r\n                        [value]=\"option\">{{option}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <ngx-mat-timepicker-toggle\r\n            class=\"ngx-mat-timepicker__toggle\"\r\n            *ngIf=\"!controlOnly\"\r\n            [for]=\"timepicker\"\r\n            [disabled]=\"disabled\">\r\n        <span ngxMatTimepickerToggleIcon>\r\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\r\n        </span>\r\n    </ngx-mat-timepicker-toggle>\r\n</div>\r\n<ngx-mat-timepicker\r\n        [color]=\"color\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [defaultTime]=\"timepickerTime\"\r\n        [format]=\"format\"\r\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\r\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\r\n        (timeSet)=\"onTimeSet($event)\"\r\n        #timepicker></ngx-mat-timepicker>\r\n\r\n<ng-template #defaultIcon>\r\n    <mat-icon>watch_later</mat-icon>\r\n</ng-template>\r\n", styles: [".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:#00000012;pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\n"], dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: NgxMatTimepickerControlComponent, selector: "ngx-mat-timepicker-time-control", inputs: ["color", "disabled", "floatLabel", "max", "min", "placeholder", "preventTyping", "time", "timeList", "timeUnit"], outputs: ["timeChanged"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "ngmodule", type: MatSelectModule }, { kind: "component", type: i4.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i5.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "ngmodule", type: MatOptionModule }, { kind: "component", type: NgxMatTimepickerToggleComponent, selector: "ngx-mat-timepicker-toggle", inputs: ["disabled", "for"] }, { kind: "directive", type: NgxMatTimepickerToggleIconDirective, selector: "[ngxMatTimepickerToggleIcon]" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: NgxMatTimepickerComponent, selector: "ngx-mat-timepicker", inputs: ["appendToInput", "color", "dottedMinutesInGap", "enableKeyboardInput", "format", "minutesGap", "cancelBtnTmpl", "confirmBtnTmpl", "defaultTime", "disableAnimation", "editableHintTmpl", "hoursOnly", "isEsc", "max", "min", "preventOverlayClick", "timepickerClass"], outputs: ["closed", "hourSelected", "opened", "timeChanged", "timeSet"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i7.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-field", providers: [
                        NgxMatTimepickerService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NgxMatTimepickerFieldComponent,
                            multi: true
                        }
                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [
                        NgClass,
                        NgxMatTimepickerControlComponent,
                        NgIf,
                        MatFormFieldModule,
                        MatSelectModule,
                        FormsModule,
                        NgFor,
                        MatOptionModule,
                        NgxMatTimepickerToggleComponent,
                        NgxMatTimepickerToggleIconDirective,
                        NgTemplateOutlet,
                        NgxMatTimepickerComponent,
                        MatIconModule
                    ], template: "<div class=\"ngx-mat-timepicker\"\r\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--first\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'HH'\"\r\n            [time]=\"hour$.getValue()?.time\"\r\n            [min]=\"minHour\"\r\n            [max]=\"maxHour\"\r\n            [timeUnit]=\"timeUnit.HOUR\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"hoursList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\r\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--third\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'MM'\"\r\n            [time]=\"minute$.getValue()?.time\"\r\n            [min]=\"0\"\r\n            [max]=\"59\"\r\n            [timeUnit]=\"timeUnit.MINUTE\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"minutesList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\r\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\r\n                    *ngIf=\"format !== 24\"\r\n                    [color]=\"color\">\r\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\r\n                    (selectionChange)=\"changePeriod($event)\"\r\n                    [ngModel]=\"period\">\r\n            <mat-option *ngFor=\"let option of periods\"\r\n                        [value]=\"option\">{{option}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <ngx-mat-timepicker-toggle\r\n            class=\"ngx-mat-timepicker__toggle\"\r\n            *ngIf=\"!controlOnly\"\r\n            [for]=\"timepicker\"\r\n            [disabled]=\"disabled\">\r\n        <span ngxMatTimepickerToggleIcon>\r\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\r\n        </span>\r\n    </ngx-mat-timepicker-toggle>\r\n</div>\r\n<ngx-mat-timepicker\r\n        [color]=\"color\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [defaultTime]=\"timepickerTime\"\r\n        [format]=\"format\"\r\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\r\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\r\n        (timeSet)=\"onTimeSet($event)\"\r\n        #timepicker></ngx-mat-timepicker>\r\n\r\n<ng-template #defaultIcon>\r\n    <mat-icon>watch_later</mat-icon>\r\n</ng-template>\r\n", styles: [".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:#00000012;pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\n"] }]
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerService }, { type: i2.NgxMatTimepickerLocaleService }], propDecorators: { color: [{
                type: Input
            }], defaultTime: [{
                type: Input
            }], floatLabel: [{
                type: Input
            }], format: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], cancelBtnTmpl: [{
                type: Input
            }], confirmBtnTmpl: [{
                type: Input
            }], controlOnly: [{
                type: Input
            }], disabled: [{
                type: Input
            }], timeChanged: [{
                type: Output
            }], toggleIcon: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWZpZWxkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXQtdGltZXBpY2tlci9zcmMvbGliL2NvbXBvbmVudHMvbmd4LW1hdC10aW1lcGlja2VyLWZpZWxkL25neC1tYXQtdGltZXBpY2tlci1maWVsZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0LXRpbWVwaWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL25neC1tYXQtdGltZXBpY2tlci1maWVsZC9uZ3gtbWF0LXRpbWVwaWNrZXItZmllbGQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBRU4saUJBQWlCLEVBQ3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZFLE9BQU8sRUFBdUIsaUJBQWlCLEVBQUUsV0FBVyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEYsT0FBTyxFQUFrQixlQUFlLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRSxPQUFPLEVBQWUsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDckUsT0FBTyxFQUFpQixrQkFBa0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ2hGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUlyRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUVsRixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUNyRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUNqRixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUMzRSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxvREFBb0QsQ0FBQztBQUM3RixPQUFPLEVBQUMsbUNBQW1DLEVBQUMsTUFBTSwyREFBMkQsQ0FBQztBQUM5RyxPQUFPLEVBQUMsK0JBQStCLEVBQUMsTUFBTSxrRUFBa0UsQ0FBQztBQUNqSCxPQUFPLEVBQUMsZ0NBQWdDLEVBQUMsTUFBTSxvRUFBb0UsQ0FBQztBQUdwSCxPQUFPLEVBQUMsZUFBZSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7O0FBaUN6RSxNQUFNLE9BQU8sOEJBQThCO0lBRXZDLElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFDSSxLQUFLLENBQUMsUUFBc0I7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFDSSxXQUFXLENBQUMsR0FBVztRQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztRQUN4QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFDSSxVQUFVLENBQUMsUUFBd0I7UUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFDSSxNQUFNLENBQUMsS0FBaUM7UUFDeEMsSUFBSSx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FDckI7YUFDSTtZQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlELE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RyxJQUFJLG9CQUFvQixFQUFFO1lBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQ0ksR0FBRyxDQUFDLEtBQXdCO1FBQzVCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztZQUVsRyxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUNJLEdBQUcsQ0FBQyxLQUF3QjtRQUM1QixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7WUFFbEcsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVksT0FBTztRQUNmLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztJQUM1QyxDQUFDO0lBMkNELFlBQW9CLGtCQUEyQyxFQUMzQyxvQkFBbUQ7UUFEbkQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUF5QjtRQUMzQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStCO1FBbEN2RSxVQUFLLEdBQStDLElBQUksZUFBZSxDQUE0QixLQUFLLENBQUMsQ0FBQyxDQUFDO1FBSzNHLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osWUFBTyxHQUErQyxJQUFJLGVBQWUsQ0FBNEIsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUU3RyxXQUFNLEdBQTRCLHVCQUF1QixDQUFDLEVBQUUsQ0FBQztRQUM3RCxZQUFPLEdBQThCO1lBQ2pDLHVCQUF1QixDQUFDLEVBQUU7WUFDMUIsdUJBQXVCLENBQUMsRUFBRTtTQUM3QixDQUFDO1FBRVEsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBR25ELGFBQVEsR0FBRyxxQkFBcUIsQ0FBQztRQUd6QixXQUFNLEdBQWlCLFNBQVMsQ0FBQztRQUVqQyxnQkFBVyxHQUFtQixNQUFNLENBQUM7UUFDckMsWUFBTyxHQUErQixFQUFFLENBQUM7UUFFekMsdUJBQWtCLEdBQVksSUFBSSxDQUFDO1FBS25DLGVBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQThJaEQsY0FBUyxHQUE0QixHQUFHLEVBQUU7UUFDbEQsQ0FBQyxDQUFDO1FBRU0sZUFBVSxHQUE0QixHQUFHLEVBQUU7UUFDbkQsQ0FBQyxDQUFDO0lBOUlGLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNuQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELFlBQVksQ0FBQyxNQUFjO1FBQ3ZCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQXNCO1FBQy9CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQWdDLENBQUM7UUFDeEUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxXQUFXLEdBQUcscUJBQXFCLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDakMsR0FBRyxDQUFDLENBQUMsU0FBb0MsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQ25GLEdBQUcsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQzVDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQ25FO2FBQ0EsU0FBUyxDQUFDO1lBQ1AsSUFBSSxFQUFFLENBQUMsQ0FBNEIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzdELENBQUMsQ0FBQztRQUNQLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUM1QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxDQUM3QzthQUNBLFNBQVMsQ0FBQztZQUNQLElBQUksRUFBRSxDQUFDLENBQTRCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUMvRCxDQUFDLENBQUM7UUFFUCxvREFBb0Q7UUFDcEQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtZQUNwQixJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDdkMsb0JBQW9CLEVBQTJCLEVBQy9DLEdBQUcsQ0FBQyxDQUFDLE1BQStCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEVBQzlELEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDM0UsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FDN0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO2FBQ0k7WUFDRCxpREFBaUQ7WUFDakQsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztTQUN0RDtJQUVMLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBWTtRQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsVUFBbUI7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFXO1FBQ2xCLElBQUksR0FBRyxFQUFFO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN2QjthQUNJO1lBQ0QsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCO0lBQ0wsQ0FBQztJQUVPLHVCQUF1QixDQUFDLGFBQXdDO1FBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUNqRCxPQUFPLEVBQUMsR0FBRyxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDO1NBQ3pDO1FBRUQsT0FBTyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVPLFdBQVc7UUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUM5RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztZQUMzQixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkM7SUFDTCxDQUFDO0lBRU8sb0JBQW9CLENBQUMsSUFBWTtRQUNyQyxNQUFNLFNBQVMsR0FBRyx1QkFBdUIsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFFaEgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTyxTQUFTLENBQUMsSUFBWTtRQUMxQixNQUFNLHNCQUFzQixHQUFHLHVCQUF1QjthQUNqRCxlQUFlLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFlLEVBQUUsSUFBSSxDQUFDLEdBQWUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDekIsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNWLElBQUksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQWUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFFbEcsT0FBTzthQUNWO1lBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNWLElBQUksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQWUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFFbEcsT0FBTzthQUNWO1NBQ0o7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxNQUErQjtRQUNyRCxPQUFPLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDMUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFlO1lBQ3pCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBZTtZQUN6QixNQUFNLEVBQUUsRUFBRTtZQUNWLE1BQU0sRUFBRSxNQUFNLEtBQUssdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLEVBQUU7U0FDMUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBUU8sVUFBVTtRQUNkLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEdBQUcsRUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVPLHFCQUFxQjtRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBZTtZQUN6QixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQWU7WUFDekIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUN0QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sdUJBQXVCO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcscUJBQXFCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUMxRixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQWU7WUFDekIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFlO1lBQ3pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDdEIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLG9CQUFvQjtRQUN4QixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7U0FDbEM7SUFDTCxDQUFDO0lBRU8sV0FBVyxDQUFDLElBQVk7UUFDNUIsSUFBSSxJQUFJLEVBQUU7WUFDTixNQUFNLGFBQWEsR0FBRyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1lBQzVHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx5QkFBeUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEdBQWUsRUFBRSxJQUFJLENBQUMsR0FBZSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxSCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztTQUN2QztJQUNMLENBQUM7OEdBdFRRLDhCQUE4QjtrR0FBOUIsOEJBQThCLDBYQTNCNUI7WUFDUCx1QkFBdUI7WUFDdkI7Z0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLDhCQUE4QjtnQkFDM0MsS0FBSyxFQUFFLElBQUk7YUFDZDtTQUNKLDBCQzlDTCwrckZBK0RBLG9xQkRaUSxPQUFPLG9GQUNQLGdDQUFnQyxpT0FDaEMsSUFBSSw0RkFDSixrQkFBa0IseU9BQ2xCLGVBQWUsbXJCQUNmLFdBQVcsK1ZBQ1gsS0FBSyxrSEFDTCxlQUFlLCtCQUNmLCtCQUErQixtR0FDL0IsbUNBQW1DLHlFQUNuQyxnQkFBZ0Isb0pBQ2hCLHlCQUF5Qix3WkFDekIsYUFBYTs7MkZBR1IsOEJBQThCO2tCQS9CMUMsU0FBUzsrQkFDSSwwQkFBMEIsYUFHekI7d0JBQ1AsdUJBQXVCO3dCQUN2Qjs0QkFDSSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLGdDQUFnQzs0QkFDM0MsS0FBSyxFQUFFLElBQUk7eUJBQ2Q7cUJBQ0osbUJBQ2dCLHVCQUF1QixDQUFDLE1BQU0saUJBQ2hDLGlCQUFpQixDQUFDLElBQUksY0FDekIsSUFBSSxXQUNQO3dCQUNMLE9BQU87d0JBQ1AsZ0NBQWdDO3dCQUNoQyxJQUFJO3dCQUNKLGtCQUFrQjt3QkFDbEIsZUFBZTt3QkFDZixXQUFXO3dCQUNYLEtBQUs7d0JBQ0wsZUFBZTt3QkFDZiwrQkFBK0I7d0JBQy9CLG1DQUFtQzt3QkFDbkMsZ0JBQWdCO3dCQUNoQix5QkFBeUI7d0JBQ3pCLGFBQWE7cUJBQ2hCO3dJQVNHLEtBQUs7c0JBRFIsS0FBSztnQkFVRixXQUFXO3NCQURkLEtBQUs7Z0JBV0YsVUFBVTtzQkFEYixLQUFLO2dCQVVGLE1BQU07c0JBRFQsS0FBSztnQkEwQkYsR0FBRztzQkFETixLQUFLO2dCQWVGLEdBQUc7c0JBRE4sS0FBSztnQkFjRyxhQUFhO3NCQUFyQixLQUFLO2dCQUVHLGNBQWM7c0JBQXRCLEtBQUs7Z0JBRUcsV0FBVztzQkFBbkIsS0FBSztnQkFFRyxRQUFRO3NCQUFoQixLQUFLO2dCQWlCSSxXQUFXO3NCQUFwQixNQUFNO2dCQUlFLFVBQVU7c0JBQWxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBFdmVudEVtaXR0ZXIsXHJcbiAgICBJbnB1dCxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIE9uSW5pdCxcclxuICAgIE91dHB1dCxcclxuICAgIFRlbXBsYXRlUmVmLFxyXG4gICAgVmlld0VuY2Fwc3VsYXRpb25cclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge05nQ2xhc3MsIE5nSWYsIE5nRm9yLCBOZ1RlbXBsYXRlT3V0bGV0fSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XHJcbmltcG9ydCB7Q29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SLCBGb3Jtc01vZHVsZX0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7TWF0U2VsZWN0Q2hhbmdlLCBNYXRTZWxlY3RNb2R1bGV9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3RcIjtcclxuaW1wb3J0IHtUaGVtZVBhbGV0dGUsIE1hdE9wdGlvbk1vZHVsZX0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2NvcmVcIjtcclxuaW1wb3J0IHtGbG9hdExhYmVsVHlwZSwgTWF0Rm9ybUZpZWxkTW9kdWxlfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZFwiO1xyXG5pbXBvcnQge01hdEljb25Nb2R1bGV9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9pY29uXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckxvY2FsZVNlcnZpY2V9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9uZ3gtbWF0LXRpbWVwaWNrZXItbG9jYWxlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZX0gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItZm9ybWF0LnR5cGVcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyU2VydmljZX0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZX0gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItY2xvY2stZmFjZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyUGVyaW9kc30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItcGVyaW9kcy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclVuaXRzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci11bml0cy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckFkYXB0ZXJ9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9uZ3gtbWF0LXRpbWVwaWNrZXItYWRhcHRlclwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVdGlsc30gZnJvbSBcIi4uLy4uL3V0aWxzL25neC1tYXQtdGltZXBpY2tlci51dGlsc1wiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJDb21wb25lbnR9IGZyb20gXCIuLi9uZ3gtbWF0LXRpbWVwaWNrZXIvbmd4LW1hdC10aW1lcGlja2VyLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJUb2dnbGVJY29uRGlyZWN0aXZlfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9uZ3gtbWF0LXRpbWVwaWNrZXItdG9nZ2xlLWljb24uZGlyZWN0aXZlXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclRvZ2dsZUNvbXBvbmVudH0gZnJvbSBcIi4uL25neC1tYXQtdGltZXBpY2tlci10b2dnbGUvbmd4LW1hdC10aW1lcGlja2VyLXRvZ2dsZS5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQ29udHJvbENvbXBvbmVudH0gZnJvbSBcIi4uL25neC1tYXQtdGltZXBpY2tlci1jb250cm9sL25neC1tYXQtdGltZXBpY2tlci1jb250cm9sLmNvbXBvbmVudFwiO1xyXG4vL1xyXG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tIFwidHMtbHV4b25cIjtcclxuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIFN1YmplY3R9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgdGFrZVVudGlsLCB0YXB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJuZ3gtbWF0LXRpbWVwaWNrZXItZmllbGRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vbmd4LW1hdC10aW1lcGlja2VyLWZpZWxkLmNvbXBvbmVudC5odG1sXCIsXHJcbiAgICBzdHlsZVVybHM6IFtcIi4vbmd4LW1hdC10aW1lcGlja2VyLWZpZWxkLmNvbXBvbmVudC5zY3NzXCJdLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgTmd4TWF0VGltZXBpY2tlclNlcnZpY2UsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IE5neE1hdFRpbWVwaWNrZXJGaWVsZENvbXBvbmVudCxcclxuICAgICAgICAgICAgbXVsdGk6IHRydWVcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBOZ0NsYXNzLFxyXG4gICAgICAgIE5neE1hdFRpbWVwaWNrZXJDb250cm9sQ29tcG9uZW50LFxyXG4gICAgICAgIE5nSWYsXHJcbiAgICAgICAgTWF0Rm9ybUZpZWxkTW9kdWxlLFxyXG4gICAgICAgIE1hdFNlbGVjdE1vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZSxcclxuICAgICAgICBOZ0ZvcixcclxuICAgICAgICBNYXRPcHRpb25Nb2R1bGUsXHJcbiAgICAgICAgTmd4TWF0VGltZXBpY2tlclRvZ2dsZUNvbXBvbmVudCxcclxuICAgICAgICBOZ3hNYXRUaW1lcGlja2VyVG9nZ2xlSWNvbkRpcmVjdGl2ZSxcclxuICAgICAgICBOZ1RlbXBsYXRlT3V0bGV0LFxyXG4gICAgICAgIE5neE1hdFRpbWVwaWNrZXJDb21wb25lbnQsXHJcbiAgICAgICAgTWF0SWNvbk1vZHVsZVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlckZpZWxkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgICBnZXQgY29sb3IoKTogVGhlbWVQYWxldHRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBjb2xvcihuZXdWYWx1ZTogVGhlbWVQYWxldHRlKSB7XHJcbiAgICAgICAgdGhpcy5fY29sb3IgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVmYXVsdFRpbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBkZWZhdWx0VGltZSh2YWw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2RlZmF1bHRUaW1lID0gdmFsO1xyXG4gICAgICAgIHRoaXMuX2lzRGVmYXVsdFRpbWUgPSAhIXZhbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZmxvYXRMYWJlbCgpOiBGbG9hdExhYmVsVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zsb2F0TGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBmbG9hdExhYmVsKG5ld1ZhbHVlOiBGbG9hdExhYmVsVHlwZSkge1xyXG4gICAgICAgIHRoaXMuX2Zsb2F0TGFiZWwgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZm9ybWF0KCk6IE5neE1hdFRpbWVwaWNrZXJGb3JtYXRUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgZm9ybWF0KHZhbHVlOiBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSkge1xyXG4gICAgICAgIGlmIChOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5pc1R3ZW50eUZvdXIodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zvcm1hdCA9IDI0O1xyXG4gICAgICAgICAgICB0aGlzLm1pbkhvdXIgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLm1heEhvdXIgPSAyMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zvcm1hdCA9IDEyO1xyXG4gICAgICAgICAgICB0aGlzLm1pbkhvdXIgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLm1heEhvdXIgPSAxMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0SG91cnModGhpcy5fZm9ybWF0KTtcclxuICAgICAgICBjb25zdCBpc0R5bmFtaWNhbGx5Q2hhbmdlZCA9IHZhbHVlICYmICh0aGlzLl9wcmV2aW91c0Zvcm1hdCAmJiB0aGlzLl9wcmV2aW91c0Zvcm1hdCAhPT0gdGhpcy5fZm9ybWF0KTtcclxuXHJcbiAgICAgICAgaWYgKGlzRHluYW1pY2FsbHlDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRpbWUodGhpcy50aW1lcGlja2VyVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3ByZXZpb3VzRm9ybWF0ID0gdGhpcy5fZm9ybWF0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtYXgoKTogRGF0ZVRpbWUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXg7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBtYXgodmFsdWU6IHN0cmluZyB8IERhdGVUaW1lKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXggPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5wYXJzZVRpbWUodmFsdWUsIHtsb2NhbGU6IHRoaXMuX2xvY2FsZSwgZm9ybWF0OiB0aGlzLmZvcm1hdH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9tYXggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWluKCk6IERhdGVUaW1lIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWluO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgbWluKHZhbHVlOiBzdHJpbmcgfCBEYXRlVGltZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWluID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIucGFyc2VUaW1lKHZhbHVlLCB7bG9jYWxlOiB0aGlzLl9sb2NhbGUsIGZvcm1hdDogdGhpcy5mb3JtYXR9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbWluID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgX2xvY2FsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lcGlja2VyTG9jYWxlU3J2LmxvY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBjYW5jZWxCdG5UbXBsOiBUZW1wbGF0ZVJlZjxOb2RlPjtcclxuXHJcbiAgICBASW5wdXQoKSBjb25maXJtQnRuVG1wbDogVGVtcGxhdGVSZWY8Tm9kZT47XHJcblxyXG4gICAgQElucHV0KCkgY29udHJvbE9ubHk6IGJvb2xlYW47XHJcblxyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgaG91ciQ6IEJlaGF2aW9yU3ViamVjdDxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZT4odm9pZCAwKTtcclxuXHJcbiAgICBob3Vyc0xpc3Q6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2VbXTtcclxuICAgIGlzQ2hhbmdlUGVyaW9kRGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBpc1RpbWVSYW5nZVNldDogYm9vbGVhbjtcclxuICAgIG1heEhvdXIgPSAxMjtcclxuICAgIG1pbkhvdXIgPSAxO1xyXG4gICAgbWludXRlJDogQmVoYXZpb3JTdWJqZWN0PE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2U+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPih2b2lkIDApO1xyXG4gICAgbWludXRlc0xpc3Q6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2VbXTtcclxuICAgIHBlcmlvZDogTmd4TWF0VGltZXBpY2tlclBlcmlvZHMgPSBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcy5BTTtcclxuICAgIHBlcmlvZHM6IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzW10gPSBbXHJcbiAgICAgICAgTmd4TWF0VGltZXBpY2tlclBlcmlvZHMuQU0sXHJcbiAgICAgICAgTmd4TWF0VGltZXBpY2tlclBlcmlvZHMuUE1cclxuICAgIF07XHJcblxyXG4gICAgQE91dHB1dCgpIHRpbWVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcbiAgICB0aW1lcGlja2VyVGltZTogc3RyaW5nO1xyXG5cclxuICAgIHRpbWVVbml0ID0gTmd4TWF0VGltZXBpY2tlclVuaXRzO1xyXG4gICAgQElucHV0KCkgdG9nZ2xlSWNvbjogVGVtcGxhdGVSZWY8SFRNTE9iamVjdEVsZW1lbnQ+O1xyXG5cclxuICAgIHByaXZhdGUgX2NvbG9yOiBUaGVtZVBhbGV0dGUgPSBcInByaW1hcnlcIjtcclxuICAgIHByaXZhdGUgX2RlZmF1bHRUaW1lOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9mbG9hdExhYmVsOiBGbG9hdExhYmVsVHlwZSA9IFwiYXV0b1wiO1xyXG4gICAgcHJpdmF0ZSBfZm9ybWF0OiBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSA9IDEyO1xyXG4gICAgcHJpdmF0ZSBfaXNEZWZhdWx0VGltZTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX2lzRmlyc3RUaW1lQ2hhbmdlOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX21heDogRGF0ZVRpbWU7XHJcbiAgICBwcml2YXRlIF9taW46IERhdGVUaW1lO1xyXG4gICAgcHJpdmF0ZSBfcHJldmlvdXNGb3JtYXQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3NlbGVjdGVkSG91cjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfc3Vic0N0cmwkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90aW1lcGlja2VyU2VydmljZTogTmd4TWF0VGltZXBpY2tlclNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBwcml2YXRlIF90aW1lcGlja2VyTG9jYWxlU3J2OiBOZ3hNYXRUaW1lcGlja2VyTG9jYWxlU2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZUhvdXIoaG91cjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGltZXBpY2tlclNlcnZpY2UuaG91ciA9IHRoaXMuaG91cnNMaXN0LmZpbmQoaCA9PiBoLnRpbWUgPT09IGhvdXIpO1xyXG4gICAgICAgIHRoaXMuX2NoYW5nZVRpbWUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VNaW51dGUobWludXRlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl90aW1lcGlja2VyU2VydmljZS5taW51dGUgPSB0aGlzLm1pbnV0ZXNMaXN0LmZpbmQobSA9PiBtLnRpbWUgPT09IG1pbnV0ZSk7XHJcbiAgICAgICAgdGhpcy5fY2hhbmdlVGltZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZVBlcmlvZChldmVudDogTWF0U2VsZWN0Q2hhbmdlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGltZXBpY2tlclNlcnZpY2UucGVyaW9kID0gZXZlbnQudmFsdWUgYXMgTmd4TWF0VGltZXBpY2tlclBlcmlvZHM7XHJcbiAgICAgICAgdGhpcy5fY2hhbmdlVGltZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3N1YnNDdHJsJC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5fc3Vic0N0cmwkLmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5faW5pdFRpbWUodGhpcy5kZWZhdWx0VGltZSk7XHJcblxyXG4gICAgICAgIHRoaXMuaG91cnNMaXN0ID0gTmd4TWF0VGltZXBpY2tlclV0aWxzLmdldEhvdXJzKHRoaXMuX2Zvcm1hdCk7XHJcbiAgICAgICAgdGhpcy5taW51dGVzTGlzdCA9IE5neE1hdFRpbWVwaWNrZXJVdGlscy5nZXRNaW51dGVzKCk7XHJcbiAgICAgICAgdGhpcy5pc1RpbWVSYW5nZVNldCA9ICEhKHRoaXMubWluIHx8IHRoaXMubWF4KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGltZXBpY2tlclNlcnZpY2Uuc2VsZWN0ZWRIb3VyLnBpcGUoXHJcbiAgICAgICAgICAgICAgICB0YXAoKGNsb2NrVGltZTogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZSkgPT4gdGhpcy5fc2VsZWN0ZWRIb3VyID0gY2xvY2tUaW1lPy50aW1lKSxcclxuICAgICAgICAgICAgICAgIG1hcCh0aGlzLl9jaGFuZ2VEZWZhdWx0VGltZVZhbHVlLmJpbmQodGhpcykpLFxyXG4gICAgICAgICAgICAgICAgdGFwKCgpID0+IHRoaXMuaXNUaW1lUmFuZ2VTZXQgJiYgdGhpcy5fdXBkYXRlQXZhaWxhYmxlTWludXRlcygpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICAgICAgbmV4dDogKHY6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2UpID0+IHRoaXMuaG91ciQubmV4dCh2KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl90aW1lcGlja2VyU2VydmljZS5zZWxlY3RlZE1pbnV0ZS5waXBlKFxyXG4gICAgICAgICAgICAgICAgbWFwKHRoaXMuX2NoYW5nZURlZmF1bHRUaW1lVmFsdWUuYmluZCh0aGlzKSksXHJcbiAgICAgICAgICAgICAgICB0YXAoKCkgPT4gdGhpcy5faXNGaXJzdFRpbWVDaGFuZ2UgPSBmYWxzZSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHtcclxuICAgICAgICAgICAgICAgIG5leHQ6ICh2OiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlKSA9PiB0aGlzLm1pbnV0ZSQubmV4dCh2KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU2VsZWN0ZWQgcGVyaW9kIGNhbiBvbmx5IGNoYW5nZSB3aGVuIGZvcm1hdCBpcyAxMlxyXG4gICAgICAgIGlmICh0aGlzLmZvcm1hdCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlclNlcnZpY2Uuc2VsZWN0ZWRQZXJpb2QucGlwZShcclxuICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkPE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzPigpLFxyXG4gICAgICAgICAgICAgICAgdGFwKChwZXJpb2Q6IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzKSA9PiB0aGlzLnBlcmlvZCA9IHBlcmlvZCksXHJcbiAgICAgICAgICAgICAgICB0YXAocGVyaW9kID0+IHRoaXMuaXNDaGFuZ2VQZXJpb2REaXNhYmxlZCA9IHRoaXMuX2lzUGVyaW9kRGlzYWJsZWQocGVyaW9kKSksXHJcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5fc3Vic0N0cmwkKVxyXG4gICAgICAgICAgICApLnN1YnNjcmliZSgoKSA9PiB0aGlzLmlzVGltZVJhbmdlU2V0ICYmIHRoaXMuX3VwZGF0ZUF2YWlsYWJsZVRpbWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBCdXQgd2Ugc3RpbGwgbmVlZCB0byBydW4gdGhpcyBvbmNlIDopIHNlZSAjMTA4XHJcbiAgICAgICAgICAgIHRoaXMuaXNUaW1lUmFuZ2VTZXQgJiYgdGhpcy5fdXBkYXRlQXZhaWxhYmxlVGltZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgb25UaW1lU2V0KHRpbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVRpbWUodGltZSk7XHJcbiAgICAgICAgdGhpcy5fZW1pdExvY2FsVGltZUNoYW5nZSh0aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9vblRvdWNoZWQgPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKHZhbDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbml0VGltZSh2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzZXRUaW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NoYW5nZURlZmF1bHRUaW1lVmFsdWUoY2xvY2tGYWNlVGltZTogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZSk6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2Uge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNEZWZhdWx0VGltZSAmJiB0aGlzLl9pc0ZpcnN0VGltZUNoYW5nZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gey4uLmNsb2NrRmFjZVRpbWUsIHRpbWU6IG51bGx9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNsb2NrRmFjZVRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2hhbmdlVGltZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWlzTmFOKHRoaXMuaG91ciQuZ2V0VmFsdWUoKT8udGltZSkgJiYgIWlzTmFOKHRoaXMubWludXRlJC5nZXRWYWx1ZSgpPy50aW1lKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lID0gdGhpcy5fdGltZXBpY2tlclNlcnZpY2UuZ2V0RnVsbFRpbWUodGhpcy5mb3JtYXQpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXJUaW1lID0gdGltZTtcclxuICAgICAgICAgICAgdGhpcy5fZW1pdExvY2FsVGltZUNoYW5nZSh0aW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZW1pdExvY2FsVGltZUNoYW5nZSh0aW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBsb2NhbFRpbWUgPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci50b0xvY2FsZVRpbWVTdHJpbmcodGltZSwge2Zvcm1hdDogdGhpcy5mb3JtYXQsIGxvY2FsZTogdGhpcy5fbG9jYWxlfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX29uQ2hhbmdlKGxvY2FsVGltZSk7XHJcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkKGxvY2FsVGltZSk7XHJcbiAgICAgICAgdGhpcy50aW1lQ2hhbmdlZC5lbWl0KGxvY2FsVGltZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaW5pdFRpbWUodGltZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaXNEZWZhdWx0VGltZUF2YWlsYWJsZSA9IE5neE1hdFRpbWVwaWNrZXJBZGFwdGVyXHJcbiAgICAgICAgICAgIC5pc1RpbWVBdmFpbGFibGUodGltZSwgdGhpcy5taW4gYXMgRGF0ZVRpbWUsIHRoaXMubWF4IGFzIERhdGVUaW1lLCBcIm1pbnV0ZXNcIiwgbnVsbCwgdGhpcy5mb3JtYXQpO1xyXG4gICAgICAgIGlmICghaXNEZWZhdWx0VGltZUF2YWlsYWJsZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5taW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRpbWUoTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIuZnJvbURhdGVUaW1lVG9TdHJpbmcodGhpcy5taW4gYXMgRGF0ZVRpbWUsIHRoaXMuZm9ybWF0KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1heCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGltZShOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5mcm9tRGF0ZVRpbWVUb1N0cmluZyh0aGlzLm1heCBhcyBEYXRlVGltZSwgdGhpcy5mb3JtYXQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlVGltZSh0aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pc1BlcmlvZERpc2FibGVkKHBlcmlvZDogTmd4TWF0VGltZXBpY2tlclBlcmlvZHMpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gTmd4TWF0VGltZXBpY2tlclV0aWxzLmRpc2FibGVIb3VycyhOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0SG91cnMoMTIpLCB7XHJcbiAgICAgICAgICAgIG1pbjogdGhpcy5taW4gYXMgRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgIG1heDogdGhpcy5tYXggYXMgRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgIGZvcm1hdDogMTIsXHJcbiAgICAgICAgICAgIHBlcmlvZDogcGVyaW9kID09PSBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcy5BTSA/IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzLlBNIDogTmd4TWF0VGltZXBpY2tlclBlcmlvZHMuQU1cclxuICAgICAgICB9KS5ldmVyeSh0aW1lID0+IHRpbWUuZGlzYWJsZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX29uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZCA9ICgpID0+IHtcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZCA9ICgpID0+IHtcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVzZXRUaW1lKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RpbWVwaWNrZXJTZXJ2aWNlLmhvdXIgPSB7YW5nbGU6IDAsIHRpbWU6IG51bGx9O1xyXG4gICAgICAgIHRoaXMuX3RpbWVwaWNrZXJTZXJ2aWNlLm1pbnV0ZSA9IHthbmdsZTogMCwgdGltZTogbnVsbH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlQXZhaWxhYmxlSG91cnMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZUhvdXJzKHRoaXMuaG91cnNMaXN0LCB7XHJcbiAgICAgICAgICAgIG1pbjogdGhpcy5taW4gYXMgRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgIG1heDogdGhpcy5tYXggYXMgRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXHJcbiAgICAgICAgICAgIHBlcmlvZDogdGhpcy5wZXJpb2RcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVBdmFpbGFibGVNaW51dGVzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubWludXRlc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZU1pbnV0ZXModGhpcy5taW51dGVzTGlzdCwgdGhpcy5fc2VsZWN0ZWRIb3VyLCB7XHJcbiAgICAgICAgICAgIG1pbjogdGhpcy5taW4gYXMgRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgIG1heDogdGhpcy5tYXggYXMgRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXHJcbiAgICAgICAgICAgIHBlcmlvZDogdGhpcy5wZXJpb2RcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVBdmFpbGFibGVUaW1lKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUF2YWlsYWJsZUhvdXJzKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGVkSG91cikge1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVBdmFpbGFibGVNaW51dGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3VwZGF0ZVRpbWUodGltZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRpbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IE5neE1hdFRpbWVwaWNrZXJBZGFwdGVyLmZvcm1hdFRpbWUodGltZSwge2xvY2FsZTogdGhpcy5fbG9jYWxlLCBmb3JtYXQ6IHRoaXMuZm9ybWF0fSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVwaWNrZXJTZXJ2aWNlLnNldERlZmF1bHRUaW1lSWZBdmFpbGFibGUoZm9ybWF0dGVkVGltZSwgdGhpcy5taW4gYXMgRGF0ZVRpbWUsIHRoaXMubWF4IGFzIERhdGVUaW1lLCB0aGlzLmZvcm1hdCk7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXBpY2tlclRpbWUgPSBmb3JtYXR0ZWRUaW1lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cIm5neC1tYXQtdGltZXBpY2tlclwiXHJcbiAgICAgW25nQ2xhc3NdPVwieyduZ3gtbWF0LXRpbWVwaWNrZXItLWRpc2FibGVkJzogZGlzYWJsZWR9XCI+XHJcbiAgICA8bmd4LW1hdC10aW1lcGlja2VyLXRpbWUtY29udHJvbFxyXG4gICAgICAgICAgICBjbGFzcz1cIm5neC1tYXQtdGltZXBpY2tlcl9fY29udHJvbC0tZmlyc3RcIlxyXG4gICAgICAgICAgICBbY29sb3JdPVwiY29sb3JcIlxyXG4gICAgICAgICAgICBbZmxvYXRMYWJlbF09XCJmbG9hdExhYmVsXCJcclxuICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cIidISCdcIlxyXG4gICAgICAgICAgICBbdGltZV09XCJob3VyJC5nZXRWYWx1ZSgpPy50aW1lXCJcclxuICAgICAgICAgICAgW21pbl09XCJtaW5Ib3VyXCJcclxuICAgICAgICAgICAgW21heF09XCJtYXhIb3VyXCJcclxuICAgICAgICAgICAgW3RpbWVVbml0XT1cInRpbWVVbml0LkhPVVJcIlxyXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICBbdGltZUxpc3RdPVwiaG91cnNMaXN0XCJcclxuICAgICAgICAgICAgW3ByZXZlbnRUeXBpbmddPVwiaXNUaW1lUmFuZ2VTZXRcIlxyXG4gICAgICAgICAgICAodGltZUNoYW5nZWQpPVwiY2hhbmdlSG91cigkZXZlbnQpXCI+PC9uZ3gtbWF0LXRpbWVwaWNrZXItdGltZS1jb250cm9sPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJzZXBhcmF0b3ItY29sb24gbmd4LW1hdC10aW1lcGlja2VyX19jb250cm9sLS1zZWNvbmRcIj46PC9zcGFuPlxyXG4gICAgPG5neC1tYXQtdGltZXBpY2tlci10aW1lLWNvbnRyb2xcclxuICAgICAgICAgICAgY2xhc3M9XCJuZ3gtbWF0LXRpbWVwaWNrZXJfX2NvbnRyb2wtLXRoaXJkXCJcclxuICAgICAgICAgICAgW2NvbG9yXT1cImNvbG9yXCJcclxuICAgICAgICAgICAgW2Zsb2F0TGFiZWxdPVwiZmxvYXRMYWJlbFwiXHJcbiAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCInTU0nXCJcclxuICAgICAgICAgICAgW3RpbWVdPVwibWludXRlJC5nZXRWYWx1ZSgpPy50aW1lXCJcclxuICAgICAgICAgICAgW21pbl09XCIwXCJcclxuICAgICAgICAgICAgW21heF09XCI1OVwiXHJcbiAgICAgICAgICAgIFt0aW1lVW5pdF09XCJ0aW1lVW5pdC5NSU5VVEVcIlxyXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICBbdGltZUxpc3RdPVwibWludXRlc0xpc3RcIlxyXG4gICAgICAgICAgICBbcHJldmVudFR5cGluZ109XCJpc1RpbWVSYW5nZVNldFwiXHJcbiAgICAgICAgICAgICh0aW1lQ2hhbmdlZCk9XCJjaGFuZ2VNaW51dGUoJGV2ZW50KVwiPjwvbmd4LW1hdC10aW1lcGlja2VyLXRpbWUtY29udHJvbD5cclxuICAgIDxtYXQtZm9ybS1maWVsZCBjbGFzcz1cInBlcmlvZC1zZWxlY3Qgbmd4LW1hdC10aW1lcGlja2VyX19jb250cm9sLS1mb3J0aFwiXHJcbiAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJmb3JtYXQgIT09IDI0XCJcclxuICAgICAgICAgICAgICAgICAgICBbY29sb3JdPVwiY29sb3JcIj5cclxuICAgICAgICA8bWF0LXNlbGVjdCBbZGlzYWJsZWRdPVwiZGlzYWJsZWQgfHwgaXNDaGFuZ2VQZXJpb2REaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgKHNlbGVjdGlvbkNoYW5nZSk9XCJjaGFuZ2VQZXJpb2QoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgW25nTW9kZWxdPVwicGVyaW9kXCI+XHJcbiAgICAgICAgICAgIDxtYXQtb3B0aW9uICpuZ0Zvcj1cImxldCBvcHRpb24gb2YgcGVyaW9kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFt2YWx1ZV09XCJvcHRpb25cIj57e29wdGlvbn19PC9tYXQtb3B0aW9uPlxyXG4gICAgICAgIDwvbWF0LXNlbGVjdD5cclxuICAgIDwvbWF0LWZvcm0tZmllbGQ+XHJcbiAgICA8bmd4LW1hdC10aW1lcGlja2VyLXRvZ2dsZVxyXG4gICAgICAgICAgICBjbGFzcz1cIm5neC1tYXQtdGltZXBpY2tlcl9fdG9nZ2xlXCJcclxuICAgICAgICAgICAgKm5nSWY9XCIhY29udHJvbE9ubHlcIlxyXG4gICAgICAgICAgICBbZm9yXT1cInRpbWVwaWNrZXJcIlxyXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIj5cclxuICAgICAgICA8c3BhbiBuZ3hNYXRUaW1lcGlja2VyVG9nZ2xlSWNvbj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRvZ2dsZUljb24gfHwgZGVmYXVsdEljb25cIj48L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICA8L25neC1tYXQtdGltZXBpY2tlci10b2dnbGU+XHJcbjwvZGl2PlxyXG48bmd4LW1hdC10aW1lcGlja2VyXHJcbiAgICAgICAgW2NvbG9yXT1cImNvbG9yXCJcclxuICAgICAgICBbbWluXT1cIm1pblwiXHJcbiAgICAgICAgW21heF09XCJtYXhcIlxyXG4gICAgICAgIFtkZWZhdWx0VGltZV09XCJ0aW1lcGlja2VyVGltZVwiXHJcbiAgICAgICAgW2Zvcm1hdF09XCJmb3JtYXRcIlxyXG4gICAgICAgIFtjYW5jZWxCdG5UbXBsXT1cImNhbmNlbEJ0blRtcGxcIlxyXG4gICAgICAgIFtjb25maXJtQnRuVG1wbF09XCJjb25maXJtQnRuVG1wbFwiXHJcbiAgICAgICAgKHRpbWVTZXQpPVwib25UaW1lU2V0KCRldmVudClcIlxyXG4gICAgICAgICN0aW1lcGlja2VyPjwvbmd4LW1hdC10aW1lcGlja2VyPlxyXG5cclxuPG5nLXRlbXBsYXRlICNkZWZhdWx0SWNvbj5cclxuICAgIDxtYXQtaWNvbj53YXRjaF9sYXRlcjwvbWF0LWljb24+XHJcbjwvbmctdGVtcGxhdGU+XHJcbiJdfQ==