import { ChangeDetectionStrategy, Component, Input } from "@angular/core";
//
import { NgxMatTimepickerHoursFaceDirective } from "../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import { NgxMatTimepickerFaceComponent } from "../ngx-mat-timepicker-face/ngx-mat-timepicker-face.component";
import * as i0 from "@angular/core";
export class NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {
    constructor() {
        super();
        this.format = 12;
    }
    ngOnChanges(changes) {
        // tslint:disable-next-line:no-string-literal
        if (changes["period"] && changes["period"].currentValue) {
            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepicker12HoursFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: NgxMatTimepicker12HoursFaceComponent, isStandalone: true, selector: "ngx-mat-timepicker-12-hours-face", inputs: { period: "period" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [selectedTime]=\"selectedHour\"\r\n                     [faceTime]=\"hoursList\"\r\n                     (timeChange)=\"hourChange.next($event)\"\r\n                     (timeSelected)=\"onTimeSelected($event)\"></ngx-mat-timepicker-face>\r\n", dependencies: [{ kind: "component", type: NgxMatTimepickerFaceComponent, selector: "ngx-mat-timepicker-face", inputs: ["color", "dottedMinutesInGap", "faceTime", "format", "minutesGap", "selectedTime", "unit"], outputs: ["timeChange", "timeSelected"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepicker12HoursFaceComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-12-hours-face", changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgxMatTimepickerFaceComponent], template: "<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [selectedTime]=\"selectedHour\"\r\n                     [faceTime]=\"hoursList\"\r\n                     (timeChange)=\"hourChange.next($event)\"\r\n                     (timeSelected)=\"onTimeSelected($event)\"></ngx-mat-timepicker-face>\r\n" }]
        }], ctorParameters: () => [], propDecorators: { period: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLTEyLWhvdXJzLWZhY2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdC10aW1lcGlja2VyL3NyYy9saWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItMTItaG91cnMtZmFjZS9uZ3gtbWF0LXRpbWVwaWNrZXItMTItaG91cnMtZmFjZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0LXRpbWVwaWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL25neC1tYXQtdGltZXBpY2tlci0xMi1ob3Vycy1mYWNlL25neC1tYXQtdGltZXBpY2tlci0xMi1ob3Vycy1mYWNlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQUNsRyxFQUFFO0FBQ0YsT0FBTyxFQUNILGtDQUFrQyxFQUNyQyxNQUFNLDBFQUEwRSxDQUFDO0FBRWxGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQzNFLE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLDhEQUE4RCxDQUFDOztBQVMzRyxNQUFNLE9BQU8sb0NBQXFDLFNBQVEsa0NBQWtDO0lBSXhGO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLDZDQUE2QztRQUM3QyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxFQUFFO1lBQ3JELElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2hFLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPO2dCQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ25CLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTthQUN0QixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7OEdBbkJRLG9DQUFvQztrR0FBcEMsb0NBQW9DLHNLQ2hCakQsdVRBS0EsNENEU2MsNkJBQTZCOzsyRkFFOUIsb0NBQW9DO2tCQVBoRCxTQUFTOytCQUNJLGtDQUFrQyxtQkFFM0IsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLFdBQ1AsQ0FBQyw2QkFBNkIsQ0FBQzt3REFJL0IsTUFBTTtzQkFBZCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG4vL1xyXG5pbXBvcnQge1xyXG4gICAgTmd4TWF0VGltZXBpY2tlckhvdXJzRmFjZURpcmVjdGl2ZVxyXG59IGZyb20gXCIuLi9uZ3gtbWF0LXRpbWVwaWNrZXItaG91cnMtZmFjZS9uZ3gtbWF0LXRpbWVwaWNrZXItaG91cnMtZmFjZS5kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyUGVyaW9kc30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItcGVyaW9kcy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclV0aWxzfSBmcm9tIFwiLi4vLi4vdXRpbHMvbmd4LW1hdC10aW1lcGlja2VyLnV0aWxzXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckZhY2VDb21wb25lbnR9IGZyb20gXCIuLi9uZ3gtbWF0LXRpbWVwaWNrZXItZmFjZS9uZ3gtbWF0LXRpbWVwaWNrZXItZmFjZS5jb21wb25lbnRcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwibmd4LW1hdC10aW1lcGlja2VyLTEyLWhvdXJzLWZhY2VcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIm5neC1tYXQtdGltZXBpY2tlci0xMi1ob3Vycy1mYWNlLmNvbXBvbmVudC5odG1sXCIsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICAgIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgICBpbXBvcnRzOiBbTmd4TWF0VGltZXBpY2tlckZhY2VDb21wb25lbnRdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyMTJIb3Vyc0ZhY2VDb21wb25lbnQgZXh0ZW5kcyBOZ3hNYXRUaW1lcGlja2VySG91cnNGYWNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBASW5wdXQoKSBwZXJpb2Q6IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5mb3JtYXQgPSAxMjtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgaWYgKGNoYW5nZXNbXCJwZXJpb2RcIl0gJiYgY2hhbmdlc1tcInBlcmlvZFwiXS5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZUhvdXJzKHRoaXMuaG91cnNMaXN0LCB7XHJcbiAgICAgICAgICAgICAgICBtaW46IHRoaXMubWluVGltZSxcclxuICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhUaW1lLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiB0aGlzLmZvcm1hdCxcclxuICAgICAgICAgICAgICAgIHBlcmlvZDogdGhpcy5wZXJpb2RcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIjxuZ3gtbWF0LXRpbWVwaWNrZXItZmFjZSBbY29sb3JdPVwiY29sb3JcIlxyXG4gICAgICAgICAgICAgICAgICAgICBbc2VsZWN0ZWRUaW1lXT1cInNlbGVjdGVkSG91clwiXHJcbiAgICAgICAgICAgICAgICAgICAgIFtmYWNlVGltZV09XCJob3Vyc0xpc3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAodGltZUNoYW5nZSk9XCJob3VyQ2hhbmdlLm5leHQoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICh0aW1lU2VsZWN0ZWQpPVwib25UaW1lU2VsZWN0ZWQoJGV2ZW50KVwiPjwvbmd4LW1hdC10aW1lcGlja2VyLWZhY2U+XHJcbiJdfQ==