import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from "@angular/core";
import { NgIf, NgClass, NgTemplateOutlet } from "@angular/common";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import { NgxMatTimepickerPeriodComponent } from "../ngx-mat-timepicker-period/ngx-mat-timepicker-period.component";
import { NgxMatTimepickerDialControlComponent } from "../ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component";
//
import { Info } from "ts-luxon";
import * as i0 from "@angular/core";
import * as i1 from "../../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerDialComponent {
    set color(newValue) {
        this._color = newValue;
    }
    get color() {
        return this._color;
    }
    get hourString() {
        return `${this.hour}`;
    }
    get minuteString() {
        return `${this.minute}`;
    }
    get _locale() {
        return this._localeSrv.locale;
    }
    constructor(_localeSrv) {
        this._localeSrv = _localeSrv;
        this.hourChanged = new EventEmitter();
        this.meridiems = Info.meridiems({ locale: this._locale });
        this.minuteChanged = new EventEmitter();
        this.periodChanged = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
        this.timeUnitChanged = new EventEmitter();
        this._color = "primary";
    }
    changeHour(hour) {
        this.hourChanged.next(hour);
    }
    changeMinute(minute) {
        this.minuteChanged.next(minute);
    }
    changePeriod(period) {
        this.periodChanged.next(period);
    }
    changeTimeUnit(unit) {
        this.timeUnitChanged.next(unit);
    }
    hideHint() {
        this.isHintVisible = false;
    }
    ngOnChanges(changes) {
        // tslint:disable-next-line:no-string-literal
        const periodChanged = changes["period"] && changes["period"].currentValue;
        // tslint:disable-next-line:no-string-literal
        if (periodChanged || changes["format"] && changes["format"].currentValue) {
            const hours = NgxMatTimepickerUtils.getHours(this.format);
            this.hours = NgxMatTimepickerUtils.disableHours(hours, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
        // tslint:disable-next-line:no-string-literal
        if (periodChanged || changes["hour"] && changes["hour"].currentValue) {
            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);
            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
    }
    showHint() {
        this.isHintVisible = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerDialComponent, deps: [{ token: i1.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: NgxMatTimepickerDialComponent, isStandalone: true, selector: "ngx-mat-timepicker-dial", inputs: { activeTimeUnit: "activeTimeUnit", color: "color", editableHintTmpl: "editableHintTmpl", format: "format", hour: "hour", hoursOnly: "hoursOnly", isEditable: "isEditable", maxTime: "maxTime", minTime: "minTime", minute: "minute", minutesGap: "minutesGap", period: "period" }, outputs: { hourChanged: "hourChanged", minuteChanged: "minuteChanged", periodChanged: "periodChanged", timeUnitChanged: "timeUnitChanged" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"timepicker-dial\">\r\n    <div class=\"timepicker-dial__container\">\r\n        <div class=\"timepicker-dial__time\">\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"hours\"\r\n                                         [time]=\"hourString\"\r\n                                         [timeUnit]=\"timeUnit.HOUR\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeHour($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n            <span>:</span>\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"minutes\"\r\n                                         [time]=\"minuteString\"\r\n                                         [timeUnit]=\"timeUnit.MINUTE\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         [minutesGap]=\"minutesGap\"\r\n                                         [disabled]=\"hoursOnly\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeMinute($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n        </div>\r\n        <ngx-mat-timepicker-period class=\"timepicker-dial__period\"\r\n                                   *ngIf=\"format !== 24\"\r\n                                   [selectedPeriod]=\"period\"\r\n                                   [activeTimeUnit]=\"activeTimeUnit\"\r\n                                   [maxTime]=\"maxTime\"\r\n                                   [minTime]=\"minTime\"\r\n                                   [format]=\"format\"\r\n                                   [hours]=\"hours\"\r\n                                   [minutes]=\"minutes\"\r\n                                   [selectedHour]=\"hour\"\r\n                                   [meridiems]=\"meridiems\"\r\n                                   (periodChanged)=\"changePeriod($event)\"></ngx-mat-timepicker-period>\r\n    </div>\r\n    <div *ngIf=\"isEditable || editableHintTmpl\"\r\n         [ngClass]=\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\">\r\n        <ng-container *ngTemplateOutlet=\"editableHintTmpl ? editableHintTmpl : editableHintDefault\"></ng-container>\r\n        <ng-template #editableHintDefault>\r\n            <small class=\"timepicker-dial__hint\"> * use arrows (<span>&#8645;</span>) to change the time</small>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n", styles: [".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\n"], dependencies: [{ kind: "component", type: NgxMatTimepickerDialControlComponent, selector: "ngx-mat-timepicker-dial-control", inputs: ["disabled", "isActive", "isEditable", "minutesGap", "time", "timeList", "timeUnit"], outputs: ["focused", "timeChanged", "timeUnitChanged", "unfocused"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: NgxMatTimepickerPeriodComponent, selector: "ngx-mat-timepicker-period", inputs: ["activeTimeUnit", "format", "hours", "maxTime", "meridiems", "minTime", "minutes", "selectedHour", "selectedPeriod"], outputs: ["periodChanged"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: NgxMatTimepickerDialComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-dial", changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgxMatTimepickerDialControlComponent, NgIf, NgxMatTimepickerPeriodComponent, NgClass, NgTemplateOutlet], template: "<div class=\"timepicker-dial\">\r\n    <div class=\"timepicker-dial__container\">\r\n        <div class=\"timepicker-dial__time\">\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"hours\"\r\n                                         [time]=\"hourString\"\r\n                                         [timeUnit]=\"timeUnit.HOUR\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeHour($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n            <span>:</span>\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"minutes\"\r\n                                         [time]=\"minuteString\"\r\n                                         [timeUnit]=\"timeUnit.MINUTE\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         [minutesGap]=\"minutesGap\"\r\n                                         [disabled]=\"hoursOnly\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeMinute($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n        </div>\r\n        <ngx-mat-timepicker-period class=\"timepicker-dial__period\"\r\n                                   *ngIf=\"format !== 24\"\r\n                                   [selectedPeriod]=\"period\"\r\n                                   [activeTimeUnit]=\"activeTimeUnit\"\r\n                                   [maxTime]=\"maxTime\"\r\n                                   [minTime]=\"minTime\"\r\n                                   [format]=\"format\"\r\n                                   [hours]=\"hours\"\r\n                                   [minutes]=\"minutes\"\r\n                                   [selectedHour]=\"hour\"\r\n                                   [meridiems]=\"meridiems\"\r\n                                   (periodChanged)=\"changePeriod($event)\"></ngx-mat-timepicker-period>\r\n    </div>\r\n    <div *ngIf=\"isEditable || editableHintTmpl\"\r\n         [ngClass]=\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\">\r\n        <ng-container *ngTemplateOutlet=\"editableHintTmpl ? editableHintTmpl : editableHintDefault\"></ng-container>\r\n        <ng-template #editableHintDefault>\r\n            <small class=\"timepicker-dial__hint\"> * use arrows (<span>&#8645;</span>) to change the time</small>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n", styles: [".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\n"] }]
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerLocaleService }], propDecorators: { activeTimeUnit: [{
                type: Input
            }], color: [{
                type: Input
            }], editableHintTmpl: [{
                type: Input
            }], format: [{
                type: Input
            }], hour: [{
                type: Input
            }], hourChanged: [{
                type: Output
            }], hoursOnly: [{
                type: Input
            }], isEditable: [{
                type: Input
            }], maxTime: [{
                type: Input
            }], minTime: [{
                type: Input
            }], minute: [{
                type: Input
            }], minuteChanged: [{
                type: Output
            }], minutesGap: [{
                type: Input
            }], period: [{
                type: Input
            }], periodChanged: [{
                type: Output
            }], timeUnitChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,