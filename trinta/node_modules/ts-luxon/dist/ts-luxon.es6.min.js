class e extends Error{}class t extends e{constructor(e){super("Invalid DateTime: "+e.toMessage())}}class r extends e{constructor(e){super("Invalid Duration: "+e.toMessage())}}class s extends e{constructor(e){super("Invalid Interval: "+e.toMessage())}}class n extends e{constructor(e){super("Invalid unit "+e),Object.setPrototypeOf(this,n.prototype)}}class i extends e{constructor(e){super(e+" is an invalid or unknown zone specifier"),Object.setPrototypeOf(this,i.prototype)}}class a extends e{constructor(e){super(e),Object.setPrototypeOf(this,a.prototype)}}class o extends e{constructor(e){super(e),Object.setPrototypeOf(this,o.prototype)}}class u extends e{constructor(){super("Zone is an abstract class"),Object.setPrototypeOf(this,u.prototype)}}function l(...e){e.length}class c{get type(){throw new u}get ianaName(){return this.name}get name(){throw new u}get isUniversal(){throw new u}offsetName(e,t){throw l(e,t),new u}formatOffset(e,t){throw l(e,t),new u}offset(e){throw l(e),new u}equals(e){throw l(e),new u}get isValid(){throw new u}}var h=Intl;let d={};const m={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};function f(e,t){e=e.format(t).replace(/\u200E/g,"");var[,t,e,r,s,n,i,a]=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(e);return[r,t,e,s,n,i,a]}function y(e,t){var r=e.formatToParts(t),s=[];for(let e=0;e<r.length;e++){var{type:n,value:i}=r[e],a=m[n];"era"===n?s[a]=i:Pe(a)||(s[a]=parseInt(i,10))}return s}let g={};class _ extends c{static create(e){return g[e]||(g[e]=new _(e)),g[e]}static resetCache(){g={},d={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new h.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch(e){return!1}}constructor(e){super(),this._zoneName=e,this._valid=_.isValidZone(e)}get type(){return"iana"}get name(){return this._zoneName}get isUniversal(){return!1}offsetName(e,{format:t,locale:r}={}){return dt(e,t,r,this.name)}formatOffset(e,t){return gt(this.offset(e),t)}offset(e){if(e=new Date(e),isNaN(+e))return NaN;var t=function(e){if(!d[e])try{d[e]=new h.DateTimeFormat("en-US",{hour12:!1,timeZone:e,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})}catch(t){throw new i(e)}return d[e]}(this.name);let r;var[t,s,n,a,o,u,l]=(typeof t.formatToParts==typeof isNaN?y:f)(t,e),o=24===o?0:o,c=(e=+e)%1e3;return(ut({year:(r="BC"===a?1-Math.abs(+t):r)||+t,month:+s,day:+n,hour:+o,minute:+u,second:+l,millisecond:0})-(e-=0<=c?c:1e3+c))/6e4}equals(e){return"iana"===e.type&&e.name===this.name}get isValid(){return this._valid}}const v="numeric",w="short",p="long",k={year:v,month:v,day:v},O={year:v,month:w,day:v},b={year:v,month:w,day:v,weekday:w},S={year:v,month:p,day:v},T={year:v,month:p,day:v,weekday:p},N={hour:v,minute:v},D={hour:v,minute:v,second:v},M={hour:v,minute:v,second:v,timeZoneName:w},I={hour:v,minute:v,second:v,timeZoneName:p},j={hour:v,minute:v,hourCycle:"h23"},E={hour:v,minute:v,second:v,hourCycle:"h23"},x={hour:v,minute:v,second:v,hourCycle:"h23",timeZoneName:w},V={hour:v,minute:v,second:v,hourCycle:"h23",timeZoneName:p},W={year:v,month:v,day:v,hour:v,minute:v},C={year:v,month:v,day:v,hour:v,minute:v,second:v},F={year:v,month:w,day:v,hour:v,minute:v},Z={year:v,month:w,day:v,hour:v,minute:v,second:v},L={year:v,month:w,day:v,weekday:w,hour:v,minute:v},z={year:v,month:p,day:v,hour:v,minute:v,timeZoneName:w},A={year:v,month:p,day:v,hour:v,minute:v,second:v,timeZoneName:w},q={year:v,month:p,day:v,weekday:p,hour:v,minute:v,timeZoneName:p},U={year:v,month:p,day:v,weekday:p,hour:v,minute:v,second:v,timeZoneName:p},$=["January","February","March","April","May","June","July","August","September","October","November","December"],Y=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],H=["J","F","M","A","M","J","J","A","S","O","N","D"];function P(e){switch(e){case"narrow":return[...H];case"short":return[...Y];case"long":return[...$];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"]}}const R=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],J=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],G=["M","T","W","T","F","S","S"];function B(e){switch(e){case"narrow":return[...G];case"short":return[...J];case"long":return[...R];case"numeric":return["1","2","3","4","5","6","7"]}}const Q=["AM","PM"],K=["Before Christ","Anno Domini"],X=["BC","AD"],ee=["B","A"];function te(e){switch(e){case"narrow":return[...ee];case"short":return[...X];case"long":return[...K]}}let re={};let se={};function ne(e,t={}){var r=JSON.stringify([e,t]);let s=se[r];return s||(s=new h.DateTimeFormat(e,t),se[r]=s),s}let ie={};let ae,oe={};function ue(e,t,r,s){return("en"===e.listingMode()?r:s)(t)}class le{constructor(e,t,r){var{padTo:s,floor:n}=r,i=function(e,t){var r={};for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var s=0,n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(r[n[s]]=e[n[s]]);return r}(r,["padTo","floor"]);this._padTo=s||0,this._floor=n||!1,(!t||0<Object.keys(i).length)&&(n=Object.assign({useGrouping:!1},r),0<this._padTo&&(n.minimumIntegerDigits=s),this._inf=function(e,t){var r=JSON.stringify([e,t]);let s=ie[r];return s||(s=new h.NumberFormat(e,t),ie[r]=s),s}(e,n))}format(e){var t;return this._inf?(t=this._floor?Math.floor(e):e,this._inf.format(t)):et(this._floor?Math.floor(e):nt(e,3),this._padTo)}}class ce{get dtf(){return this._dtf}constructor(e,t,r){let s;this._opts=r,this._opts.timeZone?this._dt=e:"fixed"===e.zone.type?(r=0<=(r=e.offset/60*-1)?"Etc/GMT+"+r:"Etc/GMT"+r,0!==e.offset&&_.create(r).isValid?(s=r,this._dt=e):(s="UTC",this._dt=0===e.offset?e:e.setZone("UTC").plus({minutes:e.offset}),this._originalZone=e.zone)):"system"===e.zone.type?this._dt=e:"iana"===e.zone.type?(this._dt=e,s=e.zone.name):(s="UTC",this._dt=e.setZone("UTC").plus({minutes:e.offset}),this._originalZone=e.zone),r=Object.assign(Object.assign({},this._opts),{timeZone:this._opts.timeZone||s}),this._dtf=ne(t,r)}format(){return this._originalZone?this.formatToParts().map((({value:e})=>e)).join(""):this.dtf.format(this._dt.toJSDate())}formatToParts(){var e=this.dtf.formatToParts(this._dt.toJSDate());return this._originalZone?e.map((e=>{var t;return"timeZoneName"===e.type?(t=this._originalZone.offsetName(this._dt.ts,{locale:this._dt.locale,format:this._opts.timeZoneName}),Object.assign(Object.assign({},e),{value:t})):e})):e}resolvedOptions(){return this._dtf.resolvedOptions()}}class he{constructor(e,t,r){this._opts=Object.assign({style:"long"},r),!t&&Ge()&&(this._rtf=function(e,t={}){var r=JSON.stringify([e,t]);let s=oe[r];return s||(s=new h.RelativeTimeFormat(e,t),oe[r]=s),s}(e,r))}format(e,t){return this._rtf?this._rtf.format(e,t):function(e,t,r="always",s=!1){var n={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."],milliseconds:[]}[e=wr.normalizeUnit(e)],i=-1===["hours","minutes","seconds"].indexOf(e);if("auto"===r&&i){var a="days"===e;switch(t){case 1:return a?"tomorrow":"next "+n[0];case-1:return a?"yesterday":"last "+n[0];case 0:return a?"today":"this "+n[0]}}return r=Object.is(t,-0)||t<0,t=1===(i=Math.abs(t)),s=s?!t&&n[2]||n[1]:t?n[0]:e,r?i+` ${s} ago`:`in ${i} `+s}(t,e,this._opts.numeric,"long"!==this._opts.style)}formatToParts(e,t){return this._rtf?this._rtf.formatToParts(e,t):[]}}class de{get fastNumbers(){return void 0===this._fastNumbersCached&&(this._fastNumbersCached=this._supportsFastNumbers()),this._fastNumbersCached}constructor(e,t,r,s,n){var[e,i,a]=function(e){var t=e.indexOf("-x-");if(-1===(t=(e=-1!==t?e.substring(0,t):e).indexOf("-u-")))return[e];{let r,s;try{r=ne(e).resolvedOptions(),s=e}catch(n){r=ne(e=e.substring(0,t)).resolvedOptions(),s=e}var{numberingSystem:t,calendar:e}=r;return[s,t,e]}}(e);this.locale=e,this.numberingSystem=t||i,this.outputCalendar=r||a,this._intl=function(e,t,r){return(r||t)&&(e.includes("-u-")||(e+="-u"),r&&(e+="-ca-"+r),t)&&(e+="-nu-"+t),e}(this.locale,this.numberingSystem,this.outputCalendar),this._weekSettings=s,this._weekdaysCache={format:{},standalone:{}},this._monthsCache={format:{},standalone:{}},this._meridiemCache=void 0,this._eraCache={},this._specifiedLocale=n,this._fastNumbersCached=void 0}static create(e,t,r,s,n=!1){return n=(e=e||De.defaultLocale)||(n?"en-US":ae=ae||(new h.DateTimeFormat).resolvedOptions().locale),t=t||De.defaultNumberingSystem,r=r||De.defaultOutputCalendar,s=Ke(s)||De.defaultWeekSettings,new de(n,t,r,s,e)}static fromObject({locale:e,numberingSystem:t,outputCalendar:r,weekSettings:s}={}){return de.create(e,t,r,s)}static fromOpts(e){return de.create(e.locale,e.numberingSystem,e.outputCalendar,e.weekSettings,e.defaultToEN)}static resetCache(){ae=void 0,re={},se={},ie={},oe={}}clone(e){return e&&0!==Object.getOwnPropertyNames(e).length?de.create(e.locale||this._specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,Ke(e.weekSettings)||this._weekSettings,e.defaultToEN||!1):this}dtFormatter(e,t={}){return new ce(e,this._intl,t)}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}eras(e){return ue(this,e,te,(e=>{const t={era:e};return this._eraCache[e]||(this._eraCache[e]=[os.utc(-40,1,1),os.utc(2017,1,1)].map((e=>this.extract(e,t,"era")))),this._eraCache[e]}))}extract(e,t,r){if(e=this.dtFormatter(e,t).formatToParts().find((e=>e.type.toLowerCase()===r.toLowerCase())))return e.value;throw new Error("Invalid extract field "+r)}getMinDaysInFirstWeek(){return this.getWeekSettings().minimalDays}getStartOfWeek(){return this.getWeekSettings().firstDay}getWeekSettings(){return this._weekSettings||(Be()?this._getCachedWeekInfo(this.locale):Ot)}getWeekendDays(){return this.getWeekSettings().weekend}isEnglish(){return!!~["en","en-us"].indexOf(this.locale.toLowerCase())||new h.DateTimeFormat(this._intl).resolvedOptions().locale.startsWith("en-us")}listFormatter(e={}){return function(e,t={}){var r=JSON.stringify([e,t]);let s=re[r];return s||(s=new h.ListFormat(e,t),re[r]=s),s}(this._intl,e)}listingMode(){var e=this.isEnglish(),t=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e&&t?"en":"intl"}meridiems(){return ue(this,"long",(()=>Q),(()=>(void 0===this._meridiemCache&&(this._meridiemCache=[os.utc(2016,11,13,9),os.utc(2016,11,13,19)].map((e=>this.extract(e,{hour:"numeric",hourCycle:"h12"},"dayPeriod")))),this._meridiemCache)))}months(e,t=!1){return ue(this,e,P,(e=>{const r=t?{month:e,day:"numeric"}:{month:e};var s=t?"format":"standalone";return this._monthsCache[s][e]||(this._monthsCache[s][e]=function(e){var t=[];for(let s=1;s<=12;s++){var r=os.utc(2009,s,1);t.push(e(r))}return t}((e=>this.extract(e,r,"month")))),this._monthsCache[s][e]}))}numberFormatter(e={}){return new le(this._intl,this.fastNumbers,e)}redefaultToEN(e={}){return this.clone(Object.assign(Object.assign({},e),{defaultToEN:!0}))}redefaultToSystem(e={}){return this.clone(Object.assign(Object.assign({},e),{defaultToEN:!1}))}relFormatter(e={}){return new he(this._intl,this.isEnglish(),e)}weekdays(e,t=!1){return ue(this,e,B,(e=>{const r=t?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e};var s=t?"format":"standalone";return this._weekdaysCache[s][e]||(this._weekdaysCache[s][e]=function(e){var t=[];for(let s=1;s<=7;s++){var r=os.utc(2016,11,13+s);t.push(e(r))}return t}((e=>this.extract(e,r,"weekday")))),this._weekdaysCache[s][e]}))}_getCachedWeekInfo(e){let t=de._weekInfoCache[e];var r;return t||(t="getWeekInfo"in(r=new h.Locale(e))?r.getWeekInfo():r.weekInfo,de._weekInfoCache[e]=t),t}_supportsFastNumbers(){return(!this.numberingSystem||"latn"===this.numberingSystem)&&("latn"===this.numberingSystem||!this.locale||this.locale.startsWith("en")||"latn"===h.DateTimeFormat(this._intl).resolvedOptions().numberingSystem)}}de._weekInfoCache={};let me=null;class fe extends c{static get utcInstance(){return me=null===me?new fe(0):me}get isValid(){return!0}get ianaName(){return 0===this._fixed?"Etc/UTC":"Etc/GMT"+gt(-this._fixed,"narrow")}get name(){return 0===this._fixed?"UTC":"UTC"+gt(this._fixed,"narrow")}get type(){return"fixed"}get isUniversal(){return!0}constructor(e){super(),this._fixed=e}static instance(e){return 0===e?fe.utcInstance:new fe(e)}static parseSpecifier(e){return e&&(e=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i))?new fe(mt(e[1],e[2])):null}offsetName(){return this.name}formatOffset(e,t){return gt(this._fixed,t)}offset(){return this._fixed}equals(e){return"fixed"===e.type&&e._fixed===this._fixed}}class ye extends c{constructor(e){super(),this._zoneName=e,Object.setPrototypeOf(this,ye.prototype)}get type(){return"invalid"}get name(){return this._zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}let ge=null;class _e extends c{static get instance(){return ge=null===ge?new _e:ge}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:t,locale:r}){return dt(e,t,r)}formatOffset(e,t){return gt(this.offset(e),t)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return"system"===e.type}get isValid(){return!0}}const ve=(e,t)=>{var r;return Pe(e)||null===e?t:e instanceof c?e:function(e){return"string"==typeof e}(e)?"default"===(r=e.toLowerCase())?t:"local"===r||"system"===r?_e.instance:"utc"===r||"gmt"===r?fe.utcInstance:fe.parseSpecifier(r)||_.create(e):Re(e)?fe.instance(e):"object"==typeof e&&"offset"in e&&"function"==typeof e.offset?e:new ye(e)};let we,pe,ke,Oe,be=()=>Date.now(),Se="system",Te=60,Ne=!1;class De{static set defaultLocale(e){we=e}static get defaultLocale(){return we}static set defaultNumberingSystem(e){pe=e}static get defaultNumberingSystem(){return pe}static set defaultOutputCalendar(e){ke=e}static get defaultOutputCalendar(){return ke}static set defaultWeekSettings(e){Oe=Ke(e)}static get defaultWeekSettings(){return Oe}static set defaultZone(e){Se=e}static get defaultZone(){return ve(Se,_e.instance)}static set defaultZoneLike(e){Se=e}static set now(e){be=e}static get now(){return be}static set throwOnInvalid(e){Ne=e}static get throwOnInvalid(){return Ne}static set twoDigitCutoffYear(e){Te=e%100}static get twoDigitCutoffYear(){return Te}static resetCaches(){de.resetCache(),_.resetCache()}}class Me{constructor(e,t){this.reason=e,this.explanation=t,this._formattedExplanation="",t&&(this._formattedExplanation=": "+t)}toMessage(){return""+this.reason+this._formattedExplanation}}const Ie=[0,31,59,90,120,151,181,212,243,273,304,334],je=[0,31,60,91,121,152,182,213,244,274,305,335];function Ee(e,t){return new Me("unit out of range",`you specified ${t} (of type ${typeof t}) as a ${e}, which is invalid`)}function xe(e,t,r){return r+(it(e)?je:Ie)[t-1]}function Ve(e,t){var r=(e=it(e)?je:Ie).findIndex((e=>e<t));return{month:r+1,day:t-e[r]}}function We(e,t,r){return t=new Date(Date.UTC(e,t-1,r)),e<100&&0<=e&&t.setUTCFullYear(t.getUTCFullYear()-1900),0===(r=t.getUTCDay())?7:r}function Ce(e,t=Ot.minimalDays,r=Ot.firstDay){var{year:s,month:n,day:i}=e,a=xe(s,n,i),n=$e(We(s,n,i),r);let o,u=Math.floor((a-n+14-t)/7);return u<1?(o=s-1,u=ct(o,t,r)):u>ct(s,t,r)?(o=s+1,u=1):o=s,Object.assign({weekYear:o,weekNumber:u,weekday:n},_t(e))}function Fe(e,t=Ot.minimalDays,r=Ot.firstDay){var{weekYear:s,weekNumber:n,weekday:i}=e,a=(r=$e(We(s,1,t),r),at(s));let o,u=7*n+i-r-7+t;u<1?(o=s-1,u+=at(o)):u>a?(o=s+1,u-=at(s)):o=s;var{month:n,day:i}=Ve(o,u);return Object.assign({year:o,month:n,day:i},_t(e))}function Ze(e){var{year:t,month:r,day:s}=e,r=xe(t,r,s);return Object.assign({year:t,ordinal:r},_t(e))}function Le(e){var{year:t,ordinal:r}=e,{month:r,day:s}=Ve(t,r);return Object.assign({year:t,month:r,day:s},_t(e))}function ze(e,t=4,r=1){var s=Je(e.weekYear);t=Xe(e.weekNumber,1,ct(e.weekYear,t,r)),r=Xe(e.weekday,1,7);return s?t?!r&&Ee("weekday",e.weekday):Ee("week",e.weekNumber):Ee("weekYear",e.weekYear)}function Ae(e){var t=Je(e.year),r=Xe(e.ordinal,1,at(e.year));return t?!r&&Ee("ordinal",e.ordinal):Ee("year",e.year)}function qe(e){var t=Je(e.year),r=Xe(e.month,1,12),s=Xe(e.day,1,ot(e.year,e.month));return t?r?!s&&Ee("day",e.day):Ee("month",e.month):Ee("year",e.year)}function Ue(e){var{hour:e,minute:t,second:r,millisecond:s}=e,n=Xe(e,0,23)||24===e&&0===t&&0===r&&0===s,i=Xe(t,0,59),a=Xe(r,0,59),o=Xe(s,0,999);return n?i?a?!o&&Ee("millisecond",s):Ee("second",r):Ee("minute",t):Ee("hour",e)}function $e(e,t){return(e-t+7)%7+1}function Ye(e,t){if(He(e.localWeekday)||He(e.localWeekNumber)||He(e.localWeekYear)){if(He(e.weekday)||He(e.weekNumber)||He(e.weekYear))throw new a("Cannot mix locale-based week fields with ISO-based week fields");return He(e.localWeekday)&&(e.weekday=e.localWeekday),He(e.localWeekNumber)&&(e.weekNumber=e.localWeekNumber),He(e.localWeekYear)&&(e.weekYear=e.localWeekYear),delete e.localWeekday,delete e.localWeekNumber,delete e.localWeekYear,{minDaysInFirstWeek:t.getMinDaysInFirstWeek(),startOfWeek:t.getStartOfWeek()}}return{minDaysInFirstWeek:Ot.minimalDays,startOfWeek:Ot.firstDay}}function He(e){return void 0!==e}function Pe(e){return void 0===e}function Re(e){return"number"==typeof e}function Je(e){return Re(e)&&e%1==0}function Ge(){try{return void 0!==h&&!!h.RelativeTimeFormat}catch(e){return!1}}function Be(){try{return void 0!==h&&!!h.Locale&&("weekInfo"in h.Locale.prototype||"getWeekInfo"in h.Locale.prototype)}catch(e){return!1}}function Qe(e,t,r){if(0!==e.length)return e.reduce(((e,s)=>(s=[t(s),s],r(e[0],s[0])===e[0]?e:s)),[t(e[0]),e[0]])[1]}function Ke(e){if(e){if("object"!=typeof e)throw new o("Week settings must be an object");if(Xe(e.firstDay,1,7)&&Xe(e.minimalDays,1,7)&&Array.isArray(e.weekend)&&!e.weekend.some((e=>!Xe(e,1,7))))return{firstDay:e.firstDay,minimalDays:e.minimalDays,weekend:e.weekend};throw new o("Invalid week settings")}}function Xe(e,t,r){return Je(e)&&t<=e&&e<=r}function et(e,t=2){var r=+e<0?"-":"";return r+((e=r?-1*+e:e).toString().length<t?("0".repeat(t)+e).slice(-t):e.toString())}function tt(e){if(e)return parseInt(e,10)}function rt(e){if(e)return parseFloat(e)}function st(e){if(!Pe(e)&&null!==e&&""!==e)return e=1e3*parseFloat("0."+e),Math.floor(e)}function nt(e,t,r=!1){return t=Math.pow(10,t),(r?Math.trunc:Math.round)(e*t)/t}function it(e){return e%4==0&&(e%100!=0||e%400==0)}function at(e){return it(e)?366:365}function ot(e,t){var r=function(e,t){return e-t*Math.floor(e/t)}(t-1,12)+1;return[31,it(e+(t-r)/12)?29:28,31,30,31,30,31,31,30,31,30,31][r-1]}function ut(e){let t=Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond);return e.year<100&&0<=e.year&&(t=new Date(t)).setUTCFullYear(e.year,e.month-1,e.day),+t}function lt(e,t,r){return-$e(We(e,1,t),r)+t-1}function ct(e,t=4,r=1){var s=lt(e,t,r);t=lt(e+1,t,r);return(at(e)-s+t)/7}function ht(e){return 99<e?e:e>De.twoDigitCutoffYear?1900+e:2e3+e}function dt(e,t,r,s){return e=new Date(e),t=Object.assign({timeZoneName:t},{hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",timeZone:s}),s=new h.DateTimeFormat(r,t).formatToParts(e).find((e=>"timezonename"===e.type.toLowerCase())),s?s.value:null}function mt(e,t){let r=parseInt(e,10);return Number.isNaN(r)&&(r=0),e=parseInt(t,10)||0,60*r+(t=r<0||Object.is(r,-0)?-e:e)}function ft(e){var t=Number(e);if("boolean"==typeof e||""===e||Number.isNaN(t))throw new o("Invalid unit value "+e);return t}function yt(e,t){return Object.keys(e).reduce(((r,s)=>(void 0!==e[s]&&null!==e[s]&&(r[t(s)]=ft(e[s])),r)),{})}function gt(e,t){var r=Math.trunc(Math.abs(e/60)),s=Math.trunc(Math.abs(e%60)),n=0<=e?"+":"-";switch(t){case"short":return n+et(r,2)+":"+et(s,2);case"narrow":return n+r+(0<s?":"+s:"");case"techie":return n+et(r,2)+et(s,2);default:throw new RangeError(`Value format ${t} is out of range for property format`)}}function _t(e){return function(e,t){return t.reduce(((t,r)=>(t[r]=e[r],t)),{})}(e,["hour","minute","second","millisecond"])}const vt=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],wt=vt.slice(0).reverse(),pt=["years","months","days","hours","minutes","seconds","milliseconds"],kt={year:"year",years:"year",quarter:"quarter",quarters:"quarter",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",localweeknumber:"localWeekNumber",localweeknumbers:"localWeekNumber",localweekday:"localWeekday",localweekdays:"localWeekday",localweekyear:"localWeekYear",localweekyears:"localWeekYear",minute:"minute",minutes:"minute",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"},Ot={firstDay:1,minimalDays:4,weekend:[6,7]};function bt(e,t){let r="";for(const s of e)s.literal?r+=s.val:r+=t(s.val);return r}const St={D:k,DD:O,DDD:S,DDDD:T,t:N,tt:D,ttt:M,tttt:I,T:j,TT:E,TTT:x,TTTT:V,f:W,ff:F,fff:z,ffff:q,F:C,FF:Z,FFF:A,FFFF:U};class Tt{constructor(e,t){this._opts=t,this._loc=e,this._systemLoc=void 0}static create(e,t={}){return new Tt(e,t)}static macroTokenToFormatOpts(e){return St[e]}static parseFormat(e){let t=null,r="",s=!1;var n=[];for(let a=0;a<e.length;a++){var i=e.charAt(a);"'"===i?(0<r.length&&n.push({literal:s||/^\s+$/.test(r),val:r}),t=null,r="",s=!s):s||i===t?r+=i:(0<r.length&&n.push({literal:/^\s+$/.test(r),val:r}),r=i,t=i)}return 0<r.length&&n.push({literal:s||/^\s+$/.test(r),val:r}),n}dtFormatter(e,t={}){return this._loc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t))}formatDateTime(e,t){return this.dtFormatter(e,t).format()}formatDateTimeFromString(e,t){const r="en"===this._loc.listingMode(),s=this._loc.outputCalendar&&"gregory"!==this._loc.outputCalendar,n=(t,r)=>this._loc.extract(e,t,r),i=t=>e.isOffsetFixed&&0===e.offset&&t.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,t.format):"",a=()=>r?function(e){return Q[e.hour<12?0:1]}(e):n({hour:"numeric",hourCycle:"h12"},"dayPeriod"),o=(t,s)=>r?function(e,t){return P(t)[e.month-1]}(e,t):n(s?{month:t}:{month:t,day:"numeric"},"month"),u=(t,s)=>r?function(e,t){return B(t)[e.weekday-1]}(e,t):n(s?{weekday:t}:{weekday:t,month:"long",day:"numeric"},"weekday"),l=t=>{var r=Tt.macroTokenToFormatOpts(t);return r?this.formatWithSystemDefault(e,r):t},c=t=>r?function(e,t){return te(t)[e.year<0?0:1]}(e,t):n({era:t},"era");return bt(Tt.parseFormat(t),(t=>{switch(t){case"S":return this.num(e.millisecond);case"u":case"SSS":return this.num(e.millisecond,3);case"s":return this.num(e.second);case"ss":return this.num(e.second,2);case"uu":return this.num(Math.floor(e.millisecond/10),2);case"uuu":return this.num(Math.floor(e.millisecond/100));case"m":return this.num(e.minute);case"mm":return this.num(e.minute,2);case"h":return this.num(e.hour%12==0?12:e.hour%12);case"hh":return this.num(e.hour%12==0?12:e.hour%12,2);case"H":return this.num(e.hour);case"HH":return this.num(e.hour,2);case"Z":return i({format:"narrow",allowZ:this._opts.allowZ});case"ZZ":return i({format:"short",allowZ:this._opts.allowZ});case"ZZZ":return i({format:"techie",allowZ:this._opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:this._loc.locale})||"";case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:this._loc.locale})||"";case"z":return e.zoneName||"";case"a":return a();case"d":return s?n({day:"numeric"},"day"):this.num(e.day);case"dd":return s?n({day:"2-digit"},"day"):this.num(e.day,2);case"c":case"E":return this.num(e.weekday);case"ccc":return u("short",!0);case"cccc":return u("long",!0);case"ccccc":return u("narrow",!0);case"EEE":return u("short",!1);case"EEEE":return u("long",!1);case"EEEEE":return u("narrow",!1);case"L":return s?n({month:"numeric",day:"numeric"},"month"):this.num(e.month);case"LL":return s?n({month:"2-digit",day:"numeric"},"month"):this.num(e.month,2);case"LLL":return o("short",!0);case"LLLL":return o("long",!0);case"LLLLL":return o("narrow",!0);case"M":return s?n({month:"numeric"},"month"):this.num(e.month);case"MM":return s?n({month:"2-digit"},"month"):this.num(e.month,2);case"MMM":return o("short",!1);case"MMMM":return o("long",!1);case"MMMMM":return o("narrow",!1);case"y":return s?n({year:"numeric"},"year"):this.num(e.year);case"yy":return s?n({year:"2-digit"},"year"):this.num(parseInt(e.year.toString().slice(-2),10),2);case"yyyy":return s?n({year:"numeric"},"year"):this.num(e.year,4);case"yyyyyy":return s?n({year:"numeric"},"year"):this.num(e.year,6);case"G":return c("short");case"GG":return c("long");case"GGGGG":return c("narrow");case"kk":return this.num(parseInt(e.weekYear.toString().slice(-2),10),2);case"kkkk":return this.num(e.weekYear,4);case"W":return this.num(e.weekNumber);case"WW":return this.num(e.weekNumber,2);case"o":return this.num(e.ordinal);case"ooo":return this.num(e.ordinal,3);case"q":return this.num(e.quarter);case"qq":return this.num(e.quarter,2);case"X":return this.num(Math.floor(e.ts/1e3));case"x":return this.num(e.ts);default:return l(t)}}))}formatDateTimeParts(e,t){return this.dtFormatter(e,t).formatToParts()}formatDurationFromString(e,t){const r=e=>{switch(e[0]){case"S":return"milliseconds";case"s":return"seconds";case"m":return"minutes";case"h":return"hours";case"d":return"days";case"M":return"months";case"y":return"years";default:return}};var s,n=(t=Tt.parseFormat(t)).reduce(((e,{literal:t,val:r})=>t?e:e.concat(r)),[]);e=e.shiftTo(...n.map(r).filter((e=>!!e)));return bt(t,(s=e,e=>{var t=r(e);return t?this.num(s.get(t),e.length):e}))}formatInterval(e,t={}){if(e.isValid)return this.dtFormatter(e.start,t).dtf.formatRange(e.start.toJSDate(),e.end.toJSDate());throw Error("Invalid Interval provided!")}formatWithSystemDefault(e,t){return void 0===this._systemLoc&&(this._systemLoc=this._loc.redefaultToSystem()),this._systemLoc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t)).format()}num(e,t=0){var r;return this._opts.forceSimple?et(e,t):(r=Object.assign({},this._opts),0<t&&(r.padTo=t),this._loc.numberFormatter(r).format(e))}resolvedOptions(e,t={}){return this.dtFormatter(e,t).resolvedOptions()}}function Nt(...e){return e=e.reduce(((e,t)=>e+t.source),""),RegExp(`^${e}$`)}function Dt(...e){return t=>e.reduce((([e,r,s],n)=>{var[n,s,i]=n(t,s);return[Object.assign(Object.assign({},e),n),s||r,i]}),[{},null,1]).slice(0,2)}function Mt(e,...t){if(null!=e)for(var[r,s]of t)if(r=r.exec(e))return s(r);return[null,null]}function It(...e){return(t,r)=>{var s={};let n;for(n=0;n<e.length;n++)s[e[n]]=tt(t[r+n]);return[s,null,r+n]}}const jt=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/,Et=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,xt=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,Vt=RegExp(""+xt.source+`(?:${Et.source}?(?:\\[(${jt.source})\\])?)?`),Wt=RegExp(`(?:T${Vt.source})?`),Ct=It("weekYear","weekNumber","weekday"),Ft=It("year","ordinal"),Zt=RegExp(`${xt.source} ?(?:${Et.source}|(${jt.source}))?`),Lt=RegExp(`(?: ${Zt.source})?`);function zt(e,t,r){return Pe(e[t])?r:tt(e[t])}function At(e,t){return[{hour:zt(e,t,0),minute:zt(e,t+1,0),second:zt(e,t+2,0),millisecond:st(e[t+3])},null,t+4]}function qt(e,t){var r=!e[t]&&!e[t+1];e=mt(e[t+1],e[t+2]);return[{},r?null:fe.instance(e),t+3]}function Ut(e,t){return[{},e[t]?_.create(e[t]):null,t+1]}const $t=RegExp(`^T?${xt.source}$`),Yt=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function Ht(e){var[e,t,r,s,n,i,a,o,u]=e;const l=e.startsWith("-");e=!!o&&o.startsWith("-");var c=(e,t=!1)=>"number"==typeof e&&(t||e&&l)?-e:e;return[{years:c(rt(t)),months:c(rt(r)),weeks:c(rt(s)),days:c(rt(n)),hours:c(rt(i)),minutes:c(rt(a)),seconds:c(rt(o),"-0"===o),milliseconds:c(st(u),e)}]}const Pt={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Rt(e,t,r,s,n,i,a){let o;return e&&(o=3<e.length?R.indexOf(e)+1:J.indexOf(e)+1),{year:2===t.length?ht(tt(t)):tt(t),month:Y.indexOf(r)+1,day:tt(s),hour:tt(n),minute:tt(i),second:tt(a),weekday:o}}const Jt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function Gt(e){var[,e,t,r,s,n,i,a,o,u,l,c]=e;e=Rt(e,s,r,t,n,i,a);let h;return h=o?Pt[o]:u?0:mt(l,c),[e,new fe(h)]}const Bt=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,Qt=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,Kt=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function Xt(e){var[,e,t,r,s,n,i,a]=e;return[Rt(e,s,r,t,n,i,a),fe.utcInstance]}function er(e){var[,e,t,r,s,n,i,a]=e;return[Rt(e,a,t,r,s,n,i),fe.utcInstance]}const tr=Nt(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,Wt),rr=Nt(/(\d{4})-?W(\d\d)(?:-?(\d))?/,Wt),sr=Nt(/(\d{4})-?(\d{3})/,Wt),nr=Nt(Vt),ir=Dt((function(e,t){return[{year:zt(e,t,0),month:zt(e,t+1,1),day:zt(e,t+2,1)},null,t+3]}),At,qt,Ut),ar=Dt(Ct,At,qt,Ut),or=Dt(Ft,At,qt,Ut),ur=Dt(At,qt,Ut);const lr=Nt(/(\d{4})-(\d\d)-(\d\d)/,Lt),cr=Nt(Zt),hr=Dt(At,qt,Ut);const dr={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},mr=Object.assign({years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6}},dr),fr=365.2425,yr=30.436875,gr=Object.assign({years:{quarters:4,months:12,weeks:52.1775,days:fr,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:yr,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3}},dr);function _r(e,t){var r;let s=null!=(r=t.milliseconds)?r:0;for(const r of wt.slice(1))t[r]&&(s+=t[r]*e[r].milliseconds);return s}function vr(e,t){return void 0===e||0===e?void 0===t||0===t:e===t}class wr{static get _INVALID(){return"Invalid Duration"}get conversionAccuracy(){return this._conversionAccuracy}get days(){return this.isValid?this._values.days||0:NaN}get hours(){return this.isValid?this._values.hours||0:NaN}get invalidExplanation(){return this._invalid?this._invalid.explanation:null}get invalidReason(){return this._invalid?this._invalid.reason:null}get isValid(){return null===this._invalid}get locale(){return this.isValid?this._loc.locale:void 0}get matrix(){return this._matrix}get milliseconds(){return this.isValid?this._values.milliseconds||0:NaN}get minutes(){return this.isValid?this._values.minutes||0:NaN}get months(){return this.isValid?this._values.months||0:NaN}get numberingSystem(){return this.isValid?this._loc.numberingSystem:void 0}get quarters(){return this.isValid?this._values.quarters||0:NaN}get seconds(){return this.isValid?this._values.seconds||0:NaN}get weeks(){return this.isValid?this._values.weeks||0:NaN}get years(){return this.isValid?this._values.years||0:NaN}constructor(e){let t,r;t="longterm"===e.conversionAccuracy||!1?(r="longterm",gr):(r="casual",mr),e.matrix&&(t=e.matrix),this._values=e.values||{},this._loc=e.loc||de.create(),this._conversionAccuracy=r,this._invalid=e.invalid||null,this._matrix=t,this._isLuxonDuration=!0}static fromDurationLike(e){if(Re(e))return wr.fromMillis(e);if(wr.isDuration(e))return e;if("object"==typeof e)return wr.fromObject(e);throw new o(`Unknown duration argument ${e} of type `+typeof e)}static fromISO(e,t){var[r]=function(e){return Mt(e,[Yt,Ht])}(e);return r?wr.fromObject(r,t):wr.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromISOTime(e,t={}){var[r]=function(e){return Mt(e,[$t,Dt(At)])}(e);return r?wr.fromObject(r,t):wr.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromMillis(e,t={}){return wr.fromObject({milliseconds:e},t)}static fromObject(e,t={}){if(null==e||"object"!=typeof e)throw new o("Duration.fromObject: argument expected to be an object, got "+(null===e?"null":typeof e));return new wr({values:yt(e,wr.normalizeUnit),loc:de.fromObject(t),conversionAccuracy:t.conversionAccuracy,matrix:t.matrix})}static invalid(e,t){if(!e)throw new o("need to specify a reason the Duration is invalid");if(e=e instanceof Me?e:new Me(e,t),De.throwOnInvalid)throw new r(e);return new wr({invalid:e})}static isDuration(e){return!!e&&e._isLuxonDuration||!1}static normalizeUnit(e){var t={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",localWeekNumber:"localWeekNumbers",localWeekYear:"localWeekYears",localWeekday:"localWeekdays",localWeekNumbers:"localWeekNumbers",localWeekYears:"localWeekYears",localWeekdays:"localWeekdays",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e];if(t)return t;throw new n(e)}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`Duration { values: ${JSON.stringify(this._values)} }`:`Duration { Invalid, reason: ${this.invalidReason} }`}as(e){return this.shiftTo(e).get(e)}equals(e){if(!this.isValid||!e.isValid)return!1;if(!this._loc.equals(e._loc))return!1;for(const t of vt)if(!vr(this._values[t],e._values[t]))return!1;return!0}get(e){return this[wr.normalizeUnit(e)]}getMaxUnit(e=!1){e=e?pt:vt;const t=this.shiftTo(...e).toObject();return e.find((e=>0<(t[e]||0)))||wt[0]}mapUnits(e){if(!this.isValid)return this;const t={};return Object.keys(this._values).forEach((r=>{t[r]=ft(e(this._values[r],r))})),this._clone(this,{values:t},!0)}minus(e){return this.isValid?(e=wr.fromDurationLike(e),this.plus(e.negate())):this}negate(){if(!this.isValid)return this;const e={};return Object.keys(this._values).forEach((t=>{e[t]=0===this._values[t]?0:-this._values[t]})),this._clone(this,{values:e},!0)}normalize(){var e;return this.isValid?(e=this.toObject(),function(e,t){const r=_r(e,t)<0?-1:1;wt.reduce(((s,n)=>{var i,a;return Pe(t[n])?s:(s&&(a=t[s]*r,i=e[n][s],a=Math.floor(a/i),t[n]+=a*r,t[s]-=a*i*r),n)}),null),vt.reduce(((r,s)=>{var n;return Pe(t[s])?r:(r&&(n=t[r]%1,t[r]-=n,t[s]+=n*e[r][s]),s)}),null)}(this._matrix,e),this._clone(this,{values:e},!0)):this}plus(e){if(!this.isValid)return this;const t=wr.fromDurationLike(e),r={};return vt.forEach((e=>{void 0===t._values[e]&&void 0===this._values[e]||(r[e]=t.get(e)+this.get(e))})),this._clone(this,{values:r},!0)}reconfigure({locale:e,numberingSystem:t,conversionAccuracy:r,matrix:s}={}){return e=this._loc.clone({locale:e,numberingSystem:t}),this._clone(this,{loc:e,matrix:s,conversionAccuracy:r})}rescale(){var e;return this.isValid?(e=function(e={}){return Object.entries(e).reduce(((e,[t,r])=>(0!==r&&(e[t]=r),e)),{})}(this.normalize().shiftToAll().toObject()),this._clone(this,{values:e},!0)):this}set(e){return this.isValid?(e=Object.assign(Object.assign({},this._values),yt(e,wr.normalizeUnit)),this._clone(this,{values:e})):this}shiftTo(...e){if(!this.isValid||0===e.length)return this;e=e.map((e=>wr.normalizeUnit(e)));const t={},r={},s=this.toObject();let n;return vt.forEach((i=>{if(0<=e.indexOf(i)){n=i;let e=0;Object.keys(r).forEach((t=>{e+=this._matrix[t][i]*r[t],r[t]=0})),Re(s[i])&&(e+=s[i]);var a=Math.trunc(e);t[i]=a,r[i]=(1e3*e-1e3*a)/1e3}else Re(s[i])&&(r[i]=s[i])})),Object.keys(r).forEach((e=>{var s=r[e];0!==s&&(t[n]+=e===n?s:s/this._matrix[n][e])})),this._clone(this,{values:t},!0).normalize()}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}toFormat(e,t={floor:!0}){return t=Object.assign(Object.assign({},t),{floor:!1!==t.round&&!1!==t.floor}),this.isValid?Tt.create(this._loc,t).formatDurationFromString(this,e):wr._INVALID}toHuman(e={}){if(!this.isValid)return wr._INVALID;var t=this.getMaxUnit(!0),r=e.onlyHumanUnits?pt:vt;const s=this.shiftTo(...r.slice(r.indexOf(t))).toObject();return t=r.map((t=>{var r=s[t];return Pe(r)||0===r?null:this._loc.numberFormatter(Object.assign(Object.assign({style:"unit",unitDisplay:"long"},e),{unit:t.slice(0,-1)})).format(r)})).filter((e=>e)),r=Object.assign({type:"conjunction",style:e.listStyle||"narrow"},e),this._loc.listFormatter(r).format(t)}toISO(){if(!this.isValid)return null;let e="P";return 0!==this.years&&(e+=this.years+"Y"),0===this.months&&0===this.quarters||(e+=this.months+3*this.quarters+"M"),0!==this.weeks&&(e+=this.weeks+"W"),0!==this.days&&(e+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(e+="T"),0!==this.hours&&(e+=this.hours+"H"),0!==this.minutes&&(e+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(e+=nt(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===e&&(e+="T0S"),e}toISOTime(e={}){var t;return!this.isValid||(t=this.toMillis())<0||864e5<=t?null:(e=Object.assign(Object.assign({suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended"},e),{includeOffset:!1}),os.fromMillis(t,{zone:"UTC"}).toISOTime(e))}toJSON(){return this.toISO()}toMillis(){return this.isValid?_r(this.matrix,this._values):NaN}toObject(){return this.isValid?Object.assign({},this._values):{}}toString(){return this.toISO()}valueOf(){return this.toMillis()}_clone(e,t,r=!1){return r={values:r?t.values:Object.assign(Object.assign({},e._values),t.values||{}),loc:e._loc.clone(t.loc),conversionAccuracy:t.conversionAccuracy||e.conversionAccuracy,matrix:t.matrix||e.matrix},new wr(r)}}const pr="Invalid Interval";function kr(e){if(os.isDateTime(e))return e;if(e&&e.valueOf&&Re(e.valueOf()))return os.fromJSDate(e);if(e&&"object"==typeof e)return os.fromObject(e);throw new o(`Unknown datetime argument: ${e}, of type `+typeof e)}class Or{get end(){return this.isValid?this._e:null}get invalidReason(){return this._invalid?this._invalid.reason:null}get isValid(){return null===this.invalidReason}get start(){return this.isValid?this._s:null}constructor(e){this._s=e.start,this._e=e.end,this._invalid=e.invalid||null,this._isLuxonInterval=!0}static after(e,t){return t=wr.fromDurationLike(t),e=kr(e),new Or({start:e,end:e?e.plus(t):void 0})}static before(e,t){return t=wr.fromDurationLike(t),e=kr(e),new Or({start:e?e.minus(t):void 0,end:e})}static fromDateTimes(e,t){return function(e,t){return e&&e.isValid?t&&t.isValid?t<e?Or.invalid("end before start",`The end of an interval must be after its start, but you had start=${e.toISO()} and end=`+t.toISO()):void 0:Or.invalid("missing or invalid end"):Or.invalid("missing or invalid start")}(e=kr(e),t=kr(t))||new Or({start:e,end:t})}static fromISO(e,t={}){var[r,s]=(e||"").split("/",2);if(r&&s){let e,i,a,o;try{e=os.fromISO(r,t),i=e.isValid}catch(s){i=!1}try{a=os.fromISO(s,t),o=a.isValid}catch(s){o=!1}if(i&&o)return Or.fromDateTimes(e,a);if(i){var n=wr.fromISO(s,t);if(n.isValid)return Or.after(e,n)}else if(o&&(n=wr.fromISO(r,t)).isValid)return Or.before(a,n)}return Or.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,t){if(!e)throw new o("need to specify a reason the Interval is invalid");if(e=e instanceof Me?e:new Me(e,t),De.throwOnInvalid)throw new s(e);return new Or({invalid:e})}static isInterval(e){return!!e&&e._isLuxonInterval||!1}static merge(e){var[e,t]=e.sort(((e,t)=>e._s.valueOf()-t._s.valueOf())).reduce((([e,t],r)=>t?t.overlaps(r)||t.abutsStart(r)?[e,t.union(r)]:[e.concat([t]),r]:[e,r]),[[],null]);return t&&e.push(t),e}static xor(e){let t=null,r=0;var s=[];e=e.map((e=>[{time:e._s,type:"s"},{time:e._e,type:"e"}]));for(const n of Array.prototype.concat(...e).sort(((e,t)=>+e.time-+t.time)))r+="s"===n.type?1:-1,t=1===r?n.time:(t&&t.valueOf()!==n.time.valueOf()&&s.push(Or.fromDateTimes(t,n.time)),null);return Or.merge(s)}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`Interval { start: ${this._s.toISO()}, end: ${this._e.toISO()} }`:`Interval { Invalid, reason: ${this.invalidReason} }`}abutsEnd(e){return+e._e==+this._s}abutsStart(e){return+this._e==+e._s}contains(e){return this._s<=e&&this._e>e}count(e="milliseconds",t){if(!this.isValid)return NaN;var r=this.start.startOf(e,t);let s;return s=(s=null!=t&&t.useLocaleWeeks?this.end.reconfigure({locale:r.locale}):this.end).startOf(e,t),Math.floor(s.diff(r,e).get(e))+ +(s.valueOf()!==this.end.valueOf())}difference(...e){return Or.xor([this].concat(e)).map((e=>this.intersection(e))).filter((e=>e&&!e.isEmpty()))}divideEqually(e){return this.isValid?this.splitBy({milliseconds:this.length()/e}).slice(0,e):[]}engulfs(e){return!!this.isValid&&this._s<=e._s&&this._e>=e._e}equals(e){return!(!this.isValid||!e.isValid)&&this._s.equals(e._s)&&this._e.equals(e._e)}hasSame(e){return!!this.isValid&&(this.isEmpty()||this._e.minus(1).hasSame(this._s,e))}intersection(e){var t;return this.isValid?(t=(this._s>e._s?this:e)._s,(e=(this._e<e._e?this:e)._e)<=t?null:Or.fromDateTimes(t,e)):this}isAfter(e){return!!this.isValid&&this._s>e}isBefore(e){return!!this.isValid&&this._e<=e}isEmpty(){return this._s.valueOf()===this._e.valueOf()}length(e="milliseconds"){return this.toDuration(e).get(e)}mapEndpoints(e){return Or.fromDateTimes(e(this._s),e(this._e))}overlaps(e){return this._e>e._s&&this._s<e._e}set({start:e,end:t}={}){return this.isValid?Or.fromDateTimes(e||this._s,t||this._e):this}splitAt(...e){var t=e.map(kr).filter((e=>this.contains(e))).sort(((e,t)=>e.toMillis()-t.toMillis())),r=[];let s=this._s,n=0;for(;s<this._e;){var i=+(i=t[n]||this._e)>+this._e?this._e:i;r.push(Or.fromDateTimes(s,i)),s=i,n+=1}return r}splitBy(e){var t=wr.fromDurationLike(e);if(!this.isValid||!t.isValid||0===t.as("milliseconds"))return[];let r,s=this._s,n=1;for(var i=[];s<this._e;){var a=this.start.plus(t.mapUnits((e=>e*n)));r=+a>+this._e?this._e:a,i.push(Or.fromDateTimes(s,r)),s=r,n+=1}return i}toDuration(e="milliseconds",t={}){return this.isValid?this._e.diff(this._s,e,t):wr.invalid(this._invalid.reason)}toFormat(e,{separator:t=" - "}={}){return this.isValid?""+this._s.toFormat(e)+t+this._e.toFormat(e):pr}toISO(e={}){return this.isValid?this._s.toISO(e)+"/"+this._e.toISO(e):pr}toISODate(){return this.isValid?this._s.toISODate()+"/"+this._e.toISODate():pr}toISOTime(e={}){return this.isValid?this._s.toISOTime(e)+"/"+this._e.toISOTime(e):pr}toLocaleString(e=k,t={}){return this.isValid?Tt.create(this._s.loc.clone(t),e).formatInterval(this):pr}toString(){return this.isValid?`[${this._s.toISO()} – ${this._e.toISO()})`:pr}union(e){var t;return this.isValid?(t=(this._s<e._s?this:e)._s,e=(this._e>e._e?this:e)._e,Or.fromDateTimes(t,e)):this}}class br{static eras(e="short",{locale:t}={}){return de.create(t,void 0,"gregory").eras(e)}static features(){return{relative:Ge(),localeWeek:Be()}}static getMinimumDaysInFirstWeek({locale:e,locObj:t}={}){return(t||de.create(e)).getMinDaysInFirstWeek()}static getStartOfWeek({locale:e,locObj:t}={}){return(t||de.create(e)).getStartOfWeek()}static getWeekendWeekdays({locale:e,locObj:t}={}){return(t||de.create(e)).getWeekendDays().slice()}static hasDST(e=De.defaultZone){var t=os.now().setZone(e).set({month:12});return!e.isUniversal&&t.offset!==t.set({month:6}).offset}static isValidIANAZone(e){return _.isValidZone(e)}static meridiems({locale:e}={}){return de.create(e).meridiems()}static months(e="long",{locale:t=null,locObj:r=null,numberingSystem:s=null,outputCalendar:n="gregory"}={}){return(r||de.create(t,s,n)).months(e)}static monthsFormat(e="long",{locale:t,locObj:r,numberingSystem:s,outputCalendar:n="gregory"}={}){return(r||de.create(t,s,n)).months(e,!0)}static normalizeZone(e){return ve(e,De.defaultZone)}static weekdays(e="long",{locale:t,locObj:r,numberingSystem:s}={}){return(r||de.create(t,s)).weekdays(e)}static weekdaysFormat(e="long",{locale:t,locObj:r,numberingSystem:s}={}){return(r||de.create(t,s)).weekdays(e,!0)}}function Sr(e,t){var r=e=>e.toUTC(0,{keepLocalTime:!0}).startOf("days").valueOf();t=r(t)-r(e);return Math.floor(wr.fromMillis(t).as("days"))}const Tr=(e,t,r,s)=>{let[n,i,a,o]=function(e,t,r){var s,n,i={},a=e;let o,u;for([s,n]of[["years",(e,t)=>t.year-e.year],["quarters",(e,t)=>t.quarter-e.quarter+4*(t.year-e.year)],["months",(e,t)=>t.month-e.month+12*(t.year-e.year)],["weeks",(e,t)=>((e=Sr(e,t))-e%7)/7],["days",Sr]])0<=r.indexOf(s)&&(i[o=s]=n(e,t),(u=a.plus(i))>t?(i[s]--,t<(e=a.plus(i))&&(u=e,i[s]--,e=a.plus(i))):e=u);return[e,i,u,o]}(e,t,r);return e=+t-+n,r=r.filter((e=>0<=["hours","minutes","seconds","milliseconds"].indexOf(e))),0===r.length&&(a=a<t?n.plus({[o]:1}):a)!==n&&(i[o]=(i[o]||0)+e/(+a-+n)),t=wr.fromObject(i,s),0<r.length?wr.fromMillis(e,s).shiftTo(...r).plus(t):t},Nr={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},Dr={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Mr=Nr.hanidec.replace(/[\[|\]]/g,"").split("");function Ir(e,t=""){return new RegExp(""+Nr[e.numberingSystem||"latn"]+t)}const jr="missing Intl.DateTimeFormat.formatToParts support";function Er(e,t=(e=>e)){return{regex:e,deser:([e])=>t(function(e){var t=parseInt(e,10);if(!isNaN(t))return t;let r="";for(let t=0;t<e.length;t++){var s=e.charCodeAt(t);if(-1!==e[t].search(Nr.hanidec))r+=Mr.indexOf(e[t]);else for(const e in Dr){var[n,i]=Dr[e];if(n<=s&&s<=i){r+=s-n;break}}}return parseInt(r,10)}(e))}}const xr=`[ ${String.fromCharCode(160)}]`,Vr=new RegExp(xr,"g");function Wr(e){return e.replace(/\./g,"\\.?").replace(Vr,xr)}function Cr(e){return e.replace(/\./g,"").replace(Vr," ").toLowerCase()}function Fr(e,t){return{regex:RegExp(e.map(Wr).join("|")),deser:([r])=>e.findIndex((e=>Cr(r)===Cr(e)))+t}}function Zr(e,t){return{regex:e,deser:([,e,t])=>mt(e,t),groups:t}}function Lr(e){return{regex:e,deser:([e])=>e}}function zr(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}const Ar={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayPeriod:"a",hour12:{numeric:"h","2-digit":"hh"},hour24:{numeric:"H","2-digit":"HH"},hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};let qr;function Ur(e){return!!e&&!!e.invalidReason}function $r(e,t){return Array.prototype.concat(...e.map((e=>function(e,t){return e.literal||null==(t=Pr(Tt.macroTokenToFormatOpts(e.val),t))||t.includes(void 0)?e:t}(e,t))))}function Yr(e,t,r){var s=(r=$r(Tt.parseFormat(r),e)).map((t=>function(e,t){const r=Ir(t),s=Ir(t,"{2}"),n=Ir(t,"{3}"),i=Ir(t,"{4}"),a=Ir(t,"{6}"),o=Ir(t,"{1,2}"),u=Ir(t,"{1,3}"),l=Ir(t,"{1,6}"),c=Ir(t,"{1,9}"),h=Ir(t,"{2,4}"),d=Ir(t,"{4,6}"),m=e=>({regex:RegExp(zr(e.val)),deser:([e])=>e,literal:!0});var f=(f=>{if(e.literal)return m(f);switch(f.val){case"G":return Fr(t.eras("short"),0);case"GG":return Fr(t.eras("long"),0);case"y":return Er(l);case"yy":case"kk":return Er(h,ht);case"yyyy":case"kkkk":return Er(i);case"yyyyy":return Er(d);case"yyyyyy":return Er(a);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return Er(o);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return Er(s);case"MMM":return Fr(t.months("short",!0),1);case"MMMM":return Fr(t.months("long",!0),1);case"LLL":return Fr(t.months("short",!1),1);case"LLLL":return Fr(t.months("long",!1),1);case"o":case"S":return Er(u);case"ooo":case"SSS":return Er(n);case"u":return Lr(c);case"a":return Fr(t.meridiems(),0);case"E":case"c":return Er(r);case"EEE":return Fr(t.weekdays("short",!1),1);case"EEEE":return Fr(t.weekdays("long",!1),1);case"ccc":return Fr(t.weekdays("short",!0),1);case"cccc":return Fr(t.weekdays("long",!0),1);case"Z":case"ZZ":return Zr(new RegExp(`([+-]${o.source})(?::(${s.source}))?`),2);case"ZZZ":return Zr(new RegExp(`([+-]${o.source})(${s.source})?`),2);case"z":return Lr(/[a-z_+-/]{1,256}?/i);default:return m(f)}})(e)||{invalidReason:jr};return Object.assign(Object.assign({},f),{token:e})}(t,e)));if(n=s.find(Ur))return{input:t,tokens:r,invalidReason:n.invalidReason};var n=function(e){return`^${e.map((e=>e.regex)).reduce(((e,t)=>`${e}(${t.source})`),"")}$`}(s),[s,i]=(n=RegExp(n,"i"),function(e,t,r){const s=t.exec(e),n={};if(null!==s){let e=1;r.forEach((t=>{var r=t.groups?t.groups+1:1;t.literal||(n[t.token.val[0]]=t.deser(s.slice(e,e+r))),e+=r}))}return[s,n]}(t,n,s)),[o,u,l]=i?function(e){let t,r=null;return He(e.z)&&(r=_.create(e.z)),He(e.Z)&&(r=r||new fe(+e.Z),t=+e.Z),He(e.q)&&(e.M=3*(e.q-1)+1),He(e.h)&&(+e.h<12&&1===e.a?e.h=e.h+12:12===e.h&&0===e.a&&(e.h=0)),0===e.G&&e.y&&(e.y=-e.y),He(e.u)&&(e.S=st(e.u)||0),[Object.keys(e).reduce(((t,r)=>{var s=(e=>{switch(e){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(r);return s&&(t[s]=e[r]),t}),{}),r,t]}(i):[null,null,void 0];if("a"in i&&"H"in i)throw new a("Can't include meridiem when specifying 24-hour format");return{input:t,tokens:r,regex:n,rawMatches:s,matches:i,result:o,zone:u,specificOffset:l}}function Hr(e){return e.replace(/\u202F/g," ")}function Pr(e,t){if(!e)return null;var r=(t=Tt.create(t,e).dtFormatter(function(e){return qr=void 0===qr?os.fromMillis(1555555555555,{locale:e.locale}):qr}(t))).formatToParts();const s=t.resolvedOptions();return r.map((t=>function(e,t,r){var{type:e,value:s}=e;if("literal"===e)return{literal:!(n=/^\s+$/.test(s)),val:n?" ":s};var n=t[e];let i=e,a=("hour"===e&&(i=null!=t.hour12?t.hour12?"hour12":"hour24":null!=t.hourCycle?"h11"===t.hourCycle||"h12"===t.hourCycle?"hour12":"hour24":r.hour12?"hour12":"hour24"),Ar[i]);return(a="object"==typeof a?a[n]:a)?{literal:!1,val:a}:void 0}(t,e,s)))}const Rr="Invalid DateTime",Jr=864e13;function Gr(e,t,r){var s=e-60*t*1e3,n=r.offset(s);return t===n?[s,t]:n===(r=r.offset(s-=60*(n-t)*1e3))?[s,n]:[e-60*Math.min(n,r)*1e3,Math.max(n,r)]}function Br(e,t){return{year:(t=new Date(e+=60*t*1e3)).getUTCFullYear(),month:t.getUTCMonth()+1,day:t.getUTCDate(),hour:t.getUTCHours(),minute:t.getUTCMinutes(),second:t.getUTCSeconds(),millisecond:t.getUTCMilliseconds()}}function Qr(e,t,r){return Gr(ut(e),t,r)}function Kr(e,t,r,s,n,i){var{setZone:a,zone:o}=r;return e&&0!==Object.keys(e).length||t?(t=t||o,e=os.fromObject(e||void 0,Object.assign(Object.assign({},r),{zone:t,specificOffset:i})),a?e:e.setZone(o)):os.invalid(new Me("unparsable",`the input "${n}" can't be parsed as `+s))}function Xr(e,t,r=!0){return e.isValid?Tt.create(de.create("en-US"),{allowZ:r,forceSimple:!0}).formatDateTimeFromString(e,t):null}const es={year:0,month:1,day:1,hour:0,minute:0,second:0,millisecond:0},ts={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},rs={ordinal:1,hour:0,minute:0,second:0,millisecond:0},ss=["year","month","day","hour","minute","second","millisecond"],ns=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],is=["year","ordinal","hour","minute","second","millisecond"];function as(e){var t=kt[e.toLowerCase()];if(t)return t;throw new n(e)}class os{get day(){return this.isValid?this._c.day:NaN}get daysInMonth(){return ot(this.year,this.month)}get daysInYear(){return this.isValid?at(this.year):NaN}get hour(){return this.isValid?this._c.hour:NaN}get invalidExplanation(){return this._invalid?this._invalid.explanation:void 0}get invalidReason(){return this._invalid?this._invalid.reason:void 0}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}get isInLeapYear(){return it(this.year)}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isValid(){return null===this._invalid}get isWeekend(){return this.isValid&&this.loc.getWeekendDays().includes(this.weekday)}get loc(){return this.isValid?this._loc.clone():void 0}get localWeekNumber(){return this.isValid?this._possiblyCachedLocalWeekData(this).weekNumber:NaN}get localWeekYear(){return this.isValid?this._possiblyCachedLocalWeekData(this).weekYear:NaN}get localWeekday(){return this.isValid?this._possiblyCachedLocalWeekData(this).weekday:NaN}get locale(){return this.isValid?this._loc.locale:void 0}get millisecond(){return this.isValid?this._c.millisecond:NaN}get minute(){return this.isValid?this._c.minute:NaN}get month(){return this.isValid?this._c.month:NaN}get monthLong(){return this.isValid?br.months("long",{locObj:this._loc})[this.month-1]:null}get monthShort(){return this.isValid?br.months("short",{locObj:this._loc})[this.month-1]:null}get numberingSystem(){return this.isValid?this._loc.numberingSystem:void 0}get offset(){return this.isValid?+this._o:NaN}get offsetNameLong(){return this.isValid?this.zone.offsetName(this._ts,{format:"long",locale:this.locale}):null}get offsetNameShort(){return this.isValid?this.zone.offsetName(this._ts,{format:"short",locale:this.locale}):null}get ordinal(){return this.isValid?Ze(this._c).ordinal:NaN}get outputCalendar(){return this.isValid?this._loc.outputCalendar:void 0}get quarter(){return this.isValid?Math.ceil(this._c.month/3):NaN}get second(){return this.isValid?this._c.second:NaN}get ts(){return this._ts}get weekNumber(){return this.isValid?this._possiblyCachedWeekData(this).weekNumber:NaN}get weekYear(){return this.isValid?this._possiblyCachedWeekData(this).weekYear:NaN}get weekday(){return this.isValid?this._possiblyCachedWeekData(this).weekday:NaN}get weekdayLong(){return this.isValid?br.weekdays("long",{locObj:this._loc})[this.weekday-1]:null}get weekdayShort(){return this.isValid?br.weekdays("short",{locObj:this._loc})[this.weekday-1]:null}get weeksInLocalWeekYear(){return this.isValid?ct(this.localWeekYear,this.loc.getMinDaysInFirstWeek(),this.loc.getStartOfWeek()):NaN}get weeksInWeekYear(){return this.isValid?ct(this.weekYear):NaN}get year(){return this.isValid?this._c.year:NaN}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}constructor(e){var t,r=e.zone||De.defaultZone;let s,n,i=e.invalid||(Number.isNaN(e.ts)?new Me("invalid timestamp"):null)||(r.isValid?null:os._unsupportedZone(r));this._ts=Pe(e.ts)?De.now():e.ts,i||(e.old&&e.old.ts===this._ts&&e.old.zone.equals(r)?[n,s]=[e.old.c,e.old.o]:(t=r.offset(this._ts),n=Br(this._ts,t),i=Number.isNaN(n.year)?new Me("invalid input"):null,n=i?void 0:n,s=i?void 0:t)),this._zone=r,this._loc=e.loc||de.create(),this._invalid=i,this._weekData=null,this._c=n,this._o=s,this._isLuxonDateTime=!0}static expandFormat(e,t={}){return $r(Tt.parseFormat(e),de.fromObject(t)).map((e=>e.val)).join("")}static fromFormat(e,t,r={}){if(Pe(e)||Pe(t))throw new o("fromFormat requires an input string and a format");var{locale:s,numberingSystem:n}=r,[s,n,i,a]=function(e,t,r){var{result:e,zone:t,specificOffset:r,invalidReason:s}=Yr(e,Hr(t),Hr(r));return[e,t,r,s]}(de.fromOpts({locale:s,numberingSystem:n,defaultToEN:!0}),e,t);return a?os.invalid(a):Kr(s,n||null,r,"format "+t,e,i)}static fromFormatExplain(e,t,r={}){var{locale:r,numberingSystem:s}=r;return Yr(de.fromOpts({locale:r,numberingSystem:s,defaultToEN:!0}),e,t)}static fromHTTP(e,t={}){var[r,s]=function(e){return Mt(e,[Bt,Xt],[Qt,Xt],[Kt,er])}(e);return Kr(r,s,t,"HTTP",e)}static fromISO(e,t={}){var[r,s]=function(e){return Mt(e,[tr,ir],[rr,ar],[sr,or],[nr,ur])}(e);return Kr(r,s,t,"ISO 8601",e)}static fromJSDate(e,t={}){var r;e=function(e){return"[object Date]"===Object.prototype.toString.call(e)}(e)?e.valueOf():NaN;return Number.isNaN(e)?os.invalid("invalid input"):(r=ve(t.zone,De.defaultZone)).isValid?new os({ts:e,zone:r,loc:de.fromObject(t)}):os.invalid(os._unsupportedZone(r))}static fromMillis(e,t={}){if(Re(e))return e<-Jr||e>Jr?os.invalid("Timestamp out of range"):new os({ts:e,zone:ve(t.zone,De.defaultZone),loc:de.fromObject(t)});throw new o(`fromMillis requires a numerical input, but received a ${typeof e} with value `+e)}static fromObject(e={},t={}){var r=ve(t.zone,De.defaultZone);if(!r.isValid)return os.invalid(os._unsupportedZone(r));var s=de.fromObject(t),n=yt(e,as),i=De.now(),o=(t=Re(t.specificOffset)?t.specificOffset:r.offset(i),He(n.ordinal)),u=He(n.year),l=He(n.month)||He(n.day),c=(u=u||l,n.weekYear||n.weekNumber);if((u||o)&&c)throw new a("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(l&&o)throw new a("Can't mix ordinal dates with month/day");l=c||n.weekday&&!u;var{minDaysInFirstWeek:c,startOfWeek:h}=Ye(n,s);i=Br(i,t),u={containsGregor:u,containsOrdinal:o,loc:s,normalized:n,obj:e,offsetProvis:t,useWeekData:l,zoneToUse:r};return l?os._buildObject(u,ns,ts,Ce(i,c,h)):o?os._buildObject(u,is,rs,Ze(i)):os._buildObject(u,ss,es,i)}static fromRFC2822(e,t={}){var[r,s]=function(e){return Mt(function(e){return e.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(e),[Jt,Gt])}(e);return Kr(r,s,t,"RFC 2822",e)}static fromSQL(e,t={}){var[r,s]=function(e){return Mt(e,[lr,ir],[cr,hr])}(e);return Kr(r,s,t,"SQL",e)}static fromSeconds(e,t={}){if(Re(e))return new os({ts:1e3*e,zone:ve(t.zone,De.defaultZone),loc:de.fromObject(t)});throw new o("fromSeconds requires a numerical input")}static fromString(e,t,r={}){return os.fromFormat(e,t,r)}static fromStringExplain(e,t,r={}){return os.fromFormatExplain(e,t,r)}static invalid(e,r){if(!e)throw new o("need to specify a reason the DateTime is invalid");if(e=e instanceof Me?e:new Me(e,r),De.throwOnInvalid)throw new t(e);return new os({invalid:e})}static isDateTime(e){return!(!e||!e._isLuxonDateTime)}static local(...e){var[e,t]=this._lastOpts(e),[t,r,s,n,i,a,o]=t;return os._quickDT({year:t,month:r,day:s,hour:n,minute:i,second:a,millisecond:o},e)}static max(...e){if(e.every(os.isDateTime))return Qe(e,(e=>e.valueOf()),Math.max);throw new o("max requires all arguments be DateTimes")}static min(...e){if(e.every(os.isDateTime))return Qe(e,(e=>e.valueOf()),Math.min);throw new o("min requires all arguments be DateTimes")}static now(){return new os({})}static parseFormatForOpts(e,t={}){return(e=Pr(e,de.fromObject(t)))?e.map((e=>e?e.val:null)).join(""):null}static utc(...e){var[e,t]=this._lastOpts(e),[t,r,s,n,i,a,o]=t;return e.zone=fe.utcInstance,this._quickDT({year:t,month:r,day:s,hour:n,minute:i,second:a,millisecond:o},e)}static _buildObject(e,t,r,s){let n=!1;var i;return t.forEach((t=>{He(e.normalized[t])?n=!0:e.normalized[t]=n?r[t]:s[t]})),(t=(e.useWeekData?ze:e.containsOrdinal?Ae:qe)(e.normalized)||Ue(e.normalized))?os.invalid(t):([t,i]=Qr(e.useWeekData?Fe(e.normalized):e.containsOrdinal?Le(e.normalized):e.normalized,e.offsetProvis,e.zoneToUse),t=new os({ts:t,zone:e.zoneToUse,o:i,loc:e.loc}),e.normalized.weekday&&e.containsGregor&&e.obj.weekday!==t.weekday?os.invalid("mismatched weekday",`you can't specify both a weekday of ${e.normalized.weekday} and a date of `+t.toISO()):t.isValid?t:os.invalid(t._invalid))}static _diffRelative(e,t,r){const s=!!Pe(r.round)||r.round,n=(e,n)=>(e=nt(e,s||r.calendary?0:2,!0),t._loc.clone(r).relFormatter(r).format(e,n)),i=s=>r.calendary?t.hasSame(e,s)?0:t.startOf(s).diff(e.startOf(s),s).get(s):t.diff(e,s).get(s);if(r.unit)return n(i(r.unit),r.unit);for(const e of r.units){var a=i(e);if(1<=Math.abs(a))return n(a,e)}return n(t<e?-0:0,r.units[r.units.length-1])}static _lastOpts(e){let t,r={};return t=0<e.length&&"object"==typeof e[e.length-1]?(r=e.pop(),e):Array.from(e),[r,t]}static _quickDT(e,t){var r=ve(t.zone,De.defaultZone),s=(t=de.fromObject(t),De.now());let n,i;if(He(e.year)){for(const t of ss)Pe(e[t])&&(e[t]=es[t]);var a=qe(e)||Ue(e);if(a)return os.invalid(a);a=r.offset(s),[n,i]=Qr(e,a,r)}else n=s;return new os({ts:n,zone:r,loc:t,o:i})}static _unsupportedZone(e){return new Me("unsupported zone",`the zone "${e.name}" is not supported`)}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`:`DateTime { Invalid, reason: ${this.invalidReason} }`}diff(e,t="milliseconds",r={}){var s,n,i;return this.isValid&&e.isValid?(t=function(e){return Array.isArray(e)?e:[e]}(t).map(wr.normalizeUnit),i=(s=e.valueOf()>this.valueOf())?this:e,i=Tr(i,n=s?e:this,t,Object.assign({locale:this.locale,numberingSystem:this.numberingSystem},r)),s?i.negate():i):(n=this.invalidReason||e.invalidReason,wr.invalid(n,"created by diffing an invalid DateTime"))}diffNow(e="milliseconds",t={}){return this.diff(os.now(),e,t)}endOf(e,{useLocaleWeeks:t=!1}={}){return this.plus({[e]:1}).startOf(e,{useLocaleWeeks:t}).minus({milliseconds:1})}equals(e){return this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this._loc.equals(e._loc)}get(e){return this[e]}getPossibleOffsets(){var e,t,r,s;return this.isValid&&!this.isOffsetFixed&&(e=ut(this._c),r=this.zone.offset(e-864e5),s=this.zone.offset(e+864e5),(r=this.zone.offset(e-6e4*r))!==(s=this.zone.offset(e-6e4*s)))&&(t=e-6e4*s,r=Br(e-=6e4*r,r),s=Br(t,s),r.hour===s.hour)&&r.minute===s.minute&&r.second===s.second&&r.millisecond===s.millisecond?[this._clone({ts:e}),this._clone({ts:t})]:[this]}hasSame(e,t,r){var s;return!!this.isValid&&(s=e.valueOf(),+(e=this.setZone(e.zone,{keepLocalTime:!0})).startOf(t)<=s)&&s<=+e.endOf(t,r)}minus(e){return this.isValid?(e=wr.fromDurationLike(e).negate(),this._clone(this._adjustTime(e))):this}plus(e){return this.isValid?(e=wr.fromDurationLike(e),this._clone(this._adjustTime(e))):this}reconfigure(e){return e=this._loc.clone(e),this._clone({loc:e})}resolvedLocaleOptions(e={}){var{locale:e,numberingSystem:t,calendar:r}=Tt.create(this._loc.clone(e),e).resolvedOptions(this);return{locale:e,numberingSystem:t,outputCalendar:r}}set(e){if(!this.isValid)return this;e=yt(e,as);var{minDaysInFirstWeek:t,startOfWeek:r}=Ye(e,this.loc),s=He(e.weekYear)||He(e.weekNumber)||He(e.weekday),n=He(e.ordinal),i=He(e.year),o=He(e.month)||He(e.day),u=e.weekYear||e.weekNumber;if((i||o||n)&&u)throw new a("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(o&&n)throw new a("Can't mix ordinal dates with month/day");let l;s?l=Fe(Object.assign(Object.assign({},Ce(this._c,t,r)),e),t,r):Pe(e.ordinal)?(l=Object.assign(Object.assign({},this.toObject()),e),Pe(e.day)&&(l.day=Math.min(ot(l.year,l.month),l.day))):l=Le(Object.assign(Object.assign({},Ze(this._c)),e));var[i,u]=Qr(l,this._o,this.zone);return this._clone({ts:i,o:u})}setLocale(e){return this.reconfigure({locale:e})}setZone(e,{keepLocalTime:t=!1,keepCalendarTime:r=!1}={}){if((e=ve(e,De.defaultZone)).equals(this.zone))return this;if(e.isValid){let s=this._ts;return(t||r)&&(t=e.offset(this._ts),s=Qr(r=this.toObject(),t,e)[0]),this._clone({ts:s,zone:e})}return os.invalid(os._unsupportedZone(e))}startOf(e,{useLocaleWeeks:t=!1}={}){if(!this.isValid)return this;var r,s={};switch(e=wr.normalizeUnit(e)){case"years":s.month=1;case"quarters":case"months":s.day=1;case"weeks":case"days":s.hour=0;case"hours":s.minute=0;case"minutes":s.second=0;case"seconds":s.millisecond=0}return"weeks"===e&&(t?(t=this.loc.getStartOfWeek(),(r=this.weekday)<t&&(s.weekNumber=this.weekNumber-1),s.weekday=t):s.weekday=1),"quarters"===e&&(r=Math.ceil(this.month/3),s.month=3*(r-1)+1),this.set(s)}toBSON(){return this.toJSDate()}toFormat(e,t={}){return this.isValid?Tt.create(this._loc.redefaultToEN(t)).formatDateTimeFromString(this,e):Rr}toHTTP(){return Xr(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toISO({format:e="extended",suppressSeconds:t=!1,suppressMilliseconds:r=!1,includeOffset:s=!0,extendedZone:n=!1}={}){return this.isValid?[this._toISODate(e="extended"===e),"T",this._toISOTime(e,t,r,s,n)].join(""):null}toISODate({format:e="extended"}={format:"extended"}){return this.isValid?this._toISODate("extended"===e):null}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:t=!1,includeOffset:r=!0,includePrefix:s=!1,extendedZone:n=!1,format:i="extended"}={}){return this.isValid?[s?"T":"",this._toISOTime("extended"===i,t,e,r,n)].join(""):null}toISOWeekDate(){return Xr(this,"kkkk-'W'WW-c")}toJSDate(){return new Date(this.isValid?this._ts:NaN)}toJSON(){return this.toISO()}toLocal(){return this.setZone(De.defaultZone)}toLocaleParts(e={}){return this.isValid?Tt.create(this._loc.clone(e),e).formatDateTimeParts(this):[]}toLocaleString(e=k,t={}){return this.isValid?Tt.create(this._loc.clone(t),e).formatDateTime(this):Rr}toMillis(){return this.isValid?this.ts:NaN}toObject(e={includeConfig:!1}){var t;return this.isValid?(t=Object.assign({},this._c),e.includeConfig&&(t.outputCalendar=this.outputCalendar,t.numberingSystem=this._loc.numberingSystem,t.locale=this._loc.locale),t):{}}toRFC2822(){return Xr(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toRelative(e={}){if(!this.isValid)return null;var t=e.base||os.fromObject({},{zone:this.zone}),r=e.padding?this<t?-e.padding:e.padding:0;let s=["years","months","days","hours","minutes","seconds"],n=e.unit;return Array.isArray(e.unit)&&(s=e.unit,n=void 0),os._diffRelative(t,this.plus(r),Object.assign(Object.assign({},e),{numeric:"always",units:s,unit:n}))}toRelativeCalendar(e={}){return this.isValid?os._diffRelative(e.base||os.fromObject({},{zone:this.zone}),this,Object.assign(Object.assign({},e),{numeric:"auto",units:["years","months","days"],calendary:!0})):null}toSQL(e={}){return this.isValid?this.toSQLDate()+" "+this.toSQLTime(e):null}toSQLDate(){return this.isValid?this._toISODate(!0):null}toSQLTime({includeOffset:e=!0,includeZone:t=!1,includeOffsetSpace:r=!0}={}){let s="HH:mm:ss.SSS";return(t||e)&&(r&&(s+=" "),t?s+="z":e&&(s+="ZZ")),Xr(this,s,!0)}toSeconds(){return this.isValid?this._ts/1e3:NaN}toString(){return this.isValid?this.toISO():Rr}toUTC(e=0,t={}){return this.setZone(fe.instance(e),t)}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}until(e){return Or.fromDateTimes(this,e)}valueOf(){return this.toMillis()}_adjustTime(e){var t=this._o,r=this._c.year+Math.trunc(e.years),s=this._c.month+Math.trunc(e.months)+3*Math.trunc(e.quarters);r=Object.assign(Object.assign({},this._c),{year:r,month:s,day:Math.min(this._c.day,ot(r,s))+Math.trunc(e.days)+7*Math.trunc(e.weeks)}),s=wr.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds");let[n,i]=Gr(ut(r),t,this.zone);return 0!==s&&(n+=s,i=this.zone.offset(n)),{ts:n,o:i}}_clone(e){var t={ts:this._ts,zone:this.zone,c:this._c,o:this._o,loc:this._loc,invalid:this._invalid||void 0};return new os(Object.assign(Object.assign(Object.assign({},t),e),{old:t}))}_possiblyCachedLocalWeekData(e){return e._localWeekData||(e._localWeekData=Ce(e._c,e.loc.getMinDaysInFirstWeek(),e.loc.getStartOfWeek())),e._localWeekData}_possiblyCachedWeekData(e){return null===e._weekData&&(e._weekData=Ce(e._c)),e._weekData}_toISODate(e){var t=9999<this._c.year||this._c.year<0;let r="";return t&&0<=this._c.year&&(r+="+"),r+=et(this._c.year,t?6:4),e?(r=(r+="-")+et(this._c.month)+"-")+et(this._c.day):(r+=et(this._c.month))+et(this._c.day)}_toISOTime(e,t,r,s,n){let i=et(this._c.hour);return e?(i=(i+=":")+et(this._c.minute),0===this._c.millisecond&&0===this._c.second&&t||(i+=":")):i+=et(this._c.minute),0===this._c.millisecond&&0===this._c.second&&t||(i+=et(this._c.second),0===this._c.millisecond&&r)||(i=(i+=".")+et(this._c.millisecond,3)),s&&(this.isOffsetFixed&&0===this.offset&&!n?i+="Z":i=this._o<0?(i=(i+="-")+et(Math.trunc(-this._o/60))+":")+et(Math.trunc(-this._o%60)):(i=(i+="+")+et(Math.trunc(this._o/60))+":")+et(Math.trunc(this._o%60))),n&&(i+="["+this.zone.ianaName+"]"),i}}os.DATETIME_FULL=z,os.DATETIME_FULL_WITH_SECONDS=A,os.DATETIME_HUGE=q,os.DATETIME_HUGE_WITH_SECONDS=U,os.DATETIME_MED=F,os.DATETIME_MED_WITH_SECONDS=Z,os.DATETIME_MED_WITH_WEEKDAY=L,os.DATETIME_SHORT=W,os.DATETIME_SHORT_WITH_SECONDS=C,os.DATE_FULL=S,os.DATE_HUGE=T,os.DATE_MED=O,os.DATE_MED_WITH_WEEKDAY=b,os.DATE_SHORT=k,os.TIME_24_SIMPLE=j,os.TIME_24_WITH_LONG_OFFSET=V,os.TIME_24_WITH_SECONDS=E,os.TIME_24_WITH_SHORT_OFFSET=x,os.TIME_SIMPLE=N,os.TIME_WITH_LONG_OFFSET=I,os.TIME_WITH_SECONDS=D,os.TIME_WITH_SHORT_OFFSET=M;const us="4.5.2";export{os as DateTime,wr as Duration,fe as FixedOffsetZone,_ as IANAZone,br as Info,Or as Interval,h as Intl,ye as InvalidZone,vt as ORDERED_UNITS,wt as REVERSE_ORDERED_UNITS,De as Settings,_e as SystemZone,us as VERSION,c as Zone};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
