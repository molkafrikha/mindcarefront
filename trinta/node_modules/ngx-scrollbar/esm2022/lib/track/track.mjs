import { Directive, effect } from '@angular/core';
import { fromPromise } from 'rxjs/internal/observable/innerFrom';
import { TrackAdapter } from './track-adapter';
import * as i0 from "@angular/core";
export class TrackXDirective extends TrackAdapter {
    get viewportScrollSize() {
        return this.cmp.viewport.contentWidth;
    }
    constructor() {
        effect(() => {
            if (this.cmp.direction() === 'rtl') {
                this.getCurrPosition = () => {
                    const offset = this.viewportScrollSize - this.viewportSize - this.control.viewportScrollOffset;
                    return offset * this.size / this.viewportScrollSize;
                };
                this.getScrollDirection = (position) => {
                    return position < this.getCurrPosition() ? 'forward' : 'backward';
                };
            }
            else {
                this.getCurrPosition = () => {
                    return this.control.viewportScrollOffset * this.size / this.viewportScrollSize;
                };
                this.getScrollDirection = (position) => {
                    return position > this.getCurrPosition() ? 'forward' : 'backward';
                };
            }
        });
        super();
        this.cssLengthProperty = '--track-x-length';
    }
    scrollTo(start) {
        return fromPromise(this.cmp.scrollTo({ start, duration: this.cmp.trackScrollDuration }));
    }
    getScrollForwardStep() {
        return this.control.viewportScrollOffset + this.viewportSize;
    }
    getScrollBackwardStep() {
        return this.control.viewportScrollOffset - this.viewportSize;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: TrackXDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.3", type: TrackXDirective, isStandalone: true, selector: "[scrollbarTrackX]", providers: [{ provide: TrackAdapter, useExisting: TrackXDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: TrackXDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarTrackX]',
                    providers: [{ provide: TrackAdapter, useExisting: TrackXDirective }]
                }]
        }], ctorParameters: () => [] });
export class TrackYDirective extends TrackAdapter {
    constructor() {
        super(...arguments);
        this.cssLengthProperty = '--track-y-length';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.contentHeight;
    }
    getCurrPosition() {
        return this.control.viewportScrollOffset * this.size / this.viewportScrollSize;
    }
    getScrollDirection(position) {
        return position > this.getCurrPosition() ? 'forward' : 'backward';
    }
    scrollTo(top) {
        return fromPromise(this.cmp.scrollTo({ top, duration: this.cmp.trackScrollDuration }));
    }
    getScrollForwardStep() {
        return this.control.viewportScrollOffset + this.viewportSize;
    }
    getScrollBackwardStep() {
        return this.control.viewportScrollOffset - this.viewportSize;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: TrackYDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.3", type: TrackYDirective, isStandalone: true, selector: "[scrollbarTrackY]", providers: [{ provide: TrackAdapter, useExisting: TrackYDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: TrackYDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarTrackY]',
                    providers: [{ provide: TrackAdapter, useExisting: TrackYDirective }]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdHJhY2svdHJhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFPL0MsTUFBTSxPQUFPLGVBQWdCLFNBQVEsWUFBWTtJQUkvQyxJQUFjLGtCQUFrQjtRQUM5QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDO0lBTUQ7UUFDRSxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLEtBQUssRUFBRTtnQkFDbEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFXLEVBQUU7b0JBQ2xDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7b0JBQ3ZHLE9BQU8sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2dCQUN0RCxDQUFDLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsUUFBZ0IsRUFBMEIsRUFBRTtvQkFDckUsT0FBTyxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztnQkFDcEUsQ0FBQyxDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFXLEVBQUU7b0JBQ2xD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LEVBQUUsWUFBWSxFQUFFLFdBQVcsaUJBQWlCLEVBQUUsQ0FBQztpQkFDckUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGVmZmVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZyb21Qcm9taXNlIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XHJcbmltcG9ydCB7IFRyYWNrQWRhcHRlciB9IGZyb20gJy4vdHJhY2stYWRhcHRlcic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHNlbGVjdG9yOiAnW3Njcm9sbGJhclRyYWNrWF0nLFxyXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVHJhY2tBZGFwdGVyLCB1c2VFeGlzdGluZzogVHJhY2tYRGlyZWN0aXZlIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmFja1hEaXJlY3RpdmUgZXh0ZW5kcyBUcmFja0FkYXB0ZXIge1xyXG5cclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY3NzTGVuZ3RoUHJvcGVydHk6IHN0cmluZyA9ICctLXRyYWNrLXgtbGVuZ3RoJztcclxuXHJcbiAgcHJvdGVjdGVkIGdldCB2aWV3cG9ydFNjcm9sbFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNtcC52aWV3cG9ydC5jb250ZW50V2lkdGg7XHJcbiAgfVxyXG5cclxuICBnZXRDdXJyUG9zaXRpb246ICgpID0+IG51bWJlcjtcclxuXHJcbiAgZ2V0U2Nyb2xsRGlyZWN0aW9uOiAocG9zaXRpb246IG51bWJlcikgPT4gJ2ZvcndhcmQnIHwgJ2JhY2t3YXJkJztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBlZmZlY3QoKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5jbXAuZGlyZWN0aW9uKCkgPT09ICdydGwnKSB7XHJcbiAgICAgICAgdGhpcy5nZXRDdXJyUG9zaXRpb24gPSAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICAgIGNvbnN0IG9mZnNldDogbnVtYmVyID0gdGhpcy52aWV3cG9ydFNjcm9sbFNpemUgLSB0aGlzLnZpZXdwb3J0U2l6ZSAtIHRoaXMuY29udHJvbC52aWV3cG9ydFNjcm9sbE9mZnNldDtcclxuICAgICAgICAgIHJldHVybiBvZmZzZXQgKiB0aGlzLnNpemUgLyB0aGlzLnZpZXdwb3J0U2Nyb2xsU2l6ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZ2V0U2Nyb2xsRGlyZWN0aW9uID0gKHBvc2l0aW9uOiBudW1iZXIpOiAnZm9yd2FyZCcgfCAnYmFja3dhcmQnID0+IHtcclxuICAgICAgICAgIHJldHVybiBwb3NpdGlvbiA8IHRoaXMuZ2V0Q3VyclBvc2l0aW9uKCkgPyAnZm9yd2FyZCcgOiAnYmFja3dhcmQnO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5nZXRDdXJyUG9zaXRpb24gPSAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wudmlld3BvcnRTY3JvbGxPZmZzZXQgKiB0aGlzLnNpemUgLyB0aGlzLnZpZXdwb3J0U2Nyb2xsU2l6ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRTY3JvbGxEaXJlY3Rpb24gPSAocG9zaXRpb246IG51bWJlcik6ICdmb3J3YXJkJyB8ICdiYWNrd2FyZCcgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHBvc2l0aW9uID4gdGhpcy5nZXRDdXJyUG9zaXRpb24oKSA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCc7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNjcm9sbFRvKHN0YXJ0OiBudW1iZXIpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIHJldHVybiBmcm9tUHJvbWlzZSh0aGlzLmNtcC5zY3JvbGxUbyh7IHN0YXJ0LCBkdXJhdGlvbjogdGhpcy5jbXAudHJhY2tTY3JvbGxEdXJhdGlvbiB9KSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0U2Nyb2xsRm9yd2FyZFN0ZXAoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2wudmlld3BvcnRTY3JvbGxPZmZzZXQgKyB0aGlzLnZpZXdwb3J0U2l6ZTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRTY3JvbGxCYWNrd2FyZFN0ZXAoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2wudmlld3BvcnRTY3JvbGxPZmZzZXQgLSB0aGlzLnZpZXdwb3J0U2l6ZTtcclxuICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgc2VsZWN0b3I6ICdbc2Nyb2xsYmFyVHJhY2tZXScsXHJcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUcmFja0FkYXB0ZXIsIHVzZUV4aXN0aW5nOiBUcmFja1lEaXJlY3RpdmUgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRyYWNrWURpcmVjdGl2ZSBleHRlbmRzIFRyYWNrQWRhcHRlciB7XHJcblxyXG4gIHByb3RlY3RlZCByZWFkb25seSBjc3NMZW5ndGhQcm9wZXJ0eTogc3RyaW5nID0gJy0tdHJhY2steS1sZW5ndGgnO1xyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IHZpZXdwb3J0U2Nyb2xsU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY21wLnZpZXdwb3J0LmNvbnRlbnRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0Q3VyclBvc2l0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9sLnZpZXdwb3J0U2Nyb2xsT2Zmc2V0ICogdGhpcy5zaXplIC8gdGhpcy52aWV3cG9ydFNjcm9sbFNpemU7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0U2Nyb2xsRGlyZWN0aW9uKHBvc2l0aW9uOiBudW1iZXIpOiAnZm9yd2FyZCcgfCAnYmFja3dhcmQnIHtcclxuICAgIHJldHVybiBwb3NpdGlvbiA+IHRoaXMuZ2V0Q3VyclBvc2l0aW9uKCkgPyAnZm9yd2FyZCcgOiAnYmFja3dhcmQnO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNjcm9sbFRvKHRvcDogbnVtYmVyKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gZnJvbVByb21pc2UodGhpcy5jbXAuc2Nyb2xsVG8oeyB0b3AsIGR1cmF0aW9uOiB0aGlzLmNtcC50cmFja1Njcm9sbER1cmF0aW9uIH0pKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRTY3JvbGxGb3J3YXJkU3RlcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC52aWV3cG9ydFNjcm9sbE9mZnNldCArIHRoaXMudmlld3BvcnRTaXplO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldFNjcm9sbEJhY2t3YXJkU3RlcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC52aWV3cG9ydFNjcm9sbE9mZnNldCAtIHRoaXMudmlld3BvcnRTaXplO1xyXG4gIH1cclxufVxyXG4iXX0=