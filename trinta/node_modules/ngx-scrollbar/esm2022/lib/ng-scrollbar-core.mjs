import { Directive, Input, Output, inject, signal, effect, computed, numberAttribute, booleanAttribute, runInInjectionContext, input, EventEmitter, ElementRef, NgZone, Injector } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { Directionality } from '@angular/cdk/bidi';
import { toSignal } from '@angular/core/rxjs-interop';
import { map, tap } from 'rxjs';
import { SmoothScrollManager } from 'ngx-scrollbar/smooth-scroll';
import { NG_SCROLLBAR } from './utils/scrollbar-base';
import { resizeObserver, ViewportAdapter } from './viewport';
import { ScrollbarUpdateReason, NG_SCROLLBAR_OPTIONS } from './ng-scrollbar.model';
import * as i0 from "@angular/core";
const defaultOptions = {
    trackClass: '',
    thumbClass: '',
    buttonClass: '',
    orientation: 'auto',
    appearance: 'native',
    visibility: 'native',
    position: 'native',
    trackScrollDuration: 50,
    sensorThrottleTime: 0,
    disableSensor: false,
    disableInteraction: false,
    buttons: false
};
export class NgScrollbarCore {
    constructor() {
        /** Injected options */
        this.injectedOptions = inject(NG_SCROLLBAR_OPTIONS, { optional: true });
        /** Combine injected option with default options */
        this.options = this.injectedOptions ? { ...defaultOptions, ...this.injectedOptions } : defaultOptions;
        this.zone = inject(NgZone);
        this.platform = inject(Platform);
        this.injector = inject(Injector);
        /** A flag that indicates if the platform is mobile */
        this.isMobile = this.platform.IOS || this.platform.ANDROID;
        this.dir = inject(Directionality);
        this.smoothScroll = inject(SmoothScrollManager);
        this.nativeElement = inject((ElementRef)).nativeElement;
        /**
         * Indicates when scrollbar thumb is being dragged
         */
        this.dragging = signal('none');
        /**
         * Sets the supported scroll track of the viewport, there are 3 options:
         *
         * - `vertical` Use both vertical and horizontal scrollbar
         * - `horizontal` Use both vertical and horizontal scrollbar
         * - `auto` Use both vertical and horizontal scrollbar
         */
        this.orientation = input(this.options.orientation);
        /**
         * When to show the scrollbar, and there are 3 options:
         *
         * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar
         * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering
         * - `always` Scrollbars are always shown even if the viewport is not scrollable
         */
        this.visibility = input(this.options.visibility);
        /** Show scrollbar buttons */
        this.buttons = input(this.options.buttons, {
            transform: booleanAttribute
        });
        /** Disables scrollbar interaction like dragging thumb and jumping by track click */
        this.disableInteraction = input(this.options.disableInteraction, {
            transform: booleanAttribute
        });
        /** Whether ResizeObserver is disabled */
        this.disableSensor = input(this.options.disableSensor, {
            transform: booleanAttribute
        });
        /** Throttle interval for detecting changes via ResizeObserver */
        this.sensorThrottleTime = input(this.options.sensorThrottleTime, {
            transform: numberAttribute
        });
        this.viewportDimension = signal({
            contentHeight: 0,
            contentWidth: 0,
            offsetHeight: 0,
            offsetWidth: 0
        });
        this.state = computed(() => {
            let verticalUsed = false;
            let horizontalUsed = false;
            let isVerticallyScrollable = false;
            let isHorizontallyScrollable = false;
            const orientation = this.orientation();
            const visibility = this.visibility();
            const viewport = this.viewportDimension();
            // Check if vertical scrollbar should be displayed
            if (orientation === 'auto' || orientation === 'vertical') {
                isVerticallyScrollable = viewport.contentHeight > viewport.offsetHeight;
                verticalUsed = visibility === 'visible' || isVerticallyScrollable;
            }
            // Check if horizontal scrollbar should be displayed
            if (orientation === 'auto' || orientation === 'horizontal') {
                isHorizontallyScrollable = viewport.contentWidth > viewport.offsetWidth;
                horizontalUsed = visibility === 'visible' || isHorizontallyScrollable;
            }
            return {
                verticalUsed,
                horizontalUsed,
                isVerticallyScrollable,
                isHorizontallyScrollable,
            };
        });
        this.isVerticallyScrollable = computed(() => this.state().isVerticallyScrollable);
        this.isHorizontallyScrollable = computed(() => this.state().isHorizontallyScrollable);
        this.verticalUsed = computed(() => this.state().verticalUsed);
        this.horizontalUsed = computed(() => this.state().horizontalUsed);
        /** Scroll duration when the scroll track is clicked */
        this.trackScrollDuration = this.options.trackScrollDuration;
        /**
         *  Sets the appearance of the scrollbar, there are 2 options:
         *
         * - `native` (default) scrollbar space will be reserved just like with native scrollbar.
         * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.
         */
        this.appearance = this.options.appearance;
        /**
         * Sets the position of each scrollbar, there are 4 options:
         *
         * - `native` (Default) Use the default position like in native scrollbar.
         * - `invertY` Inverts vertical scrollbar position
         * - `invertX` Inverts Horizontal scrollbar position
         * - `invertAll` Inverts both scrollbar positions
         */
        this.position = this.options.position;
        /** A class forwarded to the scrollbar track element */
        this.trackClass = this.options.trackClass;
        /** A class forwarded to the scrollbar thumb element */
        this.thumbClass = this.options.thumbClass;
        /** A class forwarded to the scrollbar button element */
        this.buttonClass = this.options.thumbClass;
        /** Steam that emits when scrollbar is initialized */
        this.afterInit = new EventEmitter();
        /** Steam that emits when scrollbar is updated */
        this.afterUpdate = new EventEmitter();
        /** Viewport adapter instance */
        this.viewport = new ViewportAdapter();
    }
    ngOnInit() {
        runInInjectionContext(this.injector, () => {
            // The direction signal cannot be initialized in the constructor
            // Because it initially returns 'ltr' even if dir.value is 'rtl`
            this.direction = toSignal(this.dir.change.pipe(map(() => this.dir.value)), { initialValue: this.dir.value });
            effect((onCleanup) => {
                // Check whether sensor should be enabled
                if (this.disableSensor()) {
                    // If sensor is disabled update manually
                    this.sizeChangeSub?.unsubscribe();
                }
                else {
                    if (this.platform.isBrowser && this.viewport.initialized()) {
                        this.sizeChangeSub?.unsubscribe();
                        this.zone.runOutsideAngular(() => {
                            this.sizeChangeSub = resizeObserver({
                                element: this.viewport.nativeElement,
                                contentWrapper: this.viewport.contentWrapperElement,
                                throttleDuration: this.sensorThrottleTime()
                            }).pipe(tap((reason) => this.update(reason))).subscribe();
                        });
                    }
                }
                onCleanup(() => this.sizeChangeSub?.unsubscribe());
            });
        });
    }
    ngAfterViewInit() {
        // If sensor is disabled, update to evaluate the state
        if (this.platform.isBrowser && this.disableSensor()) {
            // In case of 3rd party library, need to wait for content to be rendered
            requestAnimationFrame(() => {
                this.update(ScrollbarUpdateReason.AfterInit);
            });
        }
    }
    /**
     * Update local state and the internal scrollbar controls
     */
    update(reason) {
        this.updateCSSVariables();
        this.zone.run(() => {
            this.viewportDimension.set({
                contentHeight: this.viewport.contentHeight,
                contentWidth: this.viewport.contentWidth,
                offsetHeight: this.viewport.offsetHeight,
                offsetWidth: this.viewport.offsetWidth
            });
            if (reason === ScrollbarUpdateReason.AfterInit) {
                this.afterInit.emit();
            }
            else {
                this.afterUpdate.emit();
            }
        });
    }
    /**
     * Smooth scroll functions
     */
    scrollTo(options) {
        return this.smoothScroll.scrollTo(this.viewport.nativeElement, options);
    }
    /**
     * Scroll to element by reference or selector
     */
    scrollToElement(target, options) {
        return this.smoothScroll.scrollToElement(this.viewport.nativeElement, target, options);
    }
    /**
     * Update Essential CSS variables
     */
    updateCSSVariables() {
        this.nativeElement.style.setProperty('--content-height', `${this.viewport.contentHeight}`);
        this.nativeElement.style.setProperty('--content-width', `${this.viewport.contentWidth}`);
        this.nativeElement.style.setProperty('--viewport-height', `${this.viewport.offsetHeight}`);
        this.nativeElement.style.setProperty('--viewport-width', `${this.viewport.offsetWidth}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: NgScrollbarCore, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "17.3.3", type: NgScrollbarCore, inputs: { orientation: { classPropertyName: "orientation", publicName: "orientation", isSignal: true, isRequired: false, transformFunction: null }, visibility: { classPropertyName: "visibility", publicName: "visibility", isSignal: true, isRequired: false, transformFunction: null }, buttons: { classPropertyName: "buttons", publicName: "buttons", isSignal: true, isRequired: false, transformFunction: null }, disableInteraction: { classPropertyName: "disableInteraction", publicName: "disableInteraction", isSignal: true, isRequired: false, transformFunction: null }, disableSensor: { classPropertyName: "disableSensor", publicName: "disableSensor", isSignal: true, isRequired: false, transformFunction: null }, sensorThrottleTime: { classPropertyName: "sensorThrottleTime", publicName: "sensorThrottleTime", isSignal: true, isRequired: false, transformFunction: null }, trackScrollDuration: { classPropertyName: "trackScrollDuration", publicName: "trackScrollDuration", isSignal: false, isRequired: false, transformFunction: numberAttribute }, appearance: { classPropertyName: "appearance", publicName: "appearance", isSignal: false, isRequired: false, transformFunction: null }, position: { classPropertyName: "position", publicName: "position", isSignal: false, isRequired: false, transformFunction: null }, trackClass: { classPropertyName: "trackClass", publicName: "trackClass", isSignal: false, isRequired: false, transformFunction: null }, thumbClass: { classPropertyName: "thumbClass", publicName: "thumbClass", isSignal: false, isRequired: false, transformFunction: null }, buttonClass: { classPropertyName: "buttonClass", publicName: "buttonClass", isSignal: false, isRequired: false, transformFunction: null } }, outputs: { afterInit: "afterInit", afterUpdate: "afterUpdate" }, host: { properties: { "class.ng-scrollbar": "true", "attr.verticalUsed": "verticalUsed()", "attr.horizontalUsed": "horizontalUsed()", "attr.isVerticallyScrollable": "isVerticallyScrollable()", "attr.isHorizontallyScrollable": "isHorizontallyScrollable()", "attr.mobile": "isMobile", "attr.dir": "direction()", "attr.position": "position", "attr.dragging": "dragging()", "attr.appearance": "appearance", "attr.visibility": "visibility()", "attr.orientation": "orientation()", "attr.disableInteraction": "disableInteraction()" } }, providers: [{ provide: NG_SCROLLBAR, useExisting: NgScrollbarCore }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: NgScrollbarCore, decorators: [{
            type: Directive,
            args: [{
                    host: {
                        '[class.ng-scrollbar]': 'true',
                        '[attr.verticalUsed]': 'verticalUsed()',
                        '[attr.horizontalUsed]': 'horizontalUsed()',
                        '[attr.isVerticallyScrollable]': 'isVerticallyScrollable()',
                        '[attr.isHorizontallyScrollable]': 'isHorizontallyScrollable()',
                        '[attr.mobile]': 'isMobile',
                        '[attr.dir]': 'direction()',
                        '[attr.position]': 'position',
                        '[attr.dragging]': 'dragging()',
                        '[attr.appearance]': 'appearance',
                        '[attr.visibility]': 'visibility()',
                        '[attr.orientation]': 'orientation()',
                        '[attr.disableInteraction]': 'disableInteraction()'
                    },
                    providers: [{ provide: NG_SCROLLBAR, useExisting: NgScrollbarCore }]
                }]
        }], propDecorators: { trackScrollDuration: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], appearance: [{
                type: Input
            }], position: [{
                type: Input
            }], trackClass: [{
                type: Input
            }], thumbClass: [{
                type: Input
            }], buttonClass: [{
                type: Input
            }], afterInit: [{
                type: Output
            }], afterUpdate: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,