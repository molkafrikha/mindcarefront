import { Injectable, inject, signal, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { NG_SCROLLBAR_POLYFILL } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
const scrollTimelinePolyfillUrl = 'https://flackr.github.io/scroll-timeline/dist/scroll-timeline.js';
export class ScrollbarManager {
    constructor() {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this._polyfillUrl = inject(NG_SCROLLBAR_POLYFILL, { optional: true }) || scrollTimelinePolyfillUrl;
        this.document = inject(DOCUMENT);
        this.window = this.document.defaultView;
        this.scrollTimelinePolyfill = signal(null);
        if (this.isBrowser && (!this.window['ScrollTimeline'] || !CSS.supports('animation-timeline', 'scroll()'))) {
            this.initPolyfill();
        }
    }
    async initPolyfill() {
        try {
            // Create a script element
            const script = this.document.createElement('script');
            script.src = this._polyfillUrl;
            // Wait for the script to load
            await new Promise((resolve, reject) => {
                script.onload = resolve;
                script.onerror = reject;
                this.document.head.appendChild(script);
            });
            // Once loaded, access and execute the function attached to the window object
            if (this.window['ScrollTimeline']) {
                this.scrollTimelinePolyfill.set(this.window['ScrollTimeline']);
            }
            else {
                console.error('[NgScrollbar]: ScrollTimeline is not attached to the window object.');
            }
        }
        catch (error) {
            console.error('[NgScrollbar]: Error loading ScrollTimeline script:', error);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: ScrollbarManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: ScrollbarManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: ScrollbarManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFrQixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUc5RCxNQUFNLHlCQUF5QixHQUFXLGtFQUFrRSxDQUFDO0FBRzdHLE1BQU0sT0FBTyxnQkFBZ0I7SUFZM0I7UUFWaUIsY0FBUyxHQUFZLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRXBFLGlCQUFZLEdBQVcsTUFBTSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUkseUJBQXlCLENBQUM7UUFFdEcsYUFBUSxHQUFhLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV0QyxXQUFNLEdBQVcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFFM0MsMkJBQXNCLEdBQXVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUdqRixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN6RyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDaEIsSUFBSTtZQUNGLDBCQUEwQjtZQUMxQixNQUFNLE1BQU0sR0FBc0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEUsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBRS9CLDhCQUE4QjtZQUM5QixNQUFNLElBQUksT0FBTyxDQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUMzQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztnQkFDeEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUVILDZFQUE2RTtZQUM3RSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtnQkFDakMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzthQUNoRTtpQkFBTTtnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLHFFQUFxRSxDQUFDLENBQUM7YUFDdEY7U0FDRjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM3RTtJQUNILENBQUM7OEdBeENVLGdCQUFnQjtrSEFBaEIsZ0JBQWdCLGNBREgsTUFBTTs7MkZBQ25CLGdCQUFnQjtrQkFENUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBpbmplY3QsIHNpZ25hbCwgV3JpdGFibGVTaWduYWwsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5ULCBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE5HX1NDUk9MTEJBUl9QT0xZRklMTCB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcbmltcG9ydCB7IFNjcm9sbFRpbWVsaW5lRnVuYyB9IGZyb20gJy4vY29tbW9uJztcclxuXHJcbmNvbnN0IHNjcm9sbFRpbWVsaW5lUG9seWZpbGxVcmw6IHN0cmluZyA9ICdodHRwczovL2ZsYWNrci5naXRodWIuaW8vc2Nyb2xsLXRpbWVsaW5lL2Rpc3Qvc2Nyb2xsLXRpbWVsaW5lLmpzJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBTY3JvbGxiYXJNYW5hZ2VyIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBpc0Jyb3dzZXI6IGJvb2xlYW4gPSBpc1BsYXRmb3JtQnJvd3NlcihpbmplY3QoUExBVEZPUk1fSUQpKTtcclxuXHJcbiAgcmVhZG9ubHkgX3BvbHlmaWxsVXJsOiBzdHJpbmcgPSBpbmplY3QoTkdfU0NST0xMQkFSX1BPTFlGSUxMLCB7IG9wdGlvbmFsOiB0cnVlIH0pIHx8IHNjcm9sbFRpbWVsaW5lUG9seWZpbGxVcmw7XHJcblxyXG4gIHJlYWRvbmx5IGRvY3VtZW50OiBEb2N1bWVudCA9IGluamVjdChET0NVTUVOVCk7XHJcblxyXG4gIHJlYWRvbmx5IHdpbmRvdzogV2luZG93ID0gdGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldztcclxuXHJcbiAgcmVhZG9ubHkgc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbDogV3JpdGFibGVTaWduYWw8U2Nyb2xsVGltZWxpbmVGdW5jPiA9IHNpZ25hbChudWxsKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIgJiYgKCF0aGlzLndpbmRvd1snU2Nyb2xsVGltZWxpbmUnXSB8fCAhQ1NTLnN1cHBvcnRzKCdhbmltYXRpb24tdGltZWxpbmUnLCAnc2Nyb2xsKCknKSkpIHtcclxuICAgICAgdGhpcy5pbml0UG9seWZpbGwoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGluaXRQb2x5ZmlsbCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENyZWF0ZSBhIHNjcmlwdCBlbGVtZW50XHJcbiAgICAgIGNvbnN0IHNjcmlwdDogSFRNTFNjcmlwdEVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICBzY3JpcHQuc3JjID0gdGhpcy5fcG9seWZpbGxVcmw7XHJcblxyXG4gICAgICAvLyBXYWl0IGZvciB0aGUgc2NyaXB0IHRvIGxvYWRcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2U8RXZlbnQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBzY3JpcHQub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgICBzY3JpcHQub25lcnJvciA9IHJlamVjdDtcclxuICAgICAgICB0aGlzLmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBPbmNlIGxvYWRlZCwgYWNjZXNzIGFuZCBleGVjdXRlIHRoZSBmdW5jdGlvbiBhdHRhY2hlZCB0byB0aGUgd2luZG93IG9iamVjdFxyXG4gICAgICBpZiAodGhpcy53aW5kb3dbJ1Njcm9sbFRpbWVsaW5lJ10pIHtcclxuICAgICAgICB0aGlzLnNjcm9sbFRpbWVsaW5lUG9seWZpbGwuc2V0KHRoaXMud2luZG93WydTY3JvbGxUaW1lbGluZSddKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdbTmdTY3JvbGxiYXJdOiBTY3JvbGxUaW1lbGluZSBpcyBub3QgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QuJyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tOZ1Njcm9sbGJhcl06IEVycm9yIGxvYWRpbmcgU2Nyb2xsVGltZWxpbmUgc2NyaXB0OicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19