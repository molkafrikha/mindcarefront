import { Directive, effect, inject, ElementRef, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_SCROLLBAR } from '../utils/scrollbar-base';
import { SCROLLBAR_CONTROL } from '../scrollbar/scrollbar-adapter';
import * as i0 from "@angular/core";
export class PointerEventsAdapter {
    constructor() {
        // Reference to the NgScrollbar component
        this.cmp = inject(NG_SCROLLBAR);
        // Reference to the Scrollbar control component
        this.control = inject(SCROLLBAR_CONTROL);
        // Reference to the Document element
        this.document = inject(DOCUMENT);
        // Reference to angular zone
        this.zone = inject(NgZone);
        // The native element of the directive
        this.nativeElement = inject((ElementRef)).nativeElement;
        effect((onCleanup) => {
            if (this.cmp.disableInteraction()) {
                this._pointerEventsSub?.unsubscribe();
            }
            else {
                this.zone.runOutsideAngular(() => {
                    this._pointerEventsSub = this.pointerEvents.subscribe();
                });
            }
            onCleanup(() => this._pointerEventsSub?.unsubscribe());
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: PointerEventsAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.3", type: PointerEventsAdapter, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: PointerEventsAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci1ldmVudHMtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi91dGlscy9wb2ludGVyLWV2ZW50cy1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFnQixZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsaUJBQWlCLEVBQW9CLE1BQU0sZ0NBQWdDLENBQUM7O0FBR3JGLE1BQU0sT0FBZ0Isb0JBQW9CO0lBc0J4QztRQXBCQSx5Q0FBeUM7UUFDdEIsUUFBRyxHQUFpQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFNUQsK0NBQStDO1FBQzVCLFlBQU8sR0FBcUIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFekUsb0NBQW9DO1FBQ2pCLGFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFekQsNEJBQTRCO1FBQ1QsU0FBSSxHQUFXLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRCxzQ0FBc0M7UUFDN0Isa0JBQWEsR0FBZ0IsTUFBTSxDQUFDLENBQUEsVUFBdUIsQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBUWxGLE1BQU0sQ0FBQyxDQUFDLFNBQWtDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsRUFBRTtnQkFDakMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxDQUFDO2FBQ3ZDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO29CQUMvQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDMUQsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUVELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBbENtQixvQkFBb0I7a0dBQXBCLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFEekMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZWZmZWN0LCBpbmplY3QsIEVsZW1lbnRSZWYsIE5nWm9uZSwgRWZmZWN0Q2xlYW51cFJlZ2lzdGVyRm4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgX05nU2Nyb2xsYmFyLCBOR19TQ1JPTExCQVIgfSBmcm9tICcuLi91dGlscy9zY3JvbGxiYXItYmFzZSc7XHJcbmltcG9ydCB7IFNDUk9MTEJBUl9DT05UUk9MLCBTY3JvbGxiYXJBZGFwdGVyIH0gZnJvbSAnLi4vc2Nyb2xsYmFyL3Njcm9sbGJhci1hZGFwdGVyJztcclxuXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9pbnRlckV2ZW50c0FkYXB0ZXIge1xyXG5cclxuICAvLyBSZWZlcmVuY2UgdG8gdGhlIE5nU2Nyb2xsYmFyIGNvbXBvbmVudFxyXG4gIHByb3RlY3RlZCByZWFkb25seSBjbXA6IF9OZ1Njcm9sbGJhciA9IGluamVjdChOR19TQ1JPTExCQVIpO1xyXG5cclxuICAvLyBSZWZlcmVuY2UgdG8gdGhlIFNjcm9sbGJhciBjb250cm9sIGNvbXBvbmVudFxyXG4gIHByb3RlY3RlZCByZWFkb25seSBjb250cm9sOiBTY3JvbGxiYXJBZGFwdGVyID0gaW5qZWN0KFNDUk9MTEJBUl9DT05UUk9MKTtcclxuXHJcbiAgLy8gUmVmZXJlbmNlIHRvIHRoZSBEb2N1bWVudCBlbGVtZW50XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGRvY3VtZW50OiBEb2N1bWVudCA9IGluamVjdChET0NVTUVOVCk7XHJcblxyXG4gIC8vIFJlZmVyZW5jZSB0byBhbmd1bGFyIHpvbmVcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgem9uZTogTmdab25lID0gaW5qZWN0KE5nWm9uZSk7XHJcblxyXG4gIC8vIFRoZSBuYXRpdmUgZWxlbWVudCBvZiB0aGUgZGlyZWN0aXZlXHJcbiAgcmVhZG9ubHkgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQgPSBpbmplY3QoRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pLm5hdGl2ZUVsZW1lbnQ7XHJcblxyXG4gIC8vIFBvaW50ZXIgZXZlbnRzIHN1YnNjcmlwdGlvbiAobWFkZSBwdWJsaWMgZm9yIHRlc3RpbmcgcHVycG9zZSlcclxuICBfcG9pbnRlckV2ZW50c1N1YjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICBhYnN0cmFjdCBnZXQgcG9pbnRlckV2ZW50cygpOiBPYnNlcnZhYmxlPFBvaW50ZXJFdmVudD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgZWZmZWN0KChvbkNsZWFudXA6IEVmZmVjdENsZWFudXBSZWdpc3RlckZuKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmNtcC5kaXNhYmxlSW50ZXJhY3Rpb24oKSkge1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJFdmVudHNTdWI/LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuX3BvaW50ZXJFdmVudHNTdWIgPSB0aGlzLnBvaW50ZXJFdmVudHMuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9uQ2xlYW51cCgoKSA9PiB0aGlzLl9wb2ludGVyRXZlbnRzU3ViPy51bnN1YnNjcmliZSgpKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=