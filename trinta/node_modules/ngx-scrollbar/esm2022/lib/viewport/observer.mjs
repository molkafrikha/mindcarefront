import { Observable, throttleTime } from 'rxjs';
import { ScrollbarUpdateReason } from '../ng-scrollbar.model';
export function resizeObserver({ element, contentWrapper, throttleDuration }) {
    // The first time the observer is triggered as soon as the element is observed,
    // So we need to differentiate the reason of the event fired
    let reason = ScrollbarUpdateReason.AfterInit;
    let resizeObserver;
    const stream = new Observable((observer) => {
        resizeObserver = new ResizeObserver(() => {
            observer.next(reason);
            // After first init event, mark the reason to be a resize from now on.
            reason = ScrollbarUpdateReason.Resized;
        });
        resizeObserver.observe(element);
        // If a content element has a supporting content scrollbars, observe it!
        if (contentWrapper) {
            resizeObserver.observe(contentWrapper);
        }
        return () => {
            resizeObserver?.disconnect();
        };
    });
    return throttleDuration ? stream.pipe(throttleTime(throttleDuration, null, {
        leading: true,
        trailing: true
    })) : stream;
}
export function mutationObserver(element, throttleDuration) {
    let mutationObserver;
    const stream = new Observable((observer) => {
        mutationObserver = new MutationObserver(() => {
            observer.next();
        });
        mutationObserver.observe(element, { childList: true, subtree: true });
        return () => {
            mutationObserver?.disconnect();
        };
    });
    return stream.pipe(throttleTime(throttleDuration, null, {
        leading: true,
        trailing: true
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdmlld3BvcnQvb2JzZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBWSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFROUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQWM7SUFDdEYsK0VBQStFO0lBQy9FLDREQUE0RDtJQUM1RCxJQUFJLE1BQU0sR0FBMEIscUJBQXFCLENBQUMsU0FBUyxDQUFDO0lBRXBFLElBQUksY0FBOEIsQ0FBQztJQUVuQyxNQUFNLE1BQU0sR0FBc0MsSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUF5QyxFQUFFLEVBQUU7UUFDN0csY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRTtZQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLHNFQUFzRTtZQUN0RSxNQUFNLEdBQUcscUJBQXFCLENBQUMsT0FBTyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoQyx3RUFBd0U7UUFDeEUsSUFBSSxjQUFjLEVBQUU7WUFDbEIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN4QztRQUVELE9BQU8sR0FBRyxFQUFFO1lBQ1YsY0FBYyxFQUFFLFVBQVUsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFO1FBQ3pFLE9BQU8sRUFBRSxJQUFJO1FBQ2IsUUFBUSxFQUFFLElBQUk7S0FDZixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQUdELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxPQUFvQixFQUFFLGdCQUF3QjtJQUM3RSxJQUFJLGdCQUFrQyxDQUFDO0lBRXZDLE1BQU0sTUFBTSxHQUFxQixJQUFJLFVBQVUsQ0FBQyxDQUFDLFFBQXdCLEVBQUUsRUFBRTtRQUMzRSxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRTtZQUMzQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUV0RSxPQUFPLEdBQUcsRUFBRTtZQUNWLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7UUFDdEQsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyLCB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgU2Nyb2xsYmFyVXBkYXRlUmVhc29uIH0gZnJvbSAnLi4vbmctc2Nyb2xsYmFyLm1vZGVsJztcclxuXHJcbmludGVyZmFjZSBSZXNpemVBcmdzIHtcclxuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICB0aHJvdHRsZUR1cmF0aW9uOiBudW1iZXI7XHJcbiAgY29udGVudFdyYXBwZXI/OiBIVE1MRWxlbWVudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZU9ic2VydmVyKHsgZWxlbWVudCwgY29udGVudFdyYXBwZXIsIHRocm90dGxlRHVyYXRpb24gfTogUmVzaXplQXJncyk6IE9ic2VydmFibGU8U2Nyb2xsYmFyVXBkYXRlUmVhc29uPiB7XHJcbiAgLy8gVGhlIGZpcnN0IHRpbWUgdGhlIG9ic2VydmVyIGlzIHRyaWdnZXJlZCBhcyBzb29uIGFzIHRoZSBlbGVtZW50IGlzIG9ic2VydmVkLFxyXG4gIC8vIFNvIHdlIG5lZWQgdG8gZGlmZmVyZW50aWF0ZSB0aGUgcmVhc29uIG9mIHRoZSBldmVudCBmaXJlZFxyXG4gIGxldCByZWFzb246IFNjcm9sbGJhclVwZGF0ZVJlYXNvbiA9IFNjcm9sbGJhclVwZGF0ZVJlYXNvbi5BZnRlckluaXQ7XHJcblxyXG4gIGxldCByZXNpemVPYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXI7XHJcblxyXG4gIGNvbnN0IHN0cmVhbTogT2JzZXJ2YWJsZTxTY3JvbGxiYXJVcGRhdGVSZWFzb24+ID0gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyOiBPYnNlcnZlcjxTY3JvbGxiYXJVcGRhdGVSZWFzb24+KSA9PiB7XHJcbiAgICByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgIG9ic2VydmVyLm5leHQocmVhc29uKTtcclxuICAgICAgLy8gQWZ0ZXIgZmlyc3QgaW5pdCBldmVudCwgbWFyayB0aGUgcmVhc29uIHRvIGJlIGEgcmVzaXplIGZyb20gbm93IG9uLlxyXG4gICAgICByZWFzb24gPSBTY3JvbGxiYXJVcGRhdGVSZWFzb24uUmVzaXplZDtcclxuICAgIH0pO1xyXG4gICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcclxuXHJcbiAgICAvLyBJZiBhIGNvbnRlbnQgZWxlbWVudCBoYXMgYSBzdXBwb3J0aW5nIGNvbnRlbnQgc2Nyb2xsYmFycywgb2JzZXJ2ZSBpdCFcclxuICAgIGlmIChjb250ZW50V3JhcHBlcikge1xyXG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGNvbnRlbnRXcmFwcGVyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICByZXNpemVPYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRocm90dGxlRHVyYXRpb24gPyBzdHJlYW0ucGlwZSh0aHJvdHRsZVRpbWUodGhyb3R0bGVEdXJhdGlvbiwgbnVsbCwge1xyXG4gICAgbGVhZGluZzogdHJ1ZSxcclxuICAgIHRyYWlsaW5nOiB0cnVlXHJcbiAgfSkpIDogc3RyZWFtO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG11dGF0aW9uT2JzZXJ2ZXIoZWxlbWVudDogSFRNTEVsZW1lbnQsIHRocm90dGxlRHVyYXRpb246IG51bWJlcik6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gIGxldCBtdXRhdGlvbk9ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyO1xyXG5cclxuICBjb25zdCBzdHJlYW06IE9ic2VydmFibGU8dm9pZD4gPSBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IE9ic2VydmVyPHZvaWQ+KSA9PiB7XHJcbiAgICBtdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgICBvYnNlcnZlci5uZXh0KCk7XHJcbiAgICB9KTtcclxuICAgIG11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBtdXRhdGlvbk9ic2VydmVyPy5kaXNjb25uZWN0KCk7XHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gc3RyZWFtLnBpcGUodGhyb3R0bGVUaW1lKHRocm90dGxlRHVyYXRpb24sIG51bGwsIHtcclxuICAgIGxlYWRpbmc6IHRydWUsXHJcbiAgICB0cmFpbGluZzogdHJ1ZVxyXG4gIH0pKTtcclxufVxyXG4iXX0=