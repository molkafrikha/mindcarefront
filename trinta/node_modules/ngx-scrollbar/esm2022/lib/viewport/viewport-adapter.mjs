import { signal } from '@angular/core';
import { ViewportClasses } from '../utils/common';
/**
 * Class representing a viewport adapter.
 * Provides methods and properties to interact with a viewport and its content.
 */
export class ViewportAdapter {
    constructor() {
        /*
         * A signal that indicates when viewport adapter is initialized
         */
        this.initialized = signal(false);
    }
    /** Viewport clientHeight */
    get offsetHeight() {
        return this.nativeElement.offsetHeight;
    }
    /** Viewport clientWidth */
    get offsetWidth() {
        return this.nativeElement.offsetWidth;
    }
    /** Viewport scrollTop */
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    /** Viewport scrollLeft */
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    /** Content height */
    get contentHeight() {
        return this.contentWrapperElement.offsetHeight;
    }
    /** Content width */
    get contentWidth() {
        return this.contentWrapperElement.offsetWidth;
    }
    /** The remaining vertical scrollable distance. */
    get scrollMaxX() {
        return this.contentWidth - this.offsetWidth;
    }
    /** The vertical remaining scrollable distance */
    get scrollMaxY() {
        return this.contentHeight - this.offsetHeight;
    }
    /**
     * Initialize viewport
     */
    init(viewportElement, contentElement, spacerElement) {
        // Add viewport class
        viewportElement.classList.add(ViewportClasses.Viewport);
        this.nativeElement = viewportElement;
        // Add content wrapper class
        contentElement.classList.add(ViewportClasses.Content);
        // When integrating the scrollbar with virtual scroll, the content wrapper will have fake size,
        // and a spacer element will have the real size
        // Therefore, if spaceElement is provided, it will be observed instead of the content wrapper
        if (spacerElement) {
            // Set relative position on the spacer element to enable the functionality of sticky for the scrollbars
            spacerElement.style.position = 'relative';
            this.contentWrapperElement = spacerElement;
        }
        else {
            // If spacer is not provided, set it as the content wrapper
            this.contentWrapperElement = contentElement;
        }
        this.initialized.set(true);
    }
    /**
     * Scrolls the viewport vertically to the specified value.
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scrolls the viewport horizontally to the specified value.
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi92aWV3cG9ydC92aWV3cG9ydC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVsRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUE1QjtRQVlFOztXQUVHO1FBQ0gsZ0JBQVcsR0FBNEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBZ0Z2RCxDQUFDO0lBOUVDLDRCQUE0QjtJQUM1QixJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7SUFFRCwyQkFBMkI7SUFDM0IsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDO0lBRUQseUJBQXlCO0lBQ3pCLElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDdEMsQ0FBQztJQUVELDBCQUEwQjtJQUMxQixJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxxQkFBcUI7SUFDckIsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDO0lBQ2pELENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDO0lBQ2hELENBQUM7SUFFRCxrREFBa0Q7SUFDbEQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDOUMsQ0FBQztJQUVELGlEQUFpRDtJQUNqRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUNoRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLENBQUMsZUFBNEIsRUFBRSxjQUEyQixFQUFFLGFBQTJCO1FBQ3pGLHFCQUFxQjtRQUNyQixlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUM7UUFFckMsNEJBQTRCO1FBQzVCLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RCwrRkFBK0Y7UUFDL0YsK0NBQStDO1FBQy9DLDZGQUE2RjtRQUM3RixJQUFJLGFBQWEsRUFBRTtZQUNqQix1R0FBdUc7WUFDdkcsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1lBQzFDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxhQUFhLENBQUM7U0FDNUM7YUFBTTtZQUNMLDJEQUEyRDtZQUMzRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsY0FBYyxDQUFDO1NBQzdDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVMsQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN4QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaWduYWwsIFdyaXRhYmxlU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZpZXdwb3J0Q2xhc3NlcyB9IGZyb20gJy4uL3V0aWxzL2NvbW1vbic7XHJcblxyXG4vKipcclxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgdmlld3BvcnQgYWRhcHRlci5cclxuICogUHJvdmlkZXMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyB0byBpbnRlcmFjdCB3aXRoIGEgdmlld3BvcnQgYW5kIGl0cyBjb250ZW50LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZpZXdwb3J0QWRhcHRlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFZpZXdwb3J0IG5hdGl2ZSBlbGVtZW50XHJcbiAgICovXHJcbiAgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY29udGVudCBpbnNpZGUgdGhlIHZpZXdwb3J0LFxyXG4gICAqIHVzZWQgdG8gbWVhc3VyZSB0aGUgY29udGVudCBzaXplIGFuZCBvYnNlcnZlIGl0cyBjaGFuZ2VzLlxyXG4gICAqL1xyXG4gIGNvbnRlbnRXcmFwcGVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIC8qXHJcbiAgICogQSBzaWduYWwgdGhhdCBpbmRpY2F0ZXMgd2hlbiB2aWV3cG9ydCBhZGFwdGVyIGlzIGluaXRpYWxpemVkXHJcbiAgICovXHJcbiAgaW5pdGlhbGl6ZWQ6IFdyaXRhYmxlU2lnbmFsPGJvb2xlYW4+ID0gc2lnbmFsKGZhbHNlKTtcclxuXHJcbiAgLyoqIFZpZXdwb3J0IGNsaWVudEhlaWdodCAqL1xyXG4gIGdldCBvZmZzZXRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqIFZpZXdwb3J0IGNsaWVudFdpZHRoICovXHJcbiAgZ2V0IG9mZnNldFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgLyoqIFZpZXdwb3J0IHNjcm9sbFRvcCAqL1xyXG4gIGdldCBzY3JvbGxUb3AoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gIH1cclxuXHJcbiAgLyoqIFZpZXdwb3J0IHNjcm9sbExlZnQgKi9cclxuICBnZXQgc2Nyb2xsTGVmdCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gIH1cclxuXHJcbiAgLyoqIENvbnRlbnQgaGVpZ2h0ICovXHJcbiAgZ2V0IGNvbnRlbnRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRlbnRXcmFwcGVyRWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKiogQ29udGVudCB3aWR0aCAqL1xyXG4gIGdldCBjb250ZW50V2lkdGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRlbnRXcmFwcGVyRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICB9XHJcblxyXG4gIC8qKiBUaGUgcmVtYWluaW5nIHZlcnRpY2FsIHNjcm9sbGFibGUgZGlzdGFuY2UuICovXHJcbiAgZ2V0IHNjcm9sbE1heFgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRlbnRXaWR0aCAtIHRoaXMub2Zmc2V0V2lkdGg7XHJcbiAgfVxyXG5cclxuICAvKiogVGhlIHZlcnRpY2FsIHJlbWFpbmluZyBzY3JvbGxhYmxlIGRpc3RhbmNlICovXHJcbiAgZ2V0IHNjcm9sbE1heFkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRlbnRIZWlnaHQgLSB0aGlzLm9mZnNldEhlaWdodDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdmlld3BvcnRcclxuICAgKi9cclxuICBpbml0KHZpZXdwb3J0RWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRlbnRFbGVtZW50OiBIVE1MRWxlbWVudCwgc3BhY2VyRWxlbWVudD86IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICAvLyBBZGQgdmlld3BvcnQgY2xhc3NcclxuICAgIHZpZXdwb3J0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFZpZXdwb3J0Q2xhc3Nlcy5WaWV3cG9ydCk7XHJcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQgPSB2aWV3cG9ydEVsZW1lbnQ7XHJcblxyXG4gICAgLy8gQWRkIGNvbnRlbnQgd3JhcHBlciBjbGFzc1xyXG4gICAgY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChWaWV3cG9ydENsYXNzZXMuQ29udGVudCk7XHJcblxyXG4gICAgLy8gV2hlbiBpbnRlZ3JhdGluZyB0aGUgc2Nyb2xsYmFyIHdpdGggdmlydHVhbCBzY3JvbGwsIHRoZSBjb250ZW50IHdyYXBwZXIgd2lsbCBoYXZlIGZha2Ugc2l6ZSxcclxuICAgIC8vIGFuZCBhIHNwYWNlciBlbGVtZW50IHdpbGwgaGF2ZSB0aGUgcmVhbCBzaXplXHJcbiAgICAvLyBUaGVyZWZvcmUsIGlmIHNwYWNlRWxlbWVudCBpcyBwcm92aWRlZCwgaXQgd2lsbCBiZSBvYnNlcnZlZCBpbnN0ZWFkIG9mIHRoZSBjb250ZW50IHdyYXBwZXJcclxuICAgIGlmIChzcGFjZXJFbGVtZW50KSB7XHJcbiAgICAgIC8vIFNldCByZWxhdGl2ZSBwb3NpdGlvbiBvbiB0aGUgc3BhY2VyIGVsZW1lbnQgdG8gZW5hYmxlIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHN0aWNreSBmb3IgdGhlIHNjcm9sbGJhcnNcclxuICAgICAgc3BhY2VyRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50ID0gc3BhY2VyRWxlbWVudDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIElmIHNwYWNlciBpcyBub3QgcHJvdmlkZWQsIHNldCBpdCBhcyB0aGUgY29udGVudCB3cmFwcGVyXHJcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50ID0gY29udGVudEVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLmluaXRpYWxpemVkLnNldCh0cnVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjcm9sbHMgdGhlIHZpZXdwb3J0IHZlcnRpY2FsbHkgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cclxuICAgKi9cclxuICBzY3JvbGxZVG8odmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2Nyb2xscyB0aGUgdmlld3BvcnQgaG9yaXpvbnRhbGx5IHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgc2Nyb2xsWFRvKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID0gdmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==