import { Component, Input, inject, effect, runInInjectionContext, Injector, ChangeDetectionStrategy } from '@angular/core';
import { tap, delay, merge, switchMap, fromEvent, takeUntil, interval, takeWhile, animationFrameScheduler } from 'rxjs';
import { enableSelection, preventSelection, stopPropagation } from '../utils/common';
import { PointerEventsAdapter } from '../utils/pointer-events-adapter';
import * as i0 from "@angular/core";
export class ScrollbarButton extends PointerEventsAdapter {
    constructor() {
        super(...arguments);
        this.injector = inject(Injector);
        this.afterFirstClickDelay = 120;
        this.firstClickDuration = 100;
        this.scrollBy = 50;
        this.onGoingScrollBy = 12;
        // canScroll function can work for y-axis and x-axis for both LTR and RTL directions
        this.canScrollFunc = {
            forward: (scrollOffset, scrollMax) => scrollOffset < scrollMax,
            backward: (scrollOffset) => scrollOffset > 0
        };
        this.scrollStepFunc = {
            forward: (scrollBy, offset) => offset + scrollBy,
            backward: (scrollBy, offset) => offset - scrollBy
        };
        this.horizontalScrollStepFunc = {
            rtl: {
                forward: (scrollBy, offset, scrollMax) => scrollMax - offset - scrollBy,
                backward: (scrollBy, offset, scrollMax) => scrollMax - offset + scrollBy
            },
            ltr: this.scrollStepFunc
        };
    }
    get pointerEvents() {
        const pointerDown$ = fromEvent(this.nativeElement, 'pointerdown').pipe(stopPropagation(), preventSelection(this.document));
        const pointerUp$ = fromEvent(this.document, 'pointerup', { passive: true }).pipe(enableSelection(this.document));
        const pointerLeave$ = fromEvent(this.nativeElement, 'pointerleave', { passive: true });
        // Combine pointerup and pointerleave events into one stream
        const pointerUpOrLeave$ = merge(pointerUp$, pointerLeave$);
        return pointerDown$.pipe(switchMap(() => this.firstScrollStep().pipe(delay(this.afterFirstClickDelay), switchMap(() => this.onOngoingPointerdown()), takeUntil(pointerUpOrLeave$))));
    }
    ngOnInit() {
        // Get the canScroll function according to scroll direction (forward/backward)
        this.canScroll = this.canScrollFunc[this.scrollDirection];
        if (this.control.axis === 'x') {
            runInInjectionContext(this.injector, () => {
                effect(() => {
                    const dir = this.cmp.direction();
                    // Get the nextStep function according to scroll direction (forward/backward) and layout direction (LTR/RTL)
                    this.nextStep = this.horizontalScrollStepFunc[dir][this.scrollDirection];
                });
            });
        }
        else {
            // Get the nextStep function according to scroll direction (forward/backward)
            this.nextStep = this.scrollStepFunc[this.scrollDirection];
        }
    }
    firstScrollStep() {
        const value = this.nextStep(this.scrollBy, this.control.viewportScrollOffset, this.control.viewportScrollMax);
        return this.control.scrollTo(value, this.firstClickDuration);
    }
    onGoingScrollStep() {
        const scrollMax = this.control.viewportScrollMax;
        const value = this.nextStep(this.onGoingScrollBy, this.control.viewportScrollOffset, scrollMax);
        this.control.instantScrollTo(value, scrollMax);
    }
    onOngoingPointerdown() {
        return interval(0, animationFrameScheduler).pipe(takeWhile(() => this.canScroll(this.control.viewportScrollOffset, this.control.viewportScrollMax)), tap(() => this.onGoingScrollStep()));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: ScrollbarButton, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.3", type: ScrollbarButton, isStandalone: true, selector: "button[scrollbarButton]", inputs: { scrollbarButton: "scrollbarButton", scrollDirection: "scrollDirection" }, usesInheritance: true, ngImport: i0, template: "<div class=\"ng-scrollbar-button-icon\">\r\n  <svg viewBox=\"0 0 512 512\"\r\n       xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path\r\n      d=\"M413.1,327.3l-1.8-2.1l-136-156.5c-4.6-5.3-11.5-8.6-19.2-8.6c-7.7,0-14.6,3.4-19.2,8.6L101,324.9l-2.3,2.6  C97,330,96,333,96,336.2c0,8.7,7.4,15.8,16.6,15.8v0h286.8v0c9.2,0,16.6-7.1,16.6-15.8C416,332.9,414.9,329.8,413.1,327.3z\"/>\r\n  </svg>\r\n</div>\r\n", styles: [":host{--scrollbar-button-size: 20px;position:relative;border:none;margin:0;padding:0;border-radius:0;appearance:none;background-color:var(--scrollbar-button-color)}:host svg{fill:var(--scrollbar-button-fill)}:host:hover{background:var(--scrollbar-button-hover-color)}:host:hover svg{fill:var(--scrollbar-button-hover-fill)}:host:active{background:var(--scrollbar-button-active-color)}:host:active svg{fill:var(--scrollbar-button-active-fill)}:host[scrollbarButton=top],:host[scrollbarButton=start]{order:1}:host[scrollbarButton=bottom],:host[scrollbarButton=end]{order:3}:host[scrollbarButton=top],:host[scrollbarButton=bottom]{width:100%;height:var(--scrollbar-button-size)}:host[scrollbarButton=start],:host[scrollbarButton=end]{width:var(--scrollbar-button-size);height:100%}:host[scrollbarButton=bottom]{--_button-rotate: 180deg}:host[scrollbarButton=start]{--_button-rotate: -90deg}:host[scrollbarButton=start] .ng-scrollbar-button-icon{writing-mode:vertical-lr}:host[scrollbarButton=end]{--_button-rotate: 90deg}:host[scrollbarButton=end] .ng-scrollbar-button-icon{writing-mode:vertical-rl}.ng-scrollbar-button-icon{rotate:var(--_button-rotate);display:flex;place-content:center;place-items:center;width:100%;height:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: ScrollbarButton, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'button[scrollbarButton]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"ng-scrollbar-button-icon\">\r\n  <svg viewBox=\"0 0 512 512\"\r\n       xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path\r\n      d=\"M413.1,327.3l-1.8-2.1l-136-156.5c-4.6-5.3-11.5-8.6-19.2-8.6c-7.7,0-14.6,3.4-19.2,8.6L101,324.9l-2.3,2.6  C97,330,96,333,96,336.2c0,8.7,7.4,15.8,16.6,15.8v0h286.8v0c9.2,0,16.6-7.1,16.6-15.8C416,332.9,414.9,329.8,413.1,327.3z\"/>\r\n  </svg>\r\n</div>\r\n", styles: [":host{--scrollbar-button-size: 20px;position:relative;border:none;margin:0;padding:0;border-radius:0;appearance:none;background-color:var(--scrollbar-button-color)}:host svg{fill:var(--scrollbar-button-fill)}:host:hover{background:var(--scrollbar-button-hover-color)}:host:hover svg{fill:var(--scrollbar-button-hover-fill)}:host:active{background:var(--scrollbar-button-active-color)}:host:active svg{fill:var(--scrollbar-button-active-fill)}:host[scrollbarButton=top],:host[scrollbarButton=start]{order:1}:host[scrollbarButton=bottom],:host[scrollbarButton=end]{order:3}:host[scrollbarButton=top],:host[scrollbarButton=bottom]{width:100%;height:var(--scrollbar-button-size)}:host[scrollbarButton=start],:host[scrollbarButton=end]{width:var(--scrollbar-button-size);height:100%}:host[scrollbarButton=bottom]{--_button-rotate: 180deg}:host[scrollbarButton=start]{--_button-rotate: -90deg}:host[scrollbarButton=start] .ng-scrollbar-button-icon{writing-mode:vertical-lr}:host[scrollbarButton=end]{--_button-rotate: 90deg}:host[scrollbarButton=end] .ng-scrollbar-button-icon{writing-mode:vertical-rl}.ng-scrollbar-button-icon{rotate:var(--_button-rotate);display:flex;place-content:center;place-items:center;width:100%;height:100%}\n"] }]
        }], propDecorators: { scrollbarButton: [{
                type: Input,
                args: [{ required: true }]
            }], scrollDirection: [{
                type: Input,
                args: [{ required: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,