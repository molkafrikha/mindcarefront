import { Directive, inject, effect } from '@angular/core';
import { of, fromEvent, map, takeUntil, tap, switchMap } from 'rxjs';
import { stopPropagation, enableSelection, preventSelection } from '../utils/common';
import { ScrollbarManager } from '../utils/scrollbar-manager';
import { TrackAdapter } from '../track/track-adapter';
import { PointerEventsAdapter } from '../utils/pointer-events-adapter';
import * as i0 from "@angular/core";
export class ThumbAdapter extends PointerEventsAdapter {
    // Returns thumb size
    get size() {
        return this.nativeElement[this.control.sizeProperty];
    }
    // The maximum space available for scrolling.
    get trackMax() {
        return this.track.size - this.size;
    }
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    get pointerEvents() {
        return fromEvent(this.nativeElement, 'pointerdown').pipe(stopPropagation(), preventSelection(this.document), switchMap((e) => {
            let startTrackMax;
            let startScrollMax;
            const dragStart = of(e).pipe(tap(() => {
                // Capture scrollMax and trackMax once
                startTrackMax = this.trackMax;
                startScrollMax = this.control.viewportScrollMax;
                this.setDragging(this.control.axis);
            }));
            const dragging = fromEvent(this.document, 'pointermove').pipe(stopPropagation());
            const dragEnd = fromEvent(this.document, 'pointerup', { capture: true }).pipe(stopPropagation(), enableSelection(this.document), tap(() => this.setDragging('none')));
            return dragStart.pipe(map((startEvent) => startEvent[this.control.offsetProperty]), switchMap((startOffset) => dragging.pipe(map((moveEvent) => moveEvent[this.control.clientProperty]), 
            // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
            map((moveClient) => moveClient - this.track.offset), map((trackRelativeOffset) => startScrollMax * (trackRelativeOffset - startOffset) / startTrackMax), tap((scrollPosition) => this.control.instantScrollTo(scrollPosition, startScrollMax)), takeUntil(dragEnd))));
        }));
    }
    constructor() {
        effect(() => {
            const script = this.manager.scrollTimelinePolyfill();
            if (script && !this._animation) {
                this._animation = startPolyfill(script, this.nativeElement, this.cmp.viewport.nativeElement, this.control.axis);
            }
        });
        super();
        this.manager = inject(ScrollbarManager);
        this.track = inject(TrackAdapter);
    }
    setDragging(value) {
        this.zone.run(() => this.cmp.dragging.set(value));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: ThumbAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.3", type: ThumbAdapter, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: ThumbAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
function startPolyfill(ScrollTimeline, element, source, axis) {
    return element.animate({
        translate: [
            'var(--_scrollbar-thumb-transform-from)',
            'var(--_scrollbar-thumb-transform-to)'
        ]
    }, {
        fill: 'both',
        easing: 'linear',
        timeline: new ScrollTimeline({ source, axis })
    });
}
//# sourceMappingURL=data:application/json;base64,