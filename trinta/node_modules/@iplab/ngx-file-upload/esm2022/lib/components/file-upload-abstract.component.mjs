import { FileUploadControl } from './../helpers/control.class';
import { ElementRef, Renderer2, ChangeDetectorRef, Directive, inject } from '@angular/core';
import { merge } from 'rxjs';
import { IsNullOrEmpty } from './../helpers/helpers.class';
import * as i0 from "@angular/core";
export const HAS_FILES_CLASS_NAME = 'has-files';
export const IS_INVALID_CLASS_NAME = 'ng-invalid';
export class FileUploadAbstract {
    constructor() {
        this.control = null;
        this.isMultiple = null;
        this.hooks = [];
        this.subscriptions = [];
        this.hostElementRef = inject(ElementRef);
        this.renderer = inject(Renderer2);
        this.cdr = inject(ChangeDetectorRef);
        this.onChange = () => { };
    }
    ngOnInit() {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
        this.setEvents();
        this.checkAndMarkAsDisabled();
        this.checkAndSetMultiple();
        this.connectToForm();
    }
    ngOnDestroy() {
        this.cdr.detach();
        this.hooks.forEach((hook) => hook());
        this.hooks.length = 0;
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.subscriptions.length = 0;
    }
    setEvents() {
        this.subscriptions.push(this.control.statusChanges.subscribe((status) => this.checkAndMarkAsDisabled()));
        this.subscriptions.push(this.control.eventsChanges.subscribe((event) => this.triggerEvent(event)));
        this.subscriptions.push(this.control.acceptChanges.subscribe((accept) => this.updateAcceptAttr(accept)));
        this.subscriptions.push(this.control.multipleChanges.subscribe((isMultiple) => this.toggleMultiple(isMultiple)));
        this.subscriptions.push(merge(this.control.listVisibilityChanges, this.control.valueChanges)
            .subscribe(() => this.checkAndSetFilesClass()));
        this.subscriptions.push(merge(this.control.statusChanges, this.control.valueChanges)
            .subscribe(() => this.checkAndSetInvalidClass()));
    }
    clearInputEl() {
        this.input.nativeElement.value = null;
    }
    /**
     * used to update model once state is changed through @Input
     * or in case of simple-file-upload to override user value
     */
    checkAndSetMultiple() {
        if (!this.control || this.isMultiple == null) {
            return;
        }
        const isMultiple = this.isMultiple === true || this.isMultiple === 'true';
        if (isMultiple !== this.control.isMultiple) {
            this.control.multiple(isMultiple);
        }
    }
    hasFiles() {
        return this.control.isListVisible && this.control.size > 0;
    }
    isInvalid() {
        return !this.control.disabled && this.control.invalid;
    }
    checkAndSetFilesClass() {
        if (this.hasFiles() && this.hostElementRef) {
            this.renderer.addClass(this.hostElementRef.nativeElement, HAS_FILES_CLASS_NAME);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, HAS_FILES_CLASS_NAME);
        }
    }
    checkAndSetInvalidClass() {
        if (this.isInvalid() && this.hostElementRef) {
            this.renderer.addClass(this.hostElementRef.nativeElement, IS_INVALID_CLASS_NAME);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, IS_INVALID_CLASS_NAME);
        }
    }
    triggerEvent(event) {
        if (typeof this.label.nativeElement[event] === 'function') {
            this.label.nativeElement[event]();
        }
    }
    updateAcceptAttr(accept) {
        if (!IsNullOrEmpty(accept)) {
            this.renderer.setAttribute(this.input.nativeElement, 'accept', accept);
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'accept');
        }
    }
    checkAndMarkAsDisabled() {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', true);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', false);
        }
    }
    toggleMultiple(isMultiple) {
        if (isMultiple) {
            this.renderer.setAttribute(this.input.nativeElement, 'multiple', '');
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'multiple');
        }
    }
    /**
     * ControlValueAccessor implementation
     */
    connectToForm() {
        this.subscriptions.push(this.control.valueChanges.subscribe((v) => this.onChange(v)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FileUploadAbstract, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.0", type: FileUploadAbstract, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FileUploadAbstract, decorators: [{
            type: Directive
        }] });
//# sourceMappingURL=data:application/json;base64,