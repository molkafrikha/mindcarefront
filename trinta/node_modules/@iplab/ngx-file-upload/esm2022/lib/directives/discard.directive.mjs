import { Directive, Input, Optional, Host, Self } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../components/multiple-file-upload/file-upload.component";
import * as i2 from "../components/simple-file-upload/simple-file-upload.component";
export class FilesDiscardDirective {
    set discard(discard) {
        if (typeof discard === 'string' && (discard === 'true' || discard === 'false')) {
            this.discardValue = JSON.parse(discard.toLowerCase());
        }
        else if (typeof discard === 'boolean') {
            this.discardValue = discard;
        }
        else {
            throw Error(`Provided value in directive [discard]="${discard}" is not boolean.`);
        }
    }
    constructor(fileUpload, simpleFileUpload) {
        this.discardValue = null;
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    ngAfterViewInit() {
        this.setAccept(this.discardValue);
    }
    ngOnChanges(changes) {
        if ('discard' in changes && changes['discard'].currentValue !== changes['discard'].previousValue) {
            this.setAccept(this.discardValue);
        }
    }
    setAccept(discard) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.discardInvalid(discard);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FilesDiscardDirective, deps: [{ token: i1.FileUploadComponent, host: true, optional: true, self: true }, { token: i2.SimpleFileUploadComponent, host: true, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.0", type: FilesDiscardDirective, isStandalone: true, selector: "file-upload[discard]", inputs: { discard: "discard" }, host: { properties: { "attr.discard": "discard ? discard : null" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FilesDiscardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'file-upload[discard]',
                    host: { '[attr.discard]': 'discard ? discard : null' },
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.FileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }, { type: i2.SimpleFileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }], propDecorators: { discard: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY2FyZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pcGxhYi9uZ3gtZmlsZS11cGxvYWQvc3JjL2xpYi9kaXJlY3RpdmVzL2Rpc2NhcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBNEIsTUFBTSxlQUFlLENBQUM7Ozs7QUFXaEgsTUFBTSxPQUFPLHFCQUFxQjtJQUk5QixJQUNXLE9BQU8sQ0FBQyxPQUF5QjtRQUN4QyxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLE9BQU8sS0FBSyxNQUFNLElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxFQUFFO1lBQzVFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUN6RDthQUFNLElBQUksT0FBTyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1NBQy9CO2FBQU07WUFDSCxNQUFNLEtBQUssQ0FBQywwQ0FBMEMsT0FBTyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3JGO0lBQ0wsQ0FBQztJQUlELFlBQ2dDLFVBQStCLEVBQy9CLGdCQUEyQztRQWpCbkUsaUJBQVksR0FBbUIsSUFBSSxDQUFDO1FBYTNCLGVBQVUsR0FBb0QsSUFBSSxDQUFDO1FBS2hGLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLGdCQUFnQixDQUFDO0lBQ3JELENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGFBQWEsRUFBRTtZQUM5RixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7SUFFTyxTQUFTLENBQUMsT0FBZ0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7OEdBckNRLHFCQUFxQjtrR0FBckIscUJBQXFCOzsyRkFBckIscUJBQXFCO2tCQUxqQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLElBQUksRUFBRSxFQUFDLGdCQUFnQixFQUFFLDBCQUEwQixFQUFDO29CQUNwRCxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OzBCQW1CUSxRQUFROzswQkFBSSxJQUFJOzswQkFBSSxJQUFJOzswQkFDeEIsUUFBUTs7MEJBQUksSUFBSTs7MEJBQUksSUFBSTt5Q0FkbEIsT0FBTztzQkFEakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIE9wdGlvbmFsLCBIb3N0LCBTZWxmLCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbXVsdGlwbGUtZmlsZS11cGxvYWQvZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvc2ltcGxlLWZpbGUtdXBsb2FkL3NpbXBsZS1maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5cclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnZmlsZS11cGxvYWRbZGlzY2FyZF0nLFxyXG4gICAgaG9zdDogeydbYXR0ci5kaXNjYXJkXSc6ICdkaXNjYXJkID8gZGlzY2FyZCA6IG51bGwnfSxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbGVzRGlzY2FyZERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XHJcblxyXG4gICAgcHJpdmF0ZSBkaXNjYXJkVmFsdWU6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHNldCBkaXNjYXJkKGRpc2NhcmQ6IGJvb2xlYW4gfCBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRpc2NhcmQgPT09ICdzdHJpbmcnICYmIChkaXNjYXJkID09PSAndHJ1ZScgfHwgZGlzY2FyZCA9PT0gJ2ZhbHNlJykpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNjYXJkVmFsdWUgPSBKU09OLnBhcnNlKGRpc2NhcmQudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGlzY2FyZCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzY2FyZFZhbHVlID0gZGlzY2FyZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgUHJvdmlkZWQgdmFsdWUgaW4gZGlyZWN0aXZlIFtkaXNjYXJkXT1cIiR7ZGlzY2FyZH1cIiBpcyBub3QgYm9vbGVhbi5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50IHwgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEhvc3QoKSBAU2VsZigpIGZpbGVVcGxvYWQ6IEZpbGVVcGxvYWRDb21wb25lbnQsXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEhvc3QoKSBAU2VsZigpIHNpbXBsZUZpbGVVcGxvYWQ6IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLmZpbGVVcGxvYWQgPSBmaWxlVXBsb2FkIHx8IHNpbXBsZUZpbGVVcGxvYWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldEFjY2VwdCh0aGlzLmRpc2NhcmRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZiAoJ2Rpc2NhcmQnIGluIGNoYW5nZXMgJiYgY2hhbmdlc1snZGlzY2FyZCddLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1snZGlzY2FyZCddLnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRBY2NlcHQodGhpcy5kaXNjYXJkVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEFjY2VwdChkaXNjYXJkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVVwbG9hZCAmJiB0aGlzLmZpbGVVcGxvYWQuY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbGVVcGxvYWQuY29udHJvbC5kaXNjYXJkSW52YWxpZChkaXNjYXJkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19