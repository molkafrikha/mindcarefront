import { FileUploadControl } from './../helpers/control.class';
import { ElementRef, OnDestroy, Renderer2, ChangeDetectorRef, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare const HAS_FILES_CLASS_NAME = "has-files";
export declare const IS_INVALID_CLASS_NAME = "ng-invalid";
export declare abstract class FileUploadAbstract implements OnInit, OnDestroy {
    control: FileUploadControl;
    abstract input: ElementRef<HTMLInputElement>;
    abstract label: ElementRef<HTMLLabelElement>;
    protected isMultiple: boolean | string;
    protected readonly hooks: Array<Function>;
    protected readonly subscriptions: Array<Subscription>;
    protected readonly hostElementRef: ElementRef;
    protected readonly renderer: Renderer2;
    protected readonly cdr: ChangeDetectorRef;
    protected onChange: (v: Array<File>) => void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    protected setEvents(): void;
    protected clearInputEl(): void;
    /**
     * used to update model once state is changed through @Input
     * or in case of simple-file-upload to override user value
     */
    protected checkAndSetMultiple(): void;
    private hasFiles;
    private isInvalid;
    private checkAndSetFilesClass;
    private checkAndSetInvalidClass;
    private triggerEvent;
    private updateAcceptAttr;
    private checkAndMarkAsDisabled;
    private toggleMultiple;
    /**
     * ControlValueAccessor implementation
     */
    private connectToForm;
    static ɵfac: i0.ɵɵFactoryDeclaration<FileUploadAbstract, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FileUploadAbstract, never, never, {}, {}, never, never, false, never>;
}
//# sourceMappingURL=file-upload-abstract.component.d.ts.map